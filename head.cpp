// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `head.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <head.h>
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ValueFactory.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/InputStream.h>
#include <Ice/OutputStream.h>
#include <Ice/SliceChecksums.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 0
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace
{

const ::std::string iceC_modes_actions_ids[2] =
{
    "::Ice::Object",
    "::modes::actions"
};
const ::std::string iceC_modes_actions_ops[] =
{
    "compute",
    "getnum",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "printString",
    "printStringWithRet"
};
const ::std::string iceC_modes_actions_printString_name = "printString";
const ::std::string iceC_modes_actions_printStringWithRet_name = "printStringWithRet";
const ::std::string iceC_modes_actions_getnum_name = "getnum";
const ::std::string iceC_modes_actions_compute_name = "compute";

const ::IceInternal::DefaultValueFactoryInit<::modes::base> iceC_modes_base_init("::modes::base");

const ::IceInternal::DefaultValueFactoryInit<::modes::stu> iceC_modes_stu_init("::modes::stu");

const ::std::string iceC_modes_getAction_ids[2] =
{
    "::Ice::Object",
    "::modes::getAction"
};
const ::std::string iceC_modes_getAction_ops[] =
{
    "getNode",
    "getStu",
    "getactions",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};
const ::std::string iceC_modes_getAction_getactions_name = "getactions";
const ::std::string iceC_modes_getAction_getStu_name = "getStu";
const ::std::string iceC_modes_getAction_getNode_name = "getNode";

}

bool
modes::actions::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_modes_actions_ids, iceC_modes_actions_ids + 2, s);
}

::std::vector<::std::string>
modes::actions::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_modes_actions_ids[0], &iceC_modes_actions_ids[2]);
}

::std::string
modes::actions::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
modes::actions::ice_staticId()
{
    static const ::std::string typeId = "::modes::actions";
    return typeId;
}

bool
modes::actions::_iceD_printString(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Idempotent, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_str;
    istr->readAll(iceP_str);
    inS.endReadParams();
    this->printString(::std::move(iceP_str), current);
    inS.writeEmptyParams();
    return true;
}

bool
modes::actions::_iceD_printStringWithRet(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_str;
    istr->readAll(iceP_str);
    inS.endReadParams();
    int ret = this->printStringWithRet(::std::move(iceP_str), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}

bool
modes::actions::_iceD_getnum(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_n1;
    int iceP_n2;
    istr->readAll(iceP_n1, iceP_n2);
    inS.endReadParams();
    int iceP_num;
    bool ret = this->getnum(iceP_n1, iceP_n2, iceP_num, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_num, ret);
    inS.endWriteParams();
    return true;
}

bool
modes::actions::_iceD_compute(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_n1;
    int iceP_n2;
    istr->readAll(iceP_n1, iceP_n2);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](int ret)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->computeAsync(iceP_n1, iceP_n2, responseCB, inA->exception(), current);
    return false;
}

bool
modes::actions::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_modes_actions_ops, iceC_modes_actions_ops + 8, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_modes_actions_ops)
    {
        case 0:
        {
            return _iceD_compute(in, current);
        }
        case 1:
        {
            return _iceD_getnum(in, current);
        }
        case 2:
        {
            return _iceD_ice_id(in, current);
        }
        case 3:
        {
            return _iceD_ice_ids(in, current);
        }
        case 4:
        {
            return _iceD_ice_isA(in, current);
        }
        case 5:
        {
            return _iceD_ice_ping(in, current);
        }
        case 6:
        {
            return _iceD_printString(in, current);
        }
        case 7:
        {
            return _iceD_printStringWithRet(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}

bool
modes::getAction::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_modes_getAction_ids, iceC_modes_getAction_ids + 2, s);
}

::std::vector<::std::string>
modes::getAction::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_modes_getAction_ids[0], &iceC_modes_getAction_ids[2]);
}

::std::string
modes::getAction::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
modes::getAction::ice_staticId()
{
    static const ::std::string typeId = "::modes::getAction";
    return typeId;
}

bool
modes::getAction::_iceD_getactions(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::std::shared_ptr<actionsPrx> ret = this->getactions(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}

bool
modes::getAction::_iceD_getStu(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<stu> iceP_s;
    istr->readAll(iceP_s);
    istr->readPendingValues();
    inS.endReadParams();
    ::std::shared_ptr<stu> ret = this->getStu(::std::move(iceP_s), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}

bool
modes::getAction::_iceD_getNode(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    node iceP_n;
    istr->readAll(iceP_n);
    inS.endReadParams();
    node ret = this->getNode(::std::move(iceP_n), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}

bool
modes::getAction::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_modes_getAction_ops, iceC_modes_getAction_ops + 7, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_modes_getAction_ops)
    {
        case 0:
        {
            return _iceD_getNode(in, current);
        }
        case 1:
        {
            return _iceD_getStu(in, current);
        }
        case 2:
        {
            return _iceD_getactions(in, current);
        }
        case 3:
        {
            return _iceD_ice_id(in, current);
        }
        case 4:
        {
            return _iceD_ice_ids(in, current);
        }
        case 5:
        {
            return _iceD_ice_isA(in, current);
        }
        case 6:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}

modes::base::~base()
{
}

const ::std::string&
modes::base::ice_staticId()
{
    static const ::std::string typeId = "::modes::base";
    return typeId;
}

modes::stu::~stu()
{
}

const ::std::string&
modes::stu::ice_staticId()
{
    static const ::std::string typeId = "::modes::stu";
    return typeId;
}

void
modes::actionsPrx::_iceI_printString(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::string& iceP_str, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_modes_actions_printString_name, ::Ice::OperationMode::Idempotent, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_str);
        },
        nullptr);
}

void
modes::actionsPrx::_iceI_printStringWithRet(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>& outAsync, const ::std::string& iceP_str, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_modes_actions_printStringWithRet_name);
    outAsync->invoke(iceC_modes_actions_printStringWithRet_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_str);
        },
        nullptr);
}

void
modes::actionsPrx::_iceI_getnum(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<actions::GetnumResult>>& outAsync, int iceP_n1, int iceP_n2, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_modes_actions_getnum_name);
    outAsync->invoke(iceC_modes_actions_getnum_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_n1, iceP_n2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            actions::GetnumResult v;
            istr->readAll(v.num, v.returnValue);
            return v;
        });
}

void
modes::actionsPrx::_iceI_compute(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>& outAsync, int iceP_n1, int iceP_n2, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_modes_actions_compute_name);
    outAsync->invoke(iceC_modes_actions_compute_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_n1, iceP_n2);
        },
        nullptr);
}

::std::shared_ptr<::Ice::ObjectPrx>
modes::actionsPrx::_newInstance() const
{
    return ::IceInternal::createProxy<actionsPrx>();
}

const ::std::string&
modes::actionsPrx::ice_staticId()
{
    return actions::ice_staticId();
}

void
modes::getActionPrx::_iceI_getactions(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<actionsPrx>>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_modes_getAction_getactions_name);
    outAsync->invoke(iceC_modes_getAction_getactions_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}

void
modes::getActionPrx::_iceI_getStu(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<stu>>>& outAsync, const ::std::shared_ptr<stu>& iceP_s, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_modes_getAction_getStu_name);
    outAsync->invoke(iceC_modes_getAction_getStu_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_s);
            ostr->writePendingValues();
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::shared_ptr<stu> ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}

void
modes::getActionPrx::_iceI_getNode(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<node>>& outAsync, const node& iceP_n, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_modes_getAction_getNode_name);
    outAsync->invoke(iceC_modes_getAction_getNode_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_n);
        },
        nullptr);
}

::std::shared_ptr<::Ice::ObjectPrx>
modes::getActionPrx::_newInstance() const
{
    return ::IceInternal::createProxy<getActionPrx>();
}

const ::std::string&
modes::getActionPrx::ice_staticId()
{
    return getAction::ice_staticId();
}

namespace Ice
{
}

namespace
{

const char* iceSliceChecksums[] =
{
    "::modes::actions", "aad85012203f91c1b5a8c36c7fb2a0a0",
    "::modes::base", "676f35bf8c64a5cc3cefeb1a26dc1b",
    "::modes::getAction", "b3bbe05bbba6c2a3c2a43e8d10ccd168",
    "::modes::node", "5d2e656c2465b28c373a8784d6380d",
    "::modes::stu", "b0869e37a996c3c3ac8dbbe7ef87d1c",
    0
};
const IceInternal::SliceChecksumInit iceSliceChecksumInit(iceSliceChecksums);

}

#else // C++98 mapping

namespace
{

const ::std::string iceC_modes_actions_printString_name = "printString";

const ::std::string iceC_modes_actions_printStringWithRet_name = "printStringWithRet";

const ::std::string iceC_modes_actions_getnum_name = "getnum";

const ::std::string iceC_modes_actions_compute_name = "compute";

const ::std::string iceC_modes_getAction_getactions_name = "getactions";

const ::std::string iceC_modes_getAction_getStu_name = "getStu";

const ::std::string iceC_modes_getAction_getNode_name = "getNode";

}

modes::AMD_actions_compute::~AMD_actions_compute()
{
}

IceAsync::modes::AMD_actions_compute::AMD_actions_compute(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::modes::AMD_actions_compute::ice_response(::Ice::Int ret)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(ret);
    endWriteParams();
    completed();
}
::IceProxy::Ice::Object* ::IceProxy::modes::upCast(actions* p) { return p; }

void
::IceProxy::modes::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< actions>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new actions;
        v->_copyFrom(proxy);
    }
}

::Ice::AsyncResultPtr
IceProxy::modes::actions::_iceI_begin_printString(const ::std::string& iceP_str, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_modes_actions_printString_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_modes_actions_printString_name, ::Ice::Idempotent, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_str);
        result->endWriteParams();
        result->invoke(iceC_modes_actions_printString_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::modes::actions::end_printString(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_modes_actions_printString_name);
}

::Ice::AsyncResultPtr
IceProxy::modes::actions::_iceI_begin_printStringWithRet(const ::std::string& iceP_str, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_modes_actions_printStringWithRet_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_modes_actions_printStringWithRet_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_modes_actions_printStringWithRet_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_str);
        result->endWriteParams();
        result->invoke(iceC_modes_actions_printStringWithRet_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Ice::Int
IceProxy::modes::actions::end_printStringWithRet(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_modes_actions_printStringWithRet_name);
    ::Ice::Int ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::modes::actions::_iceI_begin_getnum(::Ice::Int iceP_n1, ::Ice::Int iceP_n2, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_modes_actions_getnum_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_modes_actions_getnum_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_modes_actions_getnum_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_n1);
        ostr->write(iceP_n2);
        result->endWriteParams();
        result->invoke(iceC_modes_actions_getnum_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

bool
IceProxy::modes::actions::end_getnum(::Ice::Int& iceP_num, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_modes_actions_getnum_name);
    bool ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_num);
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::modes::actions::_iceI_begin_compute(::Ice::Int iceP_n1, ::Ice::Int iceP_n2, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_modes_actions_compute_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_modes_actions_compute_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_modes_actions_compute_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_n1);
        ostr->write(iceP_n2);
        result->endWriteParams();
        result->invoke(iceC_modes_actions_compute_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Ice::Int
IceProxy::modes::actions::end_compute(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_modes_actions_compute_name);
    ::Ice::Int ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::IceProxy::Ice::Object*
IceProxy::modes::actions::_newInstance() const
{
    return new actions;
}

const ::std::string&
IceProxy::modes::actions::ice_staticId()
{
    return ::modes::actions::ice_staticId();
}
::IceProxy::Ice::Object* ::IceProxy::modes::upCast(base* p) { return p; }

void
::IceProxy::modes::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< base>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new base;
        v->_copyFrom(proxy);
    }
}

::IceProxy::Ice::Object*
IceProxy::modes::base::_newInstance() const
{
    return new base;
}

const ::std::string&
IceProxy::modes::base::ice_staticId()
{
    return ::modes::base::ice_staticId();
}
::IceProxy::Ice::Object* ::IceProxy::modes::upCast(stu* p) { return p; }

void
::IceProxy::modes::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< stu>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new stu;
        v->_copyFrom(proxy);
    }
}

::IceProxy::Ice::Object*
IceProxy::modes::stu::_newInstance() const
{
    return new stu;
}

const ::std::string&
IceProxy::modes::stu::ice_staticId()
{
    return ::modes::stu::ice_staticId();
}
::IceProxy::Ice::Object* ::IceProxy::modes::upCast(getAction* p) { return p; }

void
::IceProxy::modes::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< getAction>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new getAction;
        v->_copyFrom(proxy);
    }
}

::Ice::AsyncResultPtr
IceProxy::modes::getAction::_iceI_begin_getactions(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_modes_getAction_getactions_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_modes_getAction_getactions_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_modes_getAction_getactions_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_modes_getAction_getactions_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::modes::actionsPrx
IceProxy::modes::getAction::end_getactions(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_modes_getAction_getactions_name);
    ::modes::actionsPrx ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::modes::getAction::_iceI_begin_getStu(const ::modes::stuPtr& iceP_s, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_modes_getAction_getStu_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_modes_getAction_getStu_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_modes_getAction_getStu_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_s);
        ostr->writePendingValues();
        result->endWriteParams();
        result->invoke(iceC_modes_getAction_getStu_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::modes::stuPtr
IceProxy::modes::getAction::end_getStu(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_modes_getAction_getStu_name);
    ::modes::stuPtr ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    istr->readPendingValues();
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::modes::getAction::_iceI_begin_getNode(const ::modes::node& iceP_n, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_modes_getAction_getNode_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_modes_getAction_getNode_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_modes_getAction_getNode_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_n);
        result->endWriteParams();
        result->invoke(iceC_modes_getAction_getNode_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::modes::node
IceProxy::modes::getAction::end_getNode(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_modes_getAction_getNode_name);
    ::modes::node ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::IceProxy::Ice::Object*
IceProxy::modes::getAction::_newInstance() const
{
    return new getAction;
}

const ::std::string&
IceProxy::modes::getAction::ice_staticId()
{
    return ::modes::getAction::ice_staticId();
}

modes::actions::~actions()
{
}

::Ice::Object* modes::upCast(actions* p) { return p; }


namespace
{
const ::std::string iceC_modes_actions_ids[2] =
{
    "::Ice::Object",
    "::modes::actions"
};

}

bool
modes::actions::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_modes_actions_ids, iceC_modes_actions_ids + 2, s);
}

::std::vector< ::std::string>
modes::actions::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_modes_actions_ids[0], &iceC_modes_actions_ids[2]);
}

const ::std::string&
modes::actions::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
modes::actions::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::modes::actions";
    return typeId;
#else
    return iceC_modes_actions_ids[1];
#endif
}

bool
modes::actions::_iceD_printString(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Idempotent, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_str;
    istr->read(iceP_str);
    inS.endReadParams();
    this->printString(iceP_str, current);
    inS.writeEmptyParams();
    return true;
}

bool
modes::actions::_iceD_printStringWithRet(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_str;
    istr->read(iceP_str);
    inS.endReadParams();
    ::Ice::Int ret = this->printStringWithRet(iceP_str, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}

bool
modes::actions::_iceD_getnum(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Int iceP_n1;
    ::Ice::Int iceP_n2;
    istr->read(iceP_n1);
    istr->read(iceP_n2);
    inS.endReadParams();
    ::Ice::Int iceP_num;
    bool ret = this->getnum(iceP_n1, iceP_n2, iceP_num, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(iceP_num);
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}

bool
modes::actions::_iceD_compute(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Int iceP_n1;
    ::Ice::Int iceP_n2;
    istr->read(iceP_n1);
    istr->read(iceP_n2);
    inS.endReadParams();
    this->compute_async(new IceAsync::modes::AMD_actions_compute(inS), iceP_n1, iceP_n2, current);
    return false;
}

namespace
{
const ::std::string iceC_modes_actions_all[] =
{
    "compute",
    "getnum",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "printString",
    "printStringWithRet"
};

}

bool
modes::actions::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_modes_actions_all, iceC_modes_actions_all + 8, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_modes_actions_all)
    {
        case 0:
        {
            return _iceD_compute(in, current);
        }
        case 1:
        {
            return _iceD_getnum(in, current);
        }
        case 2:
        {
            return _iceD_ice_id(in, current);
        }
        case 3:
        {
            return _iceD_ice_ids(in, current);
        }
        case 4:
        {
            return _iceD_ice_isA(in, current);
        }
        case 5:
        {
            return _iceD_ice_ping(in, current);
        }
        case 6:
        {
            return _iceD_printString(in, current);
        }
        case 7:
        {
            return _iceD_printStringWithRet(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}

void
modes::actions::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< actions, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
modes::actions::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< actions, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}

void
modes::_icePatchObjectPtr(actionsPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = actionsPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(actions::ice_staticId(), v);
    }
}

modes::base::~base()
{
}

::Ice::Object* modes::upCast(base* p) { return p; }

::Ice::ObjectPtr
modes::base::ice_clone() const
{
    ::Ice::Object* p = new base(*this);
    return p;
}

namespace
{
const ::std::string iceC_modes_base_ids[2] =
{
    "::Ice::Object",
    "::modes::base"
};

}

bool
modes::base::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_modes_base_ids, iceC_modes_base_ids + 2, s);
}

::std::vector< ::std::string>
modes::base::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_modes_base_ids[0], &iceC_modes_base_ids[2]);
}

const ::std::string&
modes::base::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
modes::base::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::modes::base";
    return typeId;
#else
    return iceC_modes_base_ids[1];
#endif
}

void
modes::base::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< base, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
modes::base::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< base, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::modes::base> iceC_modes_base_init("::modes::base");
}

::Ice::ValueFactoryPtr
modes::base::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::modes::base::ice_staticId());
}

void
modes::_icePatchObjectPtr(basePtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = basePtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(base::ice_staticId(), v);
    }
}

modes::stu::~stu()
{
}

::Ice::Object* modes::upCast(stu* p) { return p; }

::Ice::ObjectPtr
modes::stu::ice_clone() const
{
    ::Ice::Object* p = new stu(*this);
    return p;
}

namespace
{
const ::std::string iceC_modes_stu_ids[3] =
{
    "::Ice::Object",
    "::modes::base",
    "::modes::stu"
};

}

bool
modes::stu::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_modes_stu_ids, iceC_modes_stu_ids + 3, s);
}

::std::vector< ::std::string>
modes::stu::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_modes_stu_ids[0], &iceC_modes_stu_ids[3]);
}

const ::std::string&
modes::stu::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
modes::stu::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::modes::stu";
    return typeId;
#else
    return iceC_modes_stu_ids[2];
#endif
}

void
modes::stu::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ::Ice::StreamWriter< stu, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
    base::_iceWriteImpl(ostr);
}

void
modes::stu::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< stu, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
    base::_iceReadImpl(istr);
}

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::modes::stu> iceC_modes_stu_init("::modes::stu");
}

::Ice::ValueFactoryPtr
modes::stu::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::modes::stu::ice_staticId());
}

void
modes::_icePatchObjectPtr(stuPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = stuPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(stu::ice_staticId(), v);
    }
}

modes::getAction::~getAction()
{
}

::Ice::Object* modes::upCast(getAction* p) { return p; }


namespace
{
const ::std::string iceC_modes_getAction_ids[2] =
{
    "::Ice::Object",
    "::modes::getAction"
};

}

bool
modes::getAction::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_modes_getAction_ids, iceC_modes_getAction_ids + 2, s);
}

::std::vector< ::std::string>
modes::getAction::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_modes_getAction_ids[0], &iceC_modes_getAction_ids[2]);
}

const ::std::string&
modes::getAction::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
modes::getAction::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::modes::getAction";
    return typeId;
#else
    return iceC_modes_getAction_ids[1];
#endif
}

bool
modes::getAction::_iceD_getactions(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    actionsPrx ret = this->getactions(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}

bool
modes::getAction::_iceD_getStu(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    stuPtr iceP_s;
    istr->read(iceP_s);
    istr->readPendingValues();
    inS.endReadParams();
    stuPtr ret = this->getStu(iceP_s, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}

bool
modes::getAction::_iceD_getNode(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    node iceP_n;
    istr->read(iceP_n);
    inS.endReadParams();
    node ret = this->getNode(iceP_n, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}

namespace
{
const ::std::string iceC_modes_getAction_all[] =
{
    "getNode",
    "getStu",
    "getactions",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

bool
modes::getAction::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_modes_getAction_all, iceC_modes_getAction_all + 7, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_modes_getAction_all)
    {
        case 0:
        {
            return _iceD_getNode(in, current);
        }
        case 1:
        {
            return _iceD_getStu(in, current);
        }
        case 2:
        {
            return _iceD_getactions(in, current);
        }
        case 3:
        {
            return _iceD_ice_id(in, current);
        }
        case 4:
        {
            return _iceD_ice_ids(in, current);
        }
        case 5:
        {
            return _iceD_ice_isA(in, current);
        }
        case 6:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}

void
modes::getAction::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< getAction, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
modes::getAction::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< getAction, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}

void
modes::_icePatchObjectPtr(getActionPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = getActionPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(getAction::ice_staticId(), v);
    }
}

namespace Ice
{
}

namespace
{

const char* iceSliceChecksums[] =
{
    "::modes::actions", "aad85012203f91c1b5a8c36c7fb2a0a0",
    "::modes::base", "676f35bf8c64a5cc3cefeb1a26dc1b",
    "::modes::getAction", "b3bbe05bbba6c2a3c2a43e8d10ccd168",
    "::modes::node", "5d2e656c2465b28c373a8784d6380d",
    "::modes::stu", "b0869e37a996c3c3ac8dbbe7ef87d1c",
    0
};
const IceInternal::SliceChecksumInit iceSliceChecksumInit(iceSliceChecksums);

}

#endif
