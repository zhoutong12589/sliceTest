// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.1
//
// <auto-generated>
//
// Generated from file `head.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __head_h__
#define __head_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Comparable.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/GCObject.h>
#include <Ice/Value.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/Optional.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace modes
{

class actions;
class actionsPrx;

}

namespace modes
{

class actions : public virtual ::Ice::Object
{
public:

    using ProxyType = actionsPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void printString(::std::string str, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_printString(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual int printStringWithRet(::std::string str, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_printStringWithRet(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to getnum.
     */
    struct GetnumResult
    {
        bool returnValue;
        int num;
    };

    virtual bool getnum(int n1, int n2, int& num, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getnum(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual int compute(int n1, int n2, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_compute(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

namespace modes
{

class actionsPrx : public virtual ::Ice::Proxy<actionsPrx, ::Ice::ObjectPrx>
{
public:

    void printString(const ::std::string& str, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &actionsPrx::_iceI_printString, str, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto printStringAsync(const ::std::string& str, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &actionsPrx::_iceI_printString, str, context);
    }

    ::std::function<void()>
    printStringAsync(const ::std::string& str,
                     ::std::function<void()> response,
                     ::std::function<void(::std::exception_ptr)> ex = nullptr,
                     ::std::function<void(bool)> sent = nullptr,
                     const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &actionsPrx::_iceI_printString, str, context);
    }

    /// \cond INTERNAL
    void _iceI_printString(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::std::string&, const ::Ice::Context&);
    /// \endcond

    int printStringWithRet(const ::std::string& str, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<int>(true, this, &actionsPrx::_iceI_printStringWithRet, str, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto printStringWithRetAsync(const ::std::string& str, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<int>>().get_future())
    {
        return _makePromiseOutgoing<int, P>(false, this, &actionsPrx::_iceI_printStringWithRet, str, context);
    }

    ::std::function<void()>
    printStringWithRetAsync(const ::std::string& str,
                            ::std::function<void(int)> response,
                            ::std::function<void(::std::exception_ptr)> ex = nullptr,
                            ::std::function<void(bool)> sent = nullptr,
                            const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<int>(response, ex, sent, this, &actionsPrx::_iceI_printStringWithRet, str, context);
    }

    /// \cond INTERNAL
    void _iceI_printStringWithRet(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>&, const ::std::string&, const ::Ice::Context&);
    /// \endcond

    bool getnum(int n1, int n2, int& num, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<actions::GetnumResult>(true, this, &actionsPrx::_iceI_getnum, n1, n2, context).get();
        num = _result.num;
        return _result.returnValue;
    }

    template<template<typename> class P = ::std::promise>
    auto getnumAsync(int n1, int n2, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<actions::GetnumResult>>().get_future())
    {
        return _makePromiseOutgoing<actions::GetnumResult, P>(false, this, &actionsPrx::_iceI_getnum, n1, n2, context);
    }

    ::std::function<void()>
    getnumAsync(int n1, int n2,
                ::std::function<void(bool, int)> response,
                ::std::function<void(::std::exception_ptr)> ex = nullptr,
                ::std::function<void(bool)> sent = nullptr,
                const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](actions::GetnumResult&& _result)
        {
            response(_result.returnValue, _result.num);
        };
        return _makeLamdaOutgoing<actions::GetnumResult>(_responseCb, ex, sent, this, &actionsPrx::_iceI_getnum, n1, n2, context);
    }

    /// \cond INTERNAL
    void _iceI_getnum(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<actions::GetnumResult>>&, int, int, const ::Ice::Context&);
    /// \endcond

    int compute(int n1, int n2, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<int>(true, this, &actionsPrx::_iceI_compute, n1, n2, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto computeAsync(int n1, int n2, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<int>>().get_future())
    {
        return _makePromiseOutgoing<int, P>(false, this, &actionsPrx::_iceI_compute, n1, n2, context);
    }

    ::std::function<void()>
    computeAsync(int n1, int n2,
                 ::std::function<void(int)> response,
                 ::std::function<void(::std::exception_ptr)> ex = nullptr,
                 ::std::function<void(bool)> sent = nullptr,
                 const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<int>(response, ex, sent, this, &actionsPrx::_iceI_compute, n1, n2, context);
    }

    /// \cond INTERNAL
    void _iceI_compute(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>&, int, int, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    actionsPrx() = default;
    friend ::std::shared_ptr<actionsPrx> IceInternal::createProxy<actionsPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

}

/// \cond STREAM
namespace Ice
{

}
/// \endcond

/// \cond INTERNAL
namespace modes
{

using actionsPtr = ::std::shared_ptr<actions>;
using actionsPrxPtr = ::std::shared_ptr<actionsPrx>;

}
/// \endcond

#else // C++98 mapping

namespace IceProxy
{

namespace modes
{

class actions;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< ::IceProxy::modes::actions>&);
::IceProxy::Ice::Object* upCast(::IceProxy::modes::actions*);
/// \endcond

}

}

namespace modes
{

class actions;
/// \cond INTERNAL
::Ice::Object* upCast(actions*);
/// \endcond
typedef ::IceInternal::Handle< actions> actionsPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::modes::actions> actionsPrx;
typedef actionsPrx actionsPrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(actionsPtr&, const ::Ice::ObjectPtr&);
/// \endcond

}

namespace modes
{

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::modes::actions::begin_printString.
 * Create a wrapper instance by calling ::modes::newCallback_actions_printString.
 */
class Callback_actions_printString_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_actions_printString_Base> Callback_actions_printStringPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::modes::actions::begin_printStringWithRet.
 * Create a wrapper instance by calling ::modes::newCallback_actions_printStringWithRet.
 */
class Callback_actions_printStringWithRet_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_actions_printStringWithRet_Base> Callback_actions_printStringWithRetPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::modes::actions::begin_getnum.
 * Create a wrapper instance by calling ::modes::newCallback_actions_getnum.
 */
class Callback_actions_getnum_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_actions_getnum_Base> Callback_actions_getnumPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::modes::actions::begin_compute.
 * Create a wrapper instance by calling ::modes::newCallback_actions_compute.
 */
class Callback_actions_compute_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_actions_compute_Base> Callback_actions_computePtr;

}

namespace IceProxy
{

namespace modes
{

class actions : public virtual ::Ice::Proxy<actions, ::IceProxy::Ice::Object>
{
public:

    void printString(const ::std::string& str, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_printString(_iceI_begin_printString(str, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_printString(const ::std::string& str, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_printString(str, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_printString(const ::std::string& str, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_printString(str, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_printString(const ::std::string& str, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_printString(str, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_printString(const ::std::string& str, const ::modes::Callback_actions_printStringPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_printString(str, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_printString(const ::std::string& str, const ::Ice::Context& context, const ::modes::Callback_actions_printStringPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_printString(str, context, cb, cookie);
    }

    void end_printString(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_printString(const ::std::string&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Ice::Int printStringWithRet(const ::std::string& str, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_printStringWithRet(_iceI_begin_printStringWithRet(str, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_printStringWithRet(const ::std::string& str, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_printStringWithRet(str, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_printStringWithRet(const ::std::string& str, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_printStringWithRet(str, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_printStringWithRet(const ::std::string& str, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_printStringWithRet(str, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_printStringWithRet(const ::std::string& str, const ::modes::Callback_actions_printStringWithRetPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_printStringWithRet(str, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_printStringWithRet(const ::std::string& str, const ::Ice::Context& context, const ::modes::Callback_actions_printStringWithRetPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_printStringWithRet(str, context, cb, cookie);
    }

    ::Ice::Int end_printStringWithRet(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_printStringWithRet(const ::std::string&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    bool getnum(::Ice::Int n1, ::Ice::Int n2, ::Ice::Int& num, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getnum(num, _iceI_begin_getnum(n1, n2, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getnum(::Ice::Int n1, ::Ice::Int n2, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getnum(n1, n2, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getnum(::Ice::Int n1, ::Ice::Int n2, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getnum(n1, n2, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getnum(::Ice::Int n1, ::Ice::Int n2, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getnum(n1, n2, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getnum(::Ice::Int n1, ::Ice::Int n2, const ::modes::Callback_actions_getnumPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getnum(n1, n2, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getnum(::Ice::Int n1, ::Ice::Int n2, const ::Ice::Context& context, const ::modes::Callback_actions_getnumPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getnum(n1, n2, context, cb, cookie);
    }

    bool end_getnum(::Ice::Int& num, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_getnum(::Ice::Int& iceP_num, bool& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_getnum(::Ice::Int, ::Ice::Int, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Ice::Int compute(::Ice::Int n1, ::Ice::Int n2, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_compute(_iceI_begin_compute(n1, n2, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_compute(::Ice::Int n1, ::Ice::Int n2, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_compute(n1, n2, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_compute(::Ice::Int n1, ::Ice::Int n2, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_compute(n1, n2, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_compute(::Ice::Int n1, ::Ice::Int n2, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_compute(n1, n2, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_compute(::Ice::Int n1, ::Ice::Int n2, const ::modes::Callback_actions_computePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_compute(n1, n2, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_compute(::Ice::Int n1, ::Ice::Int n2, const ::Ice::Context& context, const ::modes::Callback_actions_computePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_compute(n1, n2, context, cb, cookie);
    }

    ::Ice::Int end_compute(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_compute(::Ice::Int, ::Ice::Int, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

}

}

namespace modes
{

class actions : public virtual ::Ice::Object
{
public:

    typedef actionsPrx ProxyType;
    typedef actionsPtr PointerType;

    virtual ~actions();

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void printString(const ::std::string& str, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_printString(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::Ice::Int printStringWithRet(const ::std::string& str, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_printStringWithRet(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual bool getnum(::Ice::Int n1, ::Ice::Int n2, ::Ice::Int& num, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getnum(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::Ice::Int compute(::Ice::Int n1, ::Ice::Int n2, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_compute(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
inline bool operator==(const actions& lhs, const actions& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const actions& lhs, const actions& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

}

/// \cond STREAM
namespace Ice
{

}
/// \endcond

namespace modes
{

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::modes::actions::begin_printString.
 * Create a wrapper instance by calling ::modes::newCallback_actions_printString.
 */
template<class T>
class CallbackNC_actions_printString : public Callback_actions_printString_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_actions_printString(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::modes::actions::begin_printString.
 */
template<class T> Callback_actions_printStringPtr
newCallback_actions_printString(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_actions_printString<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::modes::actions::begin_printString.
 */
template<class T> Callback_actions_printStringPtr
newCallback_actions_printString(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_actions_printString<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::modes::actions::begin_printString.
 */
template<class T> Callback_actions_printStringPtr
newCallback_actions_printString(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_actions_printString<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::modes::actions::begin_printString.
 */
template<class T> Callback_actions_printStringPtr
newCallback_actions_printString(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_actions_printString<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::modes::actions::begin_printString.
 * Create a wrapper instance by calling ::modes::newCallback_actions_printString.
 */
template<class T, typename CT>
class Callback_actions_printString : public Callback_actions_printString_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_actions_printString(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::modes::actions::begin_printString.
 */
template<class T, typename CT> Callback_actions_printStringPtr
newCallback_actions_printString(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_actions_printString<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::modes::actions::begin_printString.
 */
template<class T, typename CT> Callback_actions_printStringPtr
newCallback_actions_printString(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_actions_printString<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::modes::actions::begin_printString.
 */
template<class T, typename CT> Callback_actions_printStringPtr
newCallback_actions_printString(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_actions_printString<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::modes::actions::begin_printString.
 */
template<class T, typename CT> Callback_actions_printStringPtr
newCallback_actions_printString(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_actions_printString<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::modes::actions::begin_printStringWithRet.
 * Create a wrapper instance by calling ::modes::newCallback_actions_printStringWithRet.
 */
template<class T>
class CallbackNC_actions_printStringWithRet : public Callback_actions_printStringWithRet_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_actions_printStringWithRet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        actionsPrx proxy = actionsPrx::uncheckedCast(result->getProxy());
        ::Ice::Int ret;
        try
        {
            ret = proxy->end_printStringWithRet(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::modes::actions::begin_printStringWithRet.
 */
template<class T> Callback_actions_printStringWithRetPtr
newCallback_actions_printStringWithRet(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_actions_printStringWithRet<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::modes::actions::begin_printStringWithRet.
 */
template<class T> Callback_actions_printStringWithRetPtr
newCallback_actions_printStringWithRet(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_actions_printStringWithRet<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::modes::actions::begin_printStringWithRet.
 * Create a wrapper instance by calling ::modes::newCallback_actions_printStringWithRet.
 */
template<class T, typename CT>
class Callback_actions_printStringWithRet : public Callback_actions_printStringWithRet_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_actions_printStringWithRet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        actionsPrx proxy = actionsPrx::uncheckedCast(result->getProxy());
        ::Ice::Int ret;
        try
        {
            ret = proxy->end_printStringWithRet(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::modes::actions::begin_printStringWithRet.
 */
template<class T, typename CT> Callback_actions_printStringWithRetPtr
newCallback_actions_printStringWithRet(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_actions_printStringWithRet<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::modes::actions::begin_printStringWithRet.
 */
template<class T, typename CT> Callback_actions_printStringWithRetPtr
newCallback_actions_printStringWithRet(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_actions_printStringWithRet<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::modes::actions::begin_getnum.
 * Create a wrapper instance by calling ::modes::newCallback_actions_getnum.
 */
template<class T>
class CallbackNC_actions_getnum : public Callback_actions_getnum_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool, ::Ice::Int);

    CallbackNC_actions_getnum(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        actionsPrx proxy = actionsPrx::uncheckedCast(result->getProxy());
        ::Ice::Int iceP_num;
        bool ret;
        try
        {
            ret = proxy->end_getnum(iceP_num, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_num);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::modes::actions::begin_getnum.
 */
template<class T> Callback_actions_getnumPtr
newCallback_actions_getnum(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, ::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_actions_getnum<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::modes::actions::begin_getnum.
 */
template<class T> Callback_actions_getnumPtr
newCallback_actions_getnum(T* instance, void (T::*cb)(bool, ::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_actions_getnum<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::modes::actions::begin_getnum.
 * Create a wrapper instance by calling ::modes::newCallback_actions_getnum.
 */
template<class T, typename CT>
class Callback_actions_getnum : public Callback_actions_getnum_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, ::Ice::Int, const CT&);

    Callback_actions_getnum(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        actionsPrx proxy = actionsPrx::uncheckedCast(result->getProxy());
        ::Ice::Int iceP_num;
        bool ret;
        try
        {
            ret = proxy->end_getnum(iceP_num, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_num, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::modes::actions::begin_getnum.
 */
template<class T, typename CT> Callback_actions_getnumPtr
newCallback_actions_getnum(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, ::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_actions_getnum<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::modes::actions::begin_getnum.
 */
template<class T, typename CT> Callback_actions_getnumPtr
newCallback_actions_getnum(T* instance, void (T::*cb)(bool, ::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_actions_getnum<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::modes::actions::begin_compute.
 * Create a wrapper instance by calling ::modes::newCallback_actions_compute.
 */
template<class T>
class CallbackNC_actions_compute : public Callback_actions_compute_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_actions_compute(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        actionsPrx proxy = actionsPrx::uncheckedCast(result->getProxy());
        ::Ice::Int ret;
        try
        {
            ret = proxy->end_compute(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::modes::actions::begin_compute.
 */
template<class T> Callback_actions_computePtr
newCallback_actions_compute(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_actions_compute<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::modes::actions::begin_compute.
 */
template<class T> Callback_actions_computePtr
newCallback_actions_compute(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_actions_compute<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::modes::actions::begin_compute.
 * Create a wrapper instance by calling ::modes::newCallback_actions_compute.
 */
template<class T, typename CT>
class Callback_actions_compute : public Callback_actions_compute_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_actions_compute(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        actionsPrx proxy = actionsPrx::uncheckedCast(result->getProxy());
        ::Ice::Int ret;
        try
        {
            ret = proxy->end_compute(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::modes::actions::begin_compute.
 */
template<class T, typename CT> Callback_actions_computePtr
newCallback_actions_compute(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_actions_compute<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::modes::actions::begin_compute.
 */
template<class T, typename CT> Callback_actions_computePtr
newCallback_actions_compute(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_actions_compute<T, CT>(instance, cb, excb, sentcb);
}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
