// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `head.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

(function(module, require, exports)
{
    const Ice = require("ice").Ice;
    const _ModuleRegistry = Ice._ModuleRegistry;
    const Slice = Ice.Slice;

    let modes = _ModuleRegistry.module("modes");

    const iceC_modes_actions_ids = [
        "::Ice::Object",
        "::modes::actions"
    ];

    modes.actions = class extends Ice.Object
    {
    };

    modes.actionsPrx = class extends Ice.ObjectPrx
    {
    };

    Slice.defineOperations(modes.actions, modes.actionsPrx, iceC_modes_actions_ids, 1,
    {
        "printString": [, 2, 2, , , [[7]], , , , ],
        "printStringWithRet": [, , , , [3], [[7]], , , , ],
        "getnum": [, , , , [1], [[3], [3]], [[3]], , , ],
        "compute": [, , , , [3], [[3], [3]], , , , ]
    });

    const iceC_modes_base_ids = [
        "::Ice::Object",
        "::modes::base"
    ];

    modes.base = class extends Ice.Value
    {
        constructor(name = 0)
        {
            super();
            this.name = name;
        }

        _iceWriteMemberImpl(ostr)
        {
            ostr.writeInt(this.name);
        }

        _iceReadMemberImpl(istr)
        {
            this.name = istr.readInt();
        }
    };

    Slice.defineValue(modes.base, iceC_modes_base_ids[1], false);

    modes.baseDisp = class extends Ice.Object
    {
    };

    Slice.defineOperations(modes.baseDisp, undefined, iceC_modes_base_ids, 1);

    const iceC_modes_stu_ids = [
        "::Ice::Object",
        "::modes::base",
        "::modes::stu"
    ];

    modes.stu = class extends modes.base
    {
        constructor(name, num = 0)
        {
            super(name);
            this.num = num;
        }

        _iceWriteMemberImpl(ostr)
        {
            ostr.writeInt(this.num);
        }

        _iceReadMemberImpl(istr)
        {
            this.num = istr.readInt();
        }
    };

    Slice.defineValue(modes.stu, iceC_modes_stu_ids[2], false);

    modes.stuDisp = class extends modes.baseDisp
    {
    };

    Slice.defineOperations(modes.stuDisp, undefined, iceC_modes_stu_ids, 2);

    modes.node = class
    {
        constructor(n1 = 0, n2 = 0)
        {
            this.n1 = n1;
            this.n2 = n2;
        }

        _write(ostr)
        {
            ostr.writeInt(this.n1);
            ostr.writeInt(this.n2);
        }

        _read(istr)
        {
            this.n1 = istr.readInt();
            this.n2 = istr.readInt();
        }

        static get minWireSize()
        {
            return  8;
        }
    };

    Slice.defineStruct(modes.node, true, false);

    const iceC_modes_getAction_ids = [
        "::Ice::Object",
        "::modes::getAction"
    ];

    modes.getAction = class extends Ice.Object
    {
    };

    modes.getActionPrx = class extends Ice.ObjectPrx
    {
    };

    Slice.defineOperations(modes.getAction, modes.getActionPrx, iceC_modes_getAction_ids, 1,
    {
        "getactions": [, , , , ["modes.actionsPrx"], , , , , ],
        "getStu": [, , , , ["modes.stu", true], [["modes.stu", true]], , , true, true],
        "getNode": [, , , , [modes.node], [[modes.node]], , , , ],
        "getChecksums": [, , , , ["Ice.SliceChecksumDictHelper"], , , , , ]
    });
    exports.modes = modes;
}
(typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? module : undefined,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? require : this.Ice._require,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? exports : this));
