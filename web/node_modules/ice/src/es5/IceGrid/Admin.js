var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `Admin.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

/* slice2js browser-bundle-skip */
(function (module, require, exports) {
    /* slice2js browser-bundle-skip-end */
    /* slice2js browser-bundle-skip */
    var _ModuleRegistry = require("../Ice/ModuleRegistry").Ice._ModuleRegistry;
    var Glacier2 = require("../Glacier2/Session").Glacier2;
    var Ice = _ModuleRegistry.require(module, ["../Ice/Object", "../Ice/Value", "../Ice/ObjectPrx", "../Ice/Operation", "../Ice/Struct", "../Ice/EnumBase", "../Ice/Long", "../Ice/HashMap", "../Ice/HashUtil", "../Ice/ArrayUtil", "../Ice/StreamHelpers", "../Ice/Identity", "../Ice/BuiltinSequences", "../Ice/Properties", "../Ice/SliceChecksumDict"]).Ice;

    var IceGrid = _ModuleRegistry.require(module, ["../IceGrid/Exception", "../IceGrid/Descriptor"]).IceGrid;

    var Slice = Ice.Slice;
    /* slice2js browser-bundle-skip-end */

    /**
     * An enumeration representing the state of the server.
     *
     **/
    IceGrid.ServerState = Slice.defineEnum([['Inactive', 0], ['Activating', 1], ['ActivationTimedOut', 2], ['Active', 3], ['Deactivating', 4], ['Destroying', 5], ['Destroyed', 6]]);

    Slice.defineDictionary(IceGrid, "StringObjectProxyDict", "StringObjectProxyDictHelper", "Ice.StringHelper", "Ice.ObjectPrx", false, undefined, undefined);

    /**
     * Information about an Ice object.
     *
     **/
    IceGrid.ObjectInfo = function () {
        function _class() {
            var proxy = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
            var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";

            _classCallCheck(this, _class);

            this.proxy = proxy;
            this.type = type;
        }

        _createClass(_class, [{
            key: "_write",
            value: function _write(ostr) {
                ostr.writeProxy(this.proxy);
                ostr.writeString(this.type);
            }
        }, {
            key: "_read",
            value: function _read(istr) {
                this.proxy = istr.readProxy();
                this.type = istr.readString();
            }
        }], [{
            key: "minWireSize",
            get: function get() {
                return 3;
            }
        }]);

        return _class;
    }();

    Slice.defineStruct(IceGrid.ObjectInfo, false, true);

    Slice.defineSequence(IceGrid, "ObjectInfoSeqHelper", "IceGrid.ObjectInfo", false);

    /**
     * Information about an adapter registered with the IceGrid registry.
     *
     **/
    IceGrid.AdapterInfo = function () {
        function _class2() {
            var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
            var proxy = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
            var replicaGroupId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "";

            _classCallCheck(this, _class2);

            this.id = id;
            this.proxy = proxy;
            this.replicaGroupId = replicaGroupId;
        }

        _createClass(_class2, [{
            key: "_write",
            value: function _write(ostr) {
                ostr.writeString(this.id);
                ostr.writeProxy(this.proxy);
                ostr.writeString(this.replicaGroupId);
            }
        }, {
            key: "_read",
            value: function _read(istr) {
                this.id = istr.readString();
                this.proxy = istr.readProxy();
                this.replicaGroupId = istr.readString();
            }
        }], [{
            key: "minWireSize",
            get: function get() {
                return 4;
            }
        }]);

        return _class2;
    }();

    Slice.defineStruct(IceGrid.AdapterInfo, false, true);

    Slice.defineSequence(IceGrid, "AdapterInfoSeqHelper", "IceGrid.AdapterInfo", false);

    /**
     * Information about a server managed by an IceGrid node.
     *
     **/
    IceGrid.ServerInfo = function () {
        function _class3() {
            var application = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
            var uuid = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
            var revision = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
            var node = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "";
            var descriptor = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;
            var sessionId = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : "";

            _classCallCheck(this, _class3);

            this.application = application;
            this.uuid = uuid;
            this.revision = revision;
            this.node = node;
            this.descriptor = descriptor;
            this.sessionId = sessionId;
        }

        _createClass(_class3, [{
            key: "_write",
            value: function _write(ostr) {
                ostr.writeString(this.application);
                ostr.writeString(this.uuid);
                ostr.writeInt(this.revision);
                ostr.writeString(this.node);
                ostr.writeValue(this.descriptor);
                ostr.writeString(this.sessionId);
            }
        }, {
            key: "_read",
            value: function _read(istr) {
                var _this = this;

                this.application = istr.readString();
                this.uuid = istr.readString();
                this.revision = istr.readInt();
                this.node = istr.readString();
                istr.readValue(function (obj) {
                    return _this.descriptor = obj;
                }, IceGrid.ServerDescriptor);
                this.sessionId = istr.readString();
            }
        }], [{
            key: "minWireSize",
            get: function get() {
                return 9;
            }
        }]);

        return _class3;
    }();

    Slice.defineStruct(IceGrid.ServerInfo, false, true);

    /**
     * Information about an IceGrid node.
     *
     **/
    IceGrid.NodeInfo = function () {
        function _class4() {
            var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
            var os = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
            var hostname = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "";
            var release = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "";
            var version = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : "";
            var machine = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : "";
            var nProcessors = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;
            var dataDir = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : "";

            _classCallCheck(this, _class4);

            this.name = name;
            this.os = os;
            this.hostname = hostname;
            this.release = release;
            this.version = version;
            this.machine = machine;
            this.nProcessors = nProcessors;
            this.dataDir = dataDir;
        }

        _createClass(_class4, [{
            key: "_write",
            value: function _write(ostr) {
                ostr.writeString(this.name);
                ostr.writeString(this.os);
                ostr.writeString(this.hostname);
                ostr.writeString(this.release);
                ostr.writeString(this.version);
                ostr.writeString(this.machine);
                ostr.writeInt(this.nProcessors);
                ostr.writeString(this.dataDir);
            }
        }, {
            key: "_read",
            value: function _read(istr) {
                this.name = istr.readString();
                this.os = istr.readString();
                this.hostname = istr.readString();
                this.release = istr.readString();
                this.version = istr.readString();
                this.machine = istr.readString();
                this.nProcessors = istr.readInt();
                this.dataDir = istr.readString();
            }
        }], [{
            key: "minWireSize",
            get: function get() {
                return 11;
            }
        }]);

        return _class4;
    }();

    Slice.defineStruct(IceGrid.NodeInfo, true, true);

    /**
     * Information about an IceGrid registry replica.
     *
     **/
    IceGrid.RegistryInfo = function () {
        function _class5() {
            var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
            var hostname = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";

            _classCallCheck(this, _class5);

            this.name = name;
            this.hostname = hostname;
        }

        _createClass(_class5, [{
            key: "_write",
            value: function _write(ostr) {
                ostr.writeString(this.name);
                ostr.writeString(this.hostname);
            }
        }, {
            key: "_read",
            value: function _read(istr) {
                this.name = istr.readString();
                this.hostname = istr.readString();
            }
        }], [{
            key: "minWireSize",
            get: function get() {
                return 2;
            }
        }]);

        return _class5;
    }();

    Slice.defineStruct(IceGrid.RegistryInfo, true, true);

    Slice.defineSequence(IceGrid, "RegistryInfoSeqHelper", "IceGrid.RegistryInfo", false);

    /**
     * Information about the load of a node.
     *
     **/
    IceGrid.LoadInfo = function () {
        function _class6() {
            var avg1 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0.0;
            var avg5 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.0;
            var avg15 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0.0;

            _classCallCheck(this, _class6);

            this.avg1 = avg1;
            this.avg5 = avg5;
            this.avg15 = avg15;
        }

        _createClass(_class6, [{
            key: "_write",
            value: function _write(ostr) {
                ostr.writeFloat(this.avg1);
                ostr.writeFloat(this.avg5);
                ostr.writeFloat(this.avg15);
            }
        }, {
            key: "_read",
            value: function _read(istr) {
                this.avg1 = istr.readFloat();
                this.avg5 = istr.readFloat();
                this.avg15 = istr.readFloat();
            }
        }], [{
            key: "minWireSize",
            get: function get() {
                return 12;
            }
        }]);

        return _class6;
    }();

    Slice.defineStruct(IceGrid.LoadInfo, false, false);

    /**
     * Information about an IceGrid application.
     *
     **/
    IceGrid.ApplicationInfo = function () {
        function _class7() {
            var uuid = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
            var createTime = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Ice.Long(0, 0);
            var createUser = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "";
            var updateTime = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new Ice.Long(0, 0);
            var updateUser = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : "";
            var revision = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;
            var descriptor = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new IceGrid.ApplicationDescriptor();

            _classCallCheck(this, _class7);

            this.uuid = uuid;
            this.createTime = createTime;
            this.createUser = createUser;
            this.updateTime = updateTime;
            this.updateUser = updateUser;
            this.revision = revision;
            this.descriptor = descriptor;
        }

        _createClass(_class7, [{
            key: "_write",
            value: function _write(ostr) {
                ostr.writeString(this.uuid);
                ostr.writeLong(this.createTime);
                ostr.writeString(this.createUser);
                ostr.writeLong(this.updateTime);
                ostr.writeString(this.updateUser);
                ostr.writeInt(this.revision);
                IceGrid.ApplicationDescriptor.write(ostr, this.descriptor);
            }
        }, {
            key: "_read",
            value: function _read(istr) {
                this.uuid = istr.readString();
                this.createTime = istr.readLong();
                this.createUser = istr.readString();
                this.updateTime = istr.readLong();
                this.updateUser = istr.readString();
                this.revision = istr.readInt();
                this.descriptor = IceGrid.ApplicationDescriptor.read(istr, this.descriptor);
            }
        }], [{
            key: "minWireSize",
            get: function get() {
                return 33;
            }
        }]);

        return _class7;
    }();

    Slice.defineStruct(IceGrid.ApplicationInfo, false, true);

    Slice.defineSequence(IceGrid, "ApplicationInfoSeqHelper", "IceGrid.ApplicationInfo", false);

    /**
     * Information about updates to an IceGrid application.
     *
     **/
    IceGrid.ApplicationUpdateInfo = function () {
        function _class8() {
            var updateTime = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Ice.Long(0, 0);
            var updateUser = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
            var revision = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
            var descriptor = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new IceGrid.ApplicationUpdateDescriptor();

            _classCallCheck(this, _class8);

            this.updateTime = updateTime;
            this.updateUser = updateUser;
            this.revision = revision;
            this.descriptor = descriptor;
        }

        _createClass(_class8, [{
            key: "_write",
            value: function _write(ostr) {
                ostr.writeLong(this.updateTime);
                ostr.writeString(this.updateUser);
                ostr.writeInt(this.revision);
                IceGrid.ApplicationUpdateDescriptor.write(ostr, this.descriptor);
            }
        }, {
            key: "_read",
            value: function _read(istr) {
                this.updateTime = istr.readLong();
                this.updateUser = istr.readString();
                this.revision = istr.readInt();
                this.descriptor = IceGrid.ApplicationUpdateDescriptor.read(istr, this.descriptor);
            }
        }], [{
            key: "minWireSize",
            get: function get() {
                return 28;
            }
        }]);

        return _class8;
    }();

    Slice.defineStruct(IceGrid.ApplicationUpdateInfo, false, true);

    var iceC_IceGrid_Admin_ids = ["::Ice::Object", "::IceGrid::Admin"];

    /**
     * The IceGrid administrative interface.
     * <p class="Warning">Allowing access to this interface
     * is a security risk! Please see the IceGrid documentation
     * for further information.
     *
     **/
    IceGrid.Admin = function (_Ice$Object) {
        _inherits(_class9, _Ice$Object);

        function _class9() {
            _classCallCheck(this, _class9);

            return _possibleConstructorReturn(this, (_class9.__proto__ || Object.getPrototypeOf(_class9)).apply(this, arguments));
        }

        return _class9;
    }(Ice.Object);

    IceGrid.AdminPrx = function (_Ice$ObjectPrx) {
        _inherits(_class10, _Ice$ObjectPrx);

        function _class10() {
            _classCallCheck(this, _class10);

            return _possibleConstructorReturn(this, (_class10.__proto__ || Object.getPrototypeOf(_class10)).apply(this, arguments));
        }

        return _class10;
    }(Ice.ObjectPrx);

    Slice.defineOperations(IceGrid.Admin, IceGrid.AdminPrx, iceC_IceGrid_Admin_ids, 1, {
        "addApplication": [,,,,, [[IceGrid.ApplicationDescriptor]],, [IceGrid.AccessDeniedException, IceGrid.DeploymentException], true],
        "syncApplication": [,,,,, [[IceGrid.ApplicationDescriptor]],, [IceGrid.AccessDeniedException, IceGrid.ApplicationNotExistException, IceGrid.DeploymentException], true],
        "updateApplication": [,,,,, [[IceGrid.ApplicationUpdateDescriptor]],, [IceGrid.AccessDeniedException, IceGrid.ApplicationNotExistException, IceGrid.DeploymentException], true],
        "syncApplicationWithoutRestart": [,,,,, [[IceGrid.ApplicationDescriptor]],, [IceGrid.AccessDeniedException, IceGrid.ApplicationNotExistException, IceGrid.DeploymentException], true],
        "updateApplicationWithoutRestart": [,,,,, [[IceGrid.ApplicationUpdateDescriptor]],, [IceGrid.AccessDeniedException, IceGrid.ApplicationNotExistException, IceGrid.DeploymentException], true],
        "removeApplication": [,,,,, [[7]],, [IceGrid.AccessDeniedException, IceGrid.ApplicationNotExistException, IceGrid.DeploymentException],,],
        "instantiateServer": [,,,,, [[7], [7], [IceGrid.ServerInstanceDescriptor]],, [IceGrid.AccessDeniedException, IceGrid.ApplicationNotExistException, IceGrid.DeploymentException],,],
        "patchApplication": [,,,,, [[7], [1]],, [IceGrid.ApplicationNotExistException, IceGrid.PatchException],,],
        "getApplicationInfo": [, 2, 1,, [IceGrid.ApplicationInfo], [[7]],, [IceGrid.ApplicationNotExistException],, true],
        "getDefaultApplicationDescriptor": [, 2, 1,, [IceGrid.ApplicationDescriptor],,, [IceGrid.DeploymentException],, true],
        "getAllApplicationNames": [, 2, 1,, ["Ice.StringSeqHelper"],,,,,],
        "getServerInfo": [, 2, 1,, [IceGrid.ServerInfo], [[7]],, [IceGrid.ServerNotExistException],, true],
        "getServerState": [, 2, 1,, [IceGrid.ServerState._helper], [[7]],, [IceGrid.DeploymentException, IceGrid.NodeUnreachableException, IceGrid.ServerNotExistException],,],
        "getServerPid": [, 2, 1,, [3], [[7]],, [IceGrid.DeploymentException, IceGrid.NodeUnreachableException, IceGrid.ServerNotExistException],,],
        "getServerAdminCategory": [, 2, 2,, [7],,,,,],
        "getServerAdmin": [, 2, 2,, [9], [[7]],, [IceGrid.DeploymentException, IceGrid.NodeUnreachableException, IceGrid.ServerNotExistException],,],
        "enableServer": [, 2, 2,,, [[7], [1]],, [IceGrid.DeploymentException, IceGrid.NodeUnreachableException, IceGrid.ServerNotExistException],,],
        "isServerEnabled": [, 2, 1,, [1], [[7]],, [IceGrid.DeploymentException, IceGrid.NodeUnreachableException, IceGrid.ServerNotExistException],,],
        "startServer": [,,,,, [[7]],, [IceGrid.DeploymentException, IceGrid.NodeUnreachableException, IceGrid.ServerNotExistException, IceGrid.ServerStartException],,],
        "stopServer": [,,,,, [[7]],, [IceGrid.DeploymentException, IceGrid.NodeUnreachableException, IceGrid.ServerNotExistException, IceGrid.ServerStopException],,],
        "patchServer": [,,,,, [[7], [1]],, [IceGrid.DeploymentException, IceGrid.NodeUnreachableException, IceGrid.PatchException, IceGrid.ServerNotExistException],,],
        "sendSignal": [,,,,, [[7], [7]],, [IceGrid.BadSignalException, IceGrid.DeploymentException, IceGrid.NodeUnreachableException, IceGrid.ServerNotExistException],,],
        "getAllServerIds": [, 2, 1,, ["Ice.StringSeqHelper"],,,,,],
        "getAdapterInfo": [, 2, 1,, ["IceGrid.AdapterInfoSeqHelper"], [[7]],, [IceGrid.AdapterNotExistException],,],
        "removeAdapter": [,,,,, [[7]],, [IceGrid.AdapterNotExistException, IceGrid.DeploymentException],,],
        "getAllAdapterIds": [, 2, 1,, ["Ice.StringSeqHelper"],,,,,],
        "addObject": [,,,,, [[9]],, [IceGrid.DeploymentException, IceGrid.ObjectExistsException],,],
        "updateObject": [,,,,, [[9]],, [IceGrid.DeploymentException, IceGrid.ObjectNotRegisteredException],,],
        "addObjectWithType": [,,,,, [[9], [7]],, [IceGrid.DeploymentException, IceGrid.ObjectExistsException],,],
        "removeObject": [,,,,, [[Ice.Identity]],, [IceGrid.DeploymentException, IceGrid.ObjectNotRegisteredException],,],
        "getObjectInfo": [, 2, 1,, [IceGrid.ObjectInfo], [[Ice.Identity]],, [IceGrid.ObjectNotRegisteredException],,],
        "getObjectInfosByType": [, 2, 1,, ["IceGrid.ObjectInfoSeqHelper"], [[7]],,,,],
        "getAllObjectInfos": [, 2, 1,, ["IceGrid.ObjectInfoSeqHelper"], [[7]],,,,],
        "pingNode": [, 2, 1,, [1], [[7]],, [IceGrid.NodeNotExistException],,],
        "getNodeLoad": [, 2, 1,, [IceGrid.LoadInfo], [[7]],, [IceGrid.NodeNotExistException, IceGrid.NodeUnreachableException],,],
        "getNodeInfo": [, 2, 1,, [IceGrid.NodeInfo], [[7]],, [IceGrid.NodeNotExistException, IceGrid.NodeUnreachableException],,],
        "getNodeAdmin": [, 2, 2,, [9], [[7]],, [IceGrid.NodeNotExistException, IceGrid.NodeUnreachableException],,],
        "getNodeProcessorSocketCount": [, 2, 1,, [3], [[7]],, [IceGrid.NodeNotExistException, IceGrid.NodeUnreachableException],,],
        "shutdownNode": [,,,,, [[7]],, [IceGrid.NodeNotExistException, IceGrid.NodeUnreachableException],,],
        "getNodeHostname": [, 2, 1,, [7], [[7]],, [IceGrid.NodeNotExistException, IceGrid.NodeUnreachableException],,],
        "getAllNodeNames": [, 2, 1,, ["Ice.StringSeqHelper"],,,,,],
        "pingRegistry": [, 2, 2,, [1], [[7]],, [IceGrid.RegistryNotExistException],,],
        "getRegistryInfo": [, 2, 2,, [IceGrid.RegistryInfo], [[7]],, [IceGrid.RegistryNotExistException, IceGrid.RegistryUnreachableException],,],
        "getRegistryAdmin": [, 2, 2,, [9], [[7]],, [IceGrid.RegistryNotExistException],,],
        "shutdownRegistry": [, 2, 2,,, [[7]],, [IceGrid.RegistryNotExistException, IceGrid.RegistryUnreachableException],,],
        "getAllRegistryNames": [, 2, 2,, ["Ice.StringSeqHelper"],,,,,],
        "shutdown": [,,,,,,,,,],
        "getSliceChecksums": [, 2, 1,, ["Ice.SliceChecksumDictHelper"],,,,,]
    });

    var iceC_IceGrid_FileIterator_ids = ["::Ice::Object", "::IceGrid::FileIterator"];

    /**
     * This interface provides access to IceGrid log file contents.
     *
     **/
    IceGrid.FileIterator = function (_Ice$Object2) {
        _inherits(_class11, _Ice$Object2);

        function _class11() {
            _classCallCheck(this, _class11);

            return _possibleConstructorReturn(this, (_class11.__proto__ || Object.getPrototypeOf(_class11)).apply(this, arguments));
        }

        return _class11;
    }(Ice.Object);

    IceGrid.FileIteratorPrx = function (_Ice$ObjectPrx2) {
        _inherits(_class12, _Ice$ObjectPrx2);

        function _class12() {
            _classCallCheck(this, _class12);

            return _possibleConstructorReturn(this, (_class12.__proto__ || Object.getPrototypeOf(_class12)).apply(this, arguments));
        }

        return _class12;
    }(Ice.ObjectPrx);

    Slice.defineOperations(IceGrid.FileIterator, IceGrid.FileIteratorPrx, iceC_IceGrid_FileIterator_ids, 1, {
        "read": [,,,, [1], [[3]], [["Ice.StringSeqHelper"]], [IceGrid.FileNotAvailableException],,],
        "destroy": [,,,,,,,,,]
    });

    /**
     * Dynamic information about the state of a server.
     *
     **/
    IceGrid.ServerDynamicInfo = function () {
        function _class13() {
            var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
            var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : IceGrid.ServerState.Inactive;
            var pid = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
            var enabled = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

            _classCallCheck(this, _class13);

            this.id = id;
            this.state = state;
            this.pid = pid;
            this.enabled = enabled;
        }

        _createClass(_class13, [{
            key: "_write",
            value: function _write(ostr) {
                ostr.writeString(this.id);
                IceGrid.ServerState._write(ostr, this.state);
                ostr.writeInt(this.pid);
                ostr.writeBool(this.enabled);
            }
        }, {
            key: "_read",
            value: function _read(istr) {
                this.id = istr.readString();
                this.state = IceGrid.ServerState._read(istr);
                this.pid = istr.readInt();
                this.enabled = istr.readBool();
            }
        }], [{
            key: "minWireSize",
            get: function get() {
                return 7;
            }
        }]);

        return _class13;
    }();

    Slice.defineStruct(IceGrid.ServerDynamicInfo, true, true);

    Slice.defineSequence(IceGrid, "ServerDynamicInfoSeqHelper", "IceGrid.ServerDynamicInfo", false);

    /**
     * Dynamic information about the state of an adapter.
     *
     **/
    IceGrid.AdapterDynamicInfo = function () {
        function _class14() {
            var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
            var proxy = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

            _classCallCheck(this, _class14);

            this.id = id;
            this.proxy = proxy;
        }

        _createClass(_class14, [{
            key: "_write",
            value: function _write(ostr) {
                ostr.writeString(this.id);
                ostr.writeProxy(this.proxy);
            }
        }, {
            key: "_read",
            value: function _read(istr) {
                this.id = istr.readString();
                this.proxy = istr.readProxy();
            }
        }], [{
            key: "minWireSize",
            get: function get() {
                return 3;
            }
        }]);

        return _class14;
    }();

    Slice.defineStruct(IceGrid.AdapterDynamicInfo, false, true);

    Slice.defineSequence(IceGrid, "AdapterDynamicInfoSeqHelper", "IceGrid.AdapterDynamicInfo", false);

    /**
     * Dynamic information about the state of a node.
     *
     **/
    IceGrid.NodeDynamicInfo = function () {
        function _class15() {
            var info = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new IceGrid.NodeInfo();
            var servers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
            var adapters = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

            _classCallCheck(this, _class15);

            this.info = info;
            this.servers = servers;
            this.adapters = adapters;
        }

        _createClass(_class15, [{
            key: "_write",
            value: function _write(ostr) {
                IceGrid.NodeInfo.write(ostr, this.info);
                IceGrid.ServerDynamicInfoSeqHelper.write(ostr, this.servers);
                IceGrid.AdapterDynamicInfoSeqHelper.write(ostr, this.adapters);
            }
        }, {
            key: "_read",
            value: function _read(istr) {
                this.info = IceGrid.NodeInfo.read(istr, this.info);
                this.servers = IceGrid.ServerDynamicInfoSeqHelper.read(istr);
                this.adapters = IceGrid.AdapterDynamicInfoSeqHelper.read(istr);
            }
        }], [{
            key: "minWireSize",
            get: function get() {
                return 13;
            }
        }]);

        return _class15;
    }();

    Slice.defineStruct(IceGrid.NodeDynamicInfo, false, true);

    var iceC_IceGrid_RegistryObserver_ids = ["::Ice::Object", "::IceGrid::RegistryObserver"];

    /**
     * This interface allows applications to monitor changes the state
     * of the registry.
     *
     **/
    IceGrid.RegistryObserver = function (_Ice$Object3) {
        _inherits(_class16, _Ice$Object3);

        function _class16() {
            _classCallCheck(this, _class16);

            return _possibleConstructorReturn(this, (_class16.__proto__ || Object.getPrototypeOf(_class16)).apply(this, arguments));
        }

        return _class16;
    }(Ice.Object);

    IceGrid.RegistryObserverPrx = function (_Ice$ObjectPrx3) {
        _inherits(_class17, _Ice$ObjectPrx3);

        function _class17() {
            _classCallCheck(this, _class17);

            return _possibleConstructorReturn(this, (_class17.__proto__ || Object.getPrototypeOf(_class17)).apply(this, arguments));
        }

        return _class17;
    }(Ice.ObjectPrx);

    Slice.defineOperations(IceGrid.RegistryObserver, IceGrid.RegistryObserverPrx, iceC_IceGrid_RegistryObserver_ids, 1, {
        "registryInit": [,,,,, [["IceGrid.RegistryInfoSeqHelper"]],,,,],
        "registryUp": [,,,,, [[IceGrid.RegistryInfo]],,,,],
        "registryDown": [,,,,, [[7]],,,,]
    });

    Slice.defineSequence(IceGrid, "NodeDynamicInfoSeqHelper", "IceGrid.NodeDynamicInfo", false);

    var iceC_IceGrid_NodeObserver_ids = ["::Ice::Object", "::IceGrid::NodeObserver"];

    /**
     * The node observer interface. Observers should implement this
     * interface to receive information about the state of the IceGrid
     * nodes.
     *
     **/
    IceGrid.NodeObserver = function (_Ice$Object4) {
        _inherits(_class18, _Ice$Object4);

        function _class18() {
            _classCallCheck(this, _class18);

            return _possibleConstructorReturn(this, (_class18.__proto__ || Object.getPrototypeOf(_class18)).apply(this, arguments));
        }

        return _class18;
    }(Ice.Object);

    IceGrid.NodeObserverPrx = function (_Ice$ObjectPrx4) {
        _inherits(_class19, _Ice$ObjectPrx4);

        function _class19() {
            _classCallCheck(this, _class19);

            return _possibleConstructorReturn(this, (_class19.__proto__ || Object.getPrototypeOf(_class19)).apply(this, arguments));
        }

        return _class19;
    }(Ice.ObjectPrx);

    Slice.defineOperations(IceGrid.NodeObserver, IceGrid.NodeObserverPrx, iceC_IceGrid_NodeObserver_ids, 1, {
        "nodeInit": [,,,,, [["IceGrid.NodeDynamicInfoSeqHelper"]],,,,],
        "nodeUp": [,,,,, [[IceGrid.NodeDynamicInfo]],,,,],
        "nodeDown": [,,,,, [[7]],,,,],
        "updateServer": [,,,,, [[7], [IceGrid.ServerDynamicInfo]],,,,],
        "updateAdapter": [,,,,, [[7], [IceGrid.AdapterDynamicInfo]],,,,]
    });

    var iceC_IceGrid_ApplicationObserver_ids = ["::Ice::Object", "::IceGrid::ApplicationObserver"];

    /**
     * The database observer interface. Observers should implement this
     * interface to receive information about the state of the IceGrid
     * registry database.
     *
     **/
    IceGrid.ApplicationObserver = function (_Ice$Object5) {
        _inherits(_class20, _Ice$Object5);

        function _class20() {
            _classCallCheck(this, _class20);

            return _possibleConstructorReturn(this, (_class20.__proto__ || Object.getPrototypeOf(_class20)).apply(this, arguments));
        }

        return _class20;
    }(Ice.Object);

    IceGrid.ApplicationObserverPrx = function (_Ice$ObjectPrx5) {
        _inherits(_class21, _Ice$ObjectPrx5);

        function _class21() {
            _classCallCheck(this, _class21);

            return _possibleConstructorReturn(this, (_class21.__proto__ || Object.getPrototypeOf(_class21)).apply(this, arguments));
        }

        return _class21;
    }(Ice.ObjectPrx);

    Slice.defineOperations(IceGrid.ApplicationObserver, IceGrid.ApplicationObserverPrx, iceC_IceGrid_ApplicationObserver_ids, 1, {
        "applicationInit": [,,,,, [[3], ["IceGrid.ApplicationInfoSeqHelper"]],,, true],
        "applicationAdded": [,,,,, [[3], [IceGrid.ApplicationInfo]],,, true],
        "applicationRemoved": [,,,,, [[3], [7]],,,,],
        "applicationUpdated": [,,,,, [[3], [IceGrid.ApplicationUpdateInfo]],,, true]
    });

    var iceC_IceGrid_AdapterObserver_ids = ["::Ice::Object", "::IceGrid::AdapterObserver"];

    /**
     * This interface allows applications to monitor the state of object
     * adapters that are registered with IceGrid.
     *
     **/
    IceGrid.AdapterObserver = function (_Ice$Object6) {
        _inherits(_class22, _Ice$Object6);

        function _class22() {
            _classCallCheck(this, _class22);

            return _possibleConstructorReturn(this, (_class22.__proto__ || Object.getPrototypeOf(_class22)).apply(this, arguments));
        }

        return _class22;
    }(Ice.Object);

    IceGrid.AdapterObserverPrx = function (_Ice$ObjectPrx6) {
        _inherits(_class23, _Ice$ObjectPrx6);

        function _class23() {
            _classCallCheck(this, _class23);

            return _possibleConstructorReturn(this, (_class23.__proto__ || Object.getPrototypeOf(_class23)).apply(this, arguments));
        }

        return _class23;
    }(Ice.ObjectPrx);

    Slice.defineOperations(IceGrid.AdapterObserver, IceGrid.AdapterObserverPrx, iceC_IceGrid_AdapterObserver_ids, 1, {
        "adapterInit": [,,,,, [["IceGrid.AdapterInfoSeqHelper"]],,,,],
        "adapterAdded": [,,,,, [[IceGrid.AdapterInfo]],,,,],
        "adapterUpdated": [,,,,, [[IceGrid.AdapterInfo]],,,,],
        "adapterRemoved": [,,,,, [[7]],,,,]
    });

    var iceC_IceGrid_ObjectObserver_ids = ["::Ice::Object", "::IceGrid::ObjectObserver"];

    /**
     * This interface allows applications to monitor IceGrid well-known objects.
     *
     **/
    IceGrid.ObjectObserver = function (_Ice$Object7) {
        _inherits(_class24, _Ice$Object7);

        function _class24() {
            _classCallCheck(this, _class24);

            return _possibleConstructorReturn(this, (_class24.__proto__ || Object.getPrototypeOf(_class24)).apply(this, arguments));
        }

        return _class24;
    }(Ice.Object);

    IceGrid.ObjectObserverPrx = function (_Ice$ObjectPrx7) {
        _inherits(_class25, _Ice$ObjectPrx7);

        function _class25() {
            _classCallCheck(this, _class25);

            return _possibleConstructorReturn(this, (_class25.__proto__ || Object.getPrototypeOf(_class25)).apply(this, arguments));
        }

        return _class25;
    }(Ice.ObjectPrx);

    Slice.defineOperations(IceGrid.ObjectObserver, IceGrid.ObjectObserverPrx, iceC_IceGrid_ObjectObserver_ids, 1, {
        "objectInit": [,,,,, [["IceGrid.ObjectInfoSeqHelper"]],,,,],
        "objectAdded": [,,,,, [[IceGrid.ObjectInfo]],,,,],
        "objectUpdated": [,,,,, [[IceGrid.ObjectInfo]],,,,],
        "objectRemoved": [,,,,, [[Ice.Identity]],,,,]
    });

    var iceC_IceGrid_AdminSession_ids = ["::Glacier2::Session", "::Ice::Object", "::IceGrid::AdminSession"];

    /**
     * Used by administrative clients to view,
     * update, and receive observer updates from the IceGrid
     * registry. Admin sessions are created either via the {@link Registry}
     * object or via the registry admin <tt>SessionManager</tt> object.
     *
     * @see Registry
     *
     **/
    IceGrid.AdminSession = function (_Ice$Object8) {
        _inherits(_class26, _Ice$Object8);

        function _class26() {
            _classCallCheck(this, _class26);

            return _possibleConstructorReturn(this, (_class26.__proto__ || Object.getPrototypeOf(_class26)).apply(this, arguments));
        }

        _createClass(_class26, null, [{
            key: "_iceImplements",
            get: function get() {
                return [Glacier2.Session];
            }
        }]);

        return _class26;
    }(Ice.Object);

    IceGrid.AdminSessionPrx = function (_Ice$ObjectPrx8) {
        _inherits(_class27, _Ice$ObjectPrx8);

        function _class27() {
            _classCallCheck(this, _class27);

            return _possibleConstructorReturn(this, (_class27.__proto__ || Object.getPrototypeOf(_class27)).apply(this, arguments));
        }

        _createClass(_class27, null, [{
            key: "_implements",
            get: function get() {
                return [Glacier2.SessionPrx];
            }
        }]);

        return _class27;
    }(Ice.ObjectPrx);

    Slice.defineOperations(IceGrid.AdminSession, IceGrid.AdminSessionPrx, iceC_IceGrid_AdminSession_ids, 2, {
        "keepAlive": [, 2, 2,,,,,,,],
        "getAdmin": [, 2, 1,, ["IceGrid.AdminPrx"],,,,,],
        "getAdminCallbackTemplate": [, 2, 2,, [9],,,,,],
        "setObservers": [, 2, 2,,, [["IceGrid.RegistryObserverPrx"], ["IceGrid.NodeObserverPrx"], ["IceGrid.ApplicationObserverPrx"], ["IceGrid.AdapterObserverPrx"], ["IceGrid.ObjectObserverPrx"]],, [IceGrid.ObserverAlreadyRegisteredException],,],
        "setObserversByIdentity": [, 2, 2,,, [[Ice.Identity], [Ice.Identity], [Ice.Identity], [Ice.Identity], [Ice.Identity]],, [IceGrid.ObserverAlreadyRegisteredException],,],
        "startUpdate": [,,,, [3],,, [IceGrid.AccessDeniedException],,],
        "finishUpdate": [,,,,,,, [IceGrid.AccessDeniedException],,],
        "getReplicaName": [, 2, 2,, [7],,,,,],
        "openServerLog": [,,,, ["IceGrid.FileIteratorPrx"], [[7], [7], [3]],, [IceGrid.DeploymentException, IceGrid.FileNotAvailableException, IceGrid.NodeUnreachableException, IceGrid.ServerNotExistException],,],
        "openServerStdErr": [,,,, ["IceGrid.FileIteratorPrx"], [[7], [3]],, [IceGrid.DeploymentException, IceGrid.FileNotAvailableException, IceGrid.NodeUnreachableException, IceGrid.ServerNotExistException],,],
        "openServerStdOut": [,,,, ["IceGrid.FileIteratorPrx"], [[7], [3]],, [IceGrid.DeploymentException, IceGrid.FileNotAvailableException, IceGrid.NodeUnreachableException, IceGrid.ServerNotExistException],,],
        "openNodeStdErr": [,,,, ["IceGrid.FileIteratorPrx"], [[7], [3]],, [IceGrid.FileNotAvailableException, IceGrid.NodeNotExistException, IceGrid.NodeUnreachableException],,],
        "openNodeStdOut": [,,,, ["IceGrid.FileIteratorPrx"], [[7], [3]],, [IceGrid.FileNotAvailableException, IceGrid.NodeNotExistException, IceGrid.NodeUnreachableException],,],
        "openRegistryStdErr": [,,,, ["IceGrid.FileIteratorPrx"], [[7], [3]],, [IceGrid.FileNotAvailableException, IceGrid.RegistryNotExistException, IceGrid.RegistryUnreachableException],,],
        "openRegistryStdOut": [,,,, ["IceGrid.FileIteratorPrx"], [[7], [3]],, [IceGrid.FileNotAvailableException, IceGrid.RegistryNotExistException, IceGrid.RegistryUnreachableException],,]
    });
    /* slice2js browser-bundle-skip */
    exports.IceGrid = IceGrid;
    /* slice2js browser-bundle-skip-end */
    /* slice2js browser-bundle-skip */
})(typeof global !== "undefined" && typeof global.process !== "undefined" ? module : undefined, typeof global !== "undefined" && typeof global.process !== "undefined" ? require : this.Ice._require, typeof global !== "undefined" && typeof global.process !== "undefined" ? exports : this);
/* slice2js browser-bundle-skip-end */