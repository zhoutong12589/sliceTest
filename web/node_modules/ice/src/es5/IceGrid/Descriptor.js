var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `Descriptor.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

/* slice2js browser-bundle-skip */
(function (module, require, exports) {
    /* slice2js browser-bundle-skip-end */
    /* slice2js browser-bundle-skip */
    var _ModuleRegistry = require("../Ice/ModuleRegistry").Ice._ModuleRegistry;
    var Ice = _ModuleRegistry.require(module, ["../Ice/Object", "../Ice/Value", "../Ice/ObjectPrx", "../Ice/Struct", "../Ice/Long", "../Ice/HashMap", "../Ice/HashUtil", "../Ice/ArrayUtil", "../Ice/StreamHelpers", "../Ice/Identity", "../Ice/BuiltinSequences"]).Ice;

    var Slice = Ice.Slice;
    /* slice2js browser-bundle-skip-end */
    /* slice2js browser-bundle-skip */

    var IceGrid = _ModuleRegistry.module("IceGrid");
    /* slice2js browser-bundle-skip-end */

    Slice.defineDictionary(IceGrid, "StringStringDict", "StringStringDictHelper", "Ice.StringHelper", "Ice.StringHelper", false, undefined, undefined);

    /**
     * Property descriptor.
     *
     **/
    IceGrid.PropertyDescriptor = function () {
        function _class() {
            var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
            var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";

            _classCallCheck(this, _class);

            this.name = name;
            this.value = value;
        }

        _createClass(_class, [{
            key: "_write",
            value: function _write(ostr) {
                ostr.writeString(this.name);
                ostr.writeString(this.value);
            }
        }, {
            key: "_read",
            value: function _read(istr) {
                this.name = istr.readString();
                this.value = istr.readString();
            }
        }], [{
            key: "minWireSize",
            get: function get() {
                return 2;
            }
        }]);

        return _class;
    }();

    Slice.defineStruct(IceGrid.PropertyDescriptor, true, true);

    Slice.defineSequence(IceGrid, "PropertyDescriptorSeqHelper", "IceGrid.PropertyDescriptor", false);

    /**
     * A property set descriptor.
     *
     **/
    IceGrid.PropertySetDescriptor = function () {
        function _class2() {
            var references = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
            var properties = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

            _classCallCheck(this, _class2);

            this.references = references;
            this.properties = properties;
        }

        _createClass(_class2, [{
            key: "_write",
            value: function _write(ostr) {
                Ice.StringSeqHelper.write(ostr, this.references);
                IceGrid.PropertyDescriptorSeqHelper.write(ostr, this.properties);
            }
        }, {
            key: "_read",
            value: function _read(istr) {
                this.references = Ice.StringSeqHelper.read(istr);
                this.properties = IceGrid.PropertyDescriptorSeqHelper.read(istr);
            }
        }], [{
            key: "minWireSize",
            get: function get() {
                return 2;
            }
        }]);

        return _class2;
    }();

    Slice.defineStruct(IceGrid.PropertySetDescriptor, true, true);

    Slice.defineDictionary(IceGrid, "PropertySetDescriptorDict", "PropertySetDescriptorDictHelper", "Ice.StringHelper", "IceGrid.PropertySetDescriptor", false, undefined, undefined);

    /**
     * An Ice object descriptor.
     *
     **/
    IceGrid.ObjectDescriptor = function () {
        function _class3() {
            var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Ice.Identity();
            var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
            var proxyOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "";

            _classCallCheck(this, _class3);

            this.id = id;
            this.type = type;
            this.proxyOptions = proxyOptions;
        }

        _createClass(_class3, [{
            key: "_write",
            value: function _write(ostr) {
                Ice.Identity.write(ostr, this.id);
                ostr.writeString(this.type);
                ostr.writeString(this.proxyOptions);
            }
        }, {
            key: "_read",
            value: function _read(istr) {
                this.id = Ice.Identity.read(istr, this.id);
                this.type = istr.readString();
                this.proxyOptions = istr.readString();
            }
        }], [{
            key: "minWireSize",
            get: function get() {
                return 4;
            }
        }]);

        return _class3;
    }();

    Slice.defineStruct(IceGrid.ObjectDescriptor, true, true);

    Slice.defineSequence(IceGrid, "ObjectDescriptorSeqHelper", "IceGrid.ObjectDescriptor", false);

    /**
     * An Ice object adapter descriptor.
     *
     **/
    IceGrid.AdapterDescriptor = function () {
        function _class4() {
            var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
            var description = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
            var id = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "";
            var replicaGroupId = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "";
            var priority = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : "";
            var registerProcess = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;
            var serverLifetime = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;
            var objects = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : null;
            var allocatables = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : null;

            _classCallCheck(this, _class4);

            this.name = name;
            this.description = description;
            this.id = id;
            this.replicaGroupId = replicaGroupId;
            this.priority = priority;
            this.registerProcess = registerProcess;
            this.serverLifetime = serverLifetime;
            this.objects = objects;
            this.allocatables = allocatables;
        }

        _createClass(_class4, [{
            key: "_write",
            value: function _write(ostr) {
                ostr.writeString(this.name);
                ostr.writeString(this.description);
                ostr.writeString(this.id);
                ostr.writeString(this.replicaGroupId);
                ostr.writeString(this.priority);
                ostr.writeBool(this.registerProcess);
                ostr.writeBool(this.serverLifetime);
                IceGrid.ObjectDescriptorSeqHelper.write(ostr, this.objects);
                IceGrid.ObjectDescriptorSeqHelper.write(ostr, this.allocatables);
            }
        }, {
            key: "_read",
            value: function _read(istr) {
                this.name = istr.readString();
                this.description = istr.readString();
                this.id = istr.readString();
                this.replicaGroupId = istr.readString();
                this.priority = istr.readString();
                this.registerProcess = istr.readBool();
                this.serverLifetime = istr.readBool();
                this.objects = IceGrid.ObjectDescriptorSeqHelper.read(istr);
                this.allocatables = IceGrid.ObjectDescriptorSeqHelper.read(istr);
            }
        }], [{
            key: "minWireSize",
            get: function get() {
                return 9;
            }
        }]);

        return _class4;
    }();

    Slice.defineStruct(IceGrid.AdapterDescriptor, true, true);

    Slice.defineSequence(IceGrid, "AdapterDescriptorSeqHelper", "IceGrid.AdapterDescriptor", false);

    /**
     * A Freeze database environment descriptor.
     *
     **/
    IceGrid.DbEnvDescriptor = function () {
        function _class5() {
            var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
            var description = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
            var dbHome = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "";
            var properties = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

            _classCallCheck(this, _class5);

            this.name = name;
            this.description = description;
            this.dbHome = dbHome;
            this.properties = properties;
        }

        _createClass(_class5, [{
            key: "_write",
            value: function _write(ostr) {
                ostr.writeString(this.name);
                ostr.writeString(this.description);
                ostr.writeString(this.dbHome);
                IceGrid.PropertyDescriptorSeqHelper.write(ostr, this.properties);
            }
        }, {
            key: "_read",
            value: function _read(istr) {
                this.name = istr.readString();
                this.description = istr.readString();
                this.dbHome = istr.readString();
                this.properties = IceGrid.PropertyDescriptorSeqHelper.read(istr);
            }
        }], [{
            key: "minWireSize",
            get: function get() {
                return 4;
            }
        }]);

        return _class5;
    }();

    Slice.defineStruct(IceGrid.DbEnvDescriptor, true, true);

    Slice.defineSequence(IceGrid, "DbEnvDescriptorSeqHelper", "IceGrid.DbEnvDescriptor", false);

    var iceC_IceGrid_CommunicatorDescriptor_ids = ["::Ice::Object", "::IceGrid::CommunicatorDescriptor"];

    /**
     * A communicator descriptor.
     *
     **/
    IceGrid.CommunicatorDescriptor = function (_Ice$Value) {
        _inherits(_class6, _Ice$Value);

        function _class6() {
            var adapters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
            var propertySet = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new IceGrid.PropertySetDescriptor();
            var dbEnvs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
            var logs = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
            var description = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : "";

            _classCallCheck(this, _class6);

            var _this = _possibleConstructorReturn(this, (_class6.__proto__ || Object.getPrototypeOf(_class6)).call(this));

            _this.adapters = adapters;
            _this.propertySet = propertySet;
            _this.dbEnvs = dbEnvs;
            _this.logs = logs;
            _this.description = description;
            return _this;
        }

        _createClass(_class6, [{
            key: "_iceWriteMemberImpl",
            value: function _iceWriteMemberImpl(ostr) {
                IceGrid.AdapterDescriptorSeqHelper.write(ostr, this.adapters);
                IceGrid.PropertySetDescriptor.write(ostr, this.propertySet);
                IceGrid.DbEnvDescriptorSeqHelper.write(ostr, this.dbEnvs);
                Ice.StringSeqHelper.write(ostr, this.logs);
                ostr.writeString(this.description);
            }
        }, {
            key: "_iceReadMemberImpl",
            value: function _iceReadMemberImpl(istr) {
                this.adapters = IceGrid.AdapterDescriptorSeqHelper.read(istr);
                this.propertySet = IceGrid.PropertySetDescriptor.read(istr, this.propertySet);
                this.dbEnvs = IceGrid.DbEnvDescriptorSeqHelper.read(istr);
                this.logs = Ice.StringSeqHelper.read(istr);
                this.description = istr.readString();
            }
        }]);

        return _class6;
    }(Ice.Value);

    Slice.defineValue(IceGrid.CommunicatorDescriptor, iceC_IceGrid_CommunicatorDescriptor_ids[1], false);

    /**
     * A communicator descriptor.
     *
     **/
    IceGrid.CommunicatorDescriptorDisp = function (_Ice$Object) {
        _inherits(_class7, _Ice$Object);

        function _class7() {
            _classCallCheck(this, _class7);

            return _possibleConstructorReturn(this, (_class7.__proto__ || Object.getPrototypeOf(_class7)).apply(this, arguments));
        }

        return _class7;
    }(Ice.Object);

    Slice.defineOperations(IceGrid.CommunicatorDescriptorDisp, undefined, iceC_IceGrid_CommunicatorDescriptor_ids, 1);

    /**
     * A distribution descriptor defines an IcePatch2 server and the
     * directories to retrieve from the patch server.
     *
     **/
    IceGrid.DistributionDescriptor = function () {
        function _class8() {
            var icepatch = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
            var directories = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

            _classCallCheck(this, _class8);

            this.icepatch = icepatch;
            this.directories = directories;
        }

        _createClass(_class8, [{
            key: "_write",
            value: function _write(ostr) {
                ostr.writeString(this.icepatch);
                Ice.StringSeqHelper.write(ostr, this.directories);
            }
        }, {
            key: "_read",
            value: function _read(istr) {
                this.icepatch = istr.readString();
                this.directories = Ice.StringSeqHelper.read(istr);
            }
        }], [{
            key: "minWireSize",
            get: function get() {
                return 2;
            }
        }]);

        return _class8;
    }();

    Slice.defineStruct(IceGrid.DistributionDescriptor, true, true);

    var iceC_IceGrid_ServerDescriptor_ids = ["::Ice::Object", "::IceGrid::CommunicatorDescriptor", "::IceGrid::ServerDescriptor"];

    /**
     * An Ice server descriptor.
     *
     **/
    IceGrid.ServerDescriptor = function (_IceGrid$Communicator) {
        _inherits(_class9, _IceGrid$Communicator);

        function _class9(adapters, propertySet, dbEnvs, logs, description) {
            var id = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : "";
            var exe = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : "";
            var iceVersion = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : "";
            var pwd = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : "";
            var options = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : null;
            var envs = arguments.length > 10 && arguments[10] !== undefined ? arguments[10] : null;
            var activation = arguments.length > 11 && arguments[11] !== undefined ? arguments[11] : "";
            var activationTimeout = arguments.length > 12 && arguments[12] !== undefined ? arguments[12] : "";
            var deactivationTimeout = arguments.length > 13 && arguments[13] !== undefined ? arguments[13] : "";
            var applicationDistrib = arguments.length > 14 && arguments[14] !== undefined ? arguments[14] : false;
            var distrib = arguments.length > 15 && arguments[15] !== undefined ? arguments[15] : new IceGrid.DistributionDescriptor();
            var allocatable = arguments.length > 16 && arguments[16] !== undefined ? arguments[16] : false;
            var user = arguments.length > 17 && arguments[17] !== undefined ? arguments[17] : "";

            _classCallCheck(this, _class9);

            var _this3 = _possibleConstructorReturn(this, (_class9.__proto__ || Object.getPrototypeOf(_class9)).call(this, adapters, propertySet, dbEnvs, logs, description));

            _this3.id = id;
            _this3.exe = exe;
            _this3.iceVersion = iceVersion;
            _this3.pwd = pwd;
            _this3.options = options;
            _this3.envs = envs;
            _this3.activation = activation;
            _this3.activationTimeout = activationTimeout;
            _this3.deactivationTimeout = deactivationTimeout;
            _this3.applicationDistrib = applicationDistrib;
            _this3.distrib = distrib;
            _this3.allocatable = allocatable;
            _this3.user = user;
            return _this3;
        }

        _createClass(_class9, [{
            key: "_iceWriteMemberImpl",
            value: function _iceWriteMemberImpl(ostr) {
                ostr.writeString(this.id);
                ostr.writeString(this.exe);
                ostr.writeString(this.iceVersion);
                ostr.writeString(this.pwd);
                Ice.StringSeqHelper.write(ostr, this.options);
                Ice.StringSeqHelper.write(ostr, this.envs);
                ostr.writeString(this.activation);
                ostr.writeString(this.activationTimeout);
                ostr.writeString(this.deactivationTimeout);
                ostr.writeBool(this.applicationDistrib);
                IceGrid.DistributionDescriptor.write(ostr, this.distrib);
                ostr.writeBool(this.allocatable);
                ostr.writeString(this.user);
            }
        }, {
            key: "_iceReadMemberImpl",
            value: function _iceReadMemberImpl(istr) {
                this.id = istr.readString();
                this.exe = istr.readString();
                this.iceVersion = istr.readString();
                this.pwd = istr.readString();
                this.options = Ice.StringSeqHelper.read(istr);
                this.envs = Ice.StringSeqHelper.read(istr);
                this.activation = istr.readString();
                this.activationTimeout = istr.readString();
                this.deactivationTimeout = istr.readString();
                this.applicationDistrib = istr.readBool();
                this.distrib = IceGrid.DistributionDescriptor.read(istr, this.distrib);
                this.allocatable = istr.readBool();
                this.user = istr.readString();
            }
        }]);

        return _class9;
    }(IceGrid.CommunicatorDescriptor);

    Slice.defineValue(IceGrid.ServerDescriptor, iceC_IceGrid_ServerDescriptor_ids[2], false);

    /**
     * An Ice server descriptor.
     *
     **/
    IceGrid.ServerDescriptorDisp = function (_IceGrid$Communicator2) {
        _inherits(_class10, _IceGrid$Communicator2);

        function _class10() {
            _classCallCheck(this, _class10);

            return _possibleConstructorReturn(this, (_class10.__proto__ || Object.getPrototypeOf(_class10)).apply(this, arguments));
        }

        return _class10;
    }(IceGrid.CommunicatorDescriptorDisp);

    Slice.defineOperations(IceGrid.ServerDescriptorDisp, undefined, iceC_IceGrid_ServerDescriptor_ids, 2);

    Slice.defineSequence(IceGrid, "ServerDescriptorSeqHelper", "Ice.ObjectHelper", false, "IceGrid.ServerDescriptor");

    var iceC_IceGrid_ServiceDescriptor_ids = ["::Ice::Object", "::IceGrid::CommunicatorDescriptor", "::IceGrid::ServiceDescriptor"];

    /**
     * An IceBox service descriptor.
     *
     **/
    IceGrid.ServiceDescriptor = function (_IceGrid$Communicator3) {
        _inherits(_class11, _IceGrid$Communicator3);

        function _class11(adapters, propertySet, dbEnvs, logs, description) {
            var name = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : "";
            var entry = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : "";

            _classCallCheck(this, _class11);

            var _this5 = _possibleConstructorReturn(this, (_class11.__proto__ || Object.getPrototypeOf(_class11)).call(this, adapters, propertySet, dbEnvs, logs, description));

            _this5.name = name;
            _this5.entry = entry;
            return _this5;
        }

        _createClass(_class11, [{
            key: "_iceWriteMemberImpl",
            value: function _iceWriteMemberImpl(ostr) {
                ostr.writeString(this.name);
                ostr.writeString(this.entry);
            }
        }, {
            key: "_iceReadMemberImpl",
            value: function _iceReadMemberImpl(istr) {
                this.name = istr.readString();
                this.entry = istr.readString();
            }
        }]);

        return _class11;
    }(IceGrid.CommunicatorDescriptor);

    Slice.defineValue(IceGrid.ServiceDescriptor, iceC_IceGrid_ServiceDescriptor_ids[2], false);

    /**
     * An IceBox service descriptor.
     *
     **/
    IceGrid.ServiceDescriptorDisp = function (_IceGrid$Communicator4) {
        _inherits(_class12, _IceGrid$Communicator4);

        function _class12() {
            _classCallCheck(this, _class12);

            return _possibleConstructorReturn(this, (_class12.__proto__ || Object.getPrototypeOf(_class12)).apply(this, arguments));
        }

        return _class12;
    }(IceGrid.CommunicatorDescriptorDisp);

    Slice.defineOperations(IceGrid.ServiceDescriptorDisp, undefined, iceC_IceGrid_ServiceDescriptor_ids, 2);

    Slice.defineSequence(IceGrid, "ServiceDescriptorSeqHelper", "Ice.ObjectHelper", false, "IceGrid.ServiceDescriptor");

    /**
     * A server template instance descriptor.
     *
     **/
    IceGrid.ServerInstanceDescriptor = function () {
        function _class13() {
            var template = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
            var parameterValues = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
            var propertySet = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new IceGrid.PropertySetDescriptor();
            var servicePropertySets = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

            _classCallCheck(this, _class13);

            this.template = template;
            this.parameterValues = parameterValues;
            this.propertySet = propertySet;
            this.servicePropertySets = servicePropertySets;
        }

        _createClass(_class13, [{
            key: "_write",
            value: function _write(ostr) {
                ostr.writeString(this.template);
                IceGrid.StringStringDictHelper.write(ostr, this.parameterValues);
                IceGrid.PropertySetDescriptor.write(ostr, this.propertySet);
                IceGrid.PropertySetDescriptorDictHelper.write(ostr, this.servicePropertySets);
            }
        }, {
            key: "_read",
            value: function _read(istr) {
                this.template = istr.readString();
                this.parameterValues = IceGrid.StringStringDictHelper.read(istr);
                this.propertySet = IceGrid.PropertySetDescriptor.read(istr, this.propertySet);
                this.servicePropertySets = IceGrid.PropertySetDescriptorDictHelper.read(istr);
            }
        }], [{
            key: "minWireSize",
            get: function get() {
                return 5;
            }
        }]);

        return _class13;
    }();

    Slice.defineStruct(IceGrid.ServerInstanceDescriptor, false, true);

    Slice.defineSequence(IceGrid, "ServerInstanceDescriptorSeqHelper", "IceGrid.ServerInstanceDescriptor", false);

    /**
     * A template descriptor for server or service templates.
     *
     **/
    IceGrid.TemplateDescriptor = function () {
        function _class14() {
            var descriptor = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
            var parameters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
            var parameterDefaults = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

            _classCallCheck(this, _class14);

            this.descriptor = descriptor;
            this.parameters = parameters;
            this.parameterDefaults = parameterDefaults;
        }

        _createClass(_class14, [{
            key: "_write",
            value: function _write(ostr) {
                ostr.writeValue(this.descriptor);
                Ice.StringSeqHelper.write(ostr, this.parameters);
                IceGrid.StringStringDictHelper.write(ostr, this.parameterDefaults);
            }
        }, {
            key: "_read",
            value: function _read(istr) {
                var _this7 = this;

                istr.readValue(function (obj) {
                    return _this7.descriptor = obj;
                }, IceGrid.CommunicatorDescriptor);
                this.parameters = Ice.StringSeqHelper.read(istr);
                this.parameterDefaults = IceGrid.StringStringDictHelper.read(istr);
            }
        }], [{
            key: "minWireSize",
            get: function get() {
                return 3;
            }
        }]);

        return _class14;
    }();

    Slice.defineStruct(IceGrid.TemplateDescriptor, false, true);

    Slice.defineDictionary(IceGrid, "TemplateDescriptorDict", "TemplateDescriptorDictHelper", "Ice.StringHelper", "IceGrid.TemplateDescriptor", false, undefined, undefined);

    /**
     * A service template instance descriptor.
     *
     **/
    IceGrid.ServiceInstanceDescriptor = function () {
        function _class15() {
            var template = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
            var parameterValues = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
            var descriptor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
            var propertySet = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new IceGrid.PropertySetDescriptor();

            _classCallCheck(this, _class15);

            this.template = template;
            this.parameterValues = parameterValues;
            this.descriptor = descriptor;
            this.propertySet = propertySet;
        }

        _createClass(_class15, [{
            key: "_write",
            value: function _write(ostr) {
                ostr.writeString(this.template);
                IceGrid.StringStringDictHelper.write(ostr, this.parameterValues);
                ostr.writeValue(this.descriptor);
                IceGrid.PropertySetDescriptor.write(ostr, this.propertySet);
            }
        }, {
            key: "_read",
            value: function _read(istr) {
                var _this8 = this;

                this.template = istr.readString();
                this.parameterValues = IceGrid.StringStringDictHelper.read(istr);
                istr.readValue(function (obj) {
                    return _this8.descriptor = obj;
                }, IceGrid.ServiceDescriptor);
                this.propertySet = IceGrid.PropertySetDescriptor.read(istr, this.propertySet);
            }
        }], [{
            key: "minWireSize",
            get: function get() {
                return 5;
            }
        }]);

        return _class15;
    }();

    Slice.defineStruct(IceGrid.ServiceInstanceDescriptor, false, true);

    Slice.defineSequence(IceGrid, "ServiceInstanceDescriptorSeqHelper", "IceGrid.ServiceInstanceDescriptor", false);

    var iceC_IceGrid_IceBoxDescriptor_ids = ["::Ice::Object", "::IceGrid::CommunicatorDescriptor", "::IceGrid::IceBoxDescriptor", "::IceGrid::ServerDescriptor"];

    /**
     * An IceBox server descriptor.
     *
     **/
    IceGrid.IceBoxDescriptor = function (_IceGrid$ServerDescri) {
        _inherits(_class16, _IceGrid$ServerDescri);

        function _class16(adapters, propertySet, dbEnvs, logs, description, id, exe, iceVersion, pwd, options, envs, activation, activationTimeout, deactivationTimeout, applicationDistrib, distrib, allocatable, user) {
            var services = arguments.length > 18 && arguments[18] !== undefined ? arguments[18] : null;

            _classCallCheck(this, _class16);

            var _this9 = _possibleConstructorReturn(this, (_class16.__proto__ || Object.getPrototypeOf(_class16)).call(this, adapters, propertySet, dbEnvs, logs, description, id, exe, iceVersion, pwd, options, envs, activation, activationTimeout, deactivationTimeout, applicationDistrib, distrib, allocatable, user));

            _this9.services = services;
            return _this9;
        }

        _createClass(_class16, [{
            key: "_iceWriteMemberImpl",
            value: function _iceWriteMemberImpl(ostr) {
                IceGrid.ServiceInstanceDescriptorSeqHelper.write(ostr, this.services);
            }
        }, {
            key: "_iceReadMemberImpl",
            value: function _iceReadMemberImpl(istr) {
                this.services = IceGrid.ServiceInstanceDescriptorSeqHelper.read(istr);
            }
        }]);

        return _class16;
    }(IceGrid.ServerDescriptor);

    Slice.defineValue(IceGrid.IceBoxDescriptor, iceC_IceGrid_IceBoxDescriptor_ids[2], false);

    /**
     * An IceBox server descriptor.
     *
     **/
    IceGrid.IceBoxDescriptorDisp = function (_IceGrid$ServerDescri2) {
        _inherits(_class17, _IceGrid$ServerDescri2);

        function _class17() {
            _classCallCheck(this, _class17);

            return _possibleConstructorReturn(this, (_class17.__proto__ || Object.getPrototypeOf(_class17)).apply(this, arguments));
        }

        return _class17;
    }(IceGrid.ServerDescriptorDisp);

    Slice.defineOperations(IceGrid.IceBoxDescriptorDisp, undefined, iceC_IceGrid_IceBoxDescriptor_ids, 2);

    /**
     * A node descriptor.
     *
     **/
    IceGrid.NodeDescriptor = function () {
        function _class18() {
            var variables = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
            var serverInstances = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
            var servers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
            var loadFactor = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "";
            var description = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : "";
            var propertySets = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;

            _classCallCheck(this, _class18);

            this.variables = variables;
            this.serverInstances = serverInstances;
            this.servers = servers;
            this.loadFactor = loadFactor;
            this.description = description;
            this.propertySets = propertySets;
        }

        _createClass(_class18, [{
            key: "_write",
            value: function _write(ostr) {
                IceGrid.StringStringDictHelper.write(ostr, this.variables);
                IceGrid.ServerInstanceDescriptorSeqHelper.write(ostr, this.serverInstances);
                IceGrid.ServerDescriptorSeqHelper.write(ostr, this.servers);
                ostr.writeString(this.loadFactor);
                ostr.writeString(this.description);
                IceGrid.PropertySetDescriptorDictHelper.write(ostr, this.propertySets);
            }
        }, {
            key: "_read",
            value: function _read(istr) {
                this.variables = IceGrid.StringStringDictHelper.read(istr);
                this.serverInstances = IceGrid.ServerInstanceDescriptorSeqHelper.read(istr);
                this.servers = IceGrid.ServerDescriptorSeqHelper.read(istr);
                this.loadFactor = istr.readString();
                this.description = istr.readString();
                this.propertySets = IceGrid.PropertySetDescriptorDictHelper.read(istr);
            }
        }], [{
            key: "minWireSize",
            get: function get() {
                return 6;
            }
        }]);

        return _class18;
    }();

    Slice.defineStruct(IceGrid.NodeDescriptor, false, true);

    Slice.defineDictionary(IceGrid, "NodeDescriptorDict", "NodeDescriptorDictHelper", "Ice.StringHelper", "IceGrid.NodeDescriptor", false, undefined, undefined);

    var iceC_IceGrid_LoadBalancingPolicy_ids = ["::Ice::Object", "::IceGrid::LoadBalancingPolicy"];

    /**
     * A base class for load balancing policies.
     *
     **/
    IceGrid.LoadBalancingPolicy = function (_Ice$Value2) {
        _inherits(_class19, _Ice$Value2);

        function _class19() {
            var nReplicas = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";

            _classCallCheck(this, _class19);

            var _this11 = _possibleConstructorReturn(this, (_class19.__proto__ || Object.getPrototypeOf(_class19)).call(this));

            _this11.nReplicas = nReplicas;
            return _this11;
        }

        _createClass(_class19, [{
            key: "_iceWriteMemberImpl",
            value: function _iceWriteMemberImpl(ostr) {
                ostr.writeString(this.nReplicas);
            }
        }, {
            key: "_iceReadMemberImpl",
            value: function _iceReadMemberImpl(istr) {
                this.nReplicas = istr.readString();
            }
        }]);

        return _class19;
    }(Ice.Value);

    Slice.defineValue(IceGrid.LoadBalancingPolicy, iceC_IceGrid_LoadBalancingPolicy_ids[1], false);

    /**
     * A base class for load balancing policies.
     *
     **/
    IceGrid.LoadBalancingPolicyDisp = function (_Ice$Object2) {
        _inherits(_class20, _Ice$Object2);

        function _class20() {
            _classCallCheck(this, _class20);

            return _possibleConstructorReturn(this, (_class20.__proto__ || Object.getPrototypeOf(_class20)).apply(this, arguments));
        }

        return _class20;
    }(Ice.Object);

    Slice.defineOperations(IceGrid.LoadBalancingPolicyDisp, undefined, iceC_IceGrid_LoadBalancingPolicy_ids, 1);

    var iceC_IceGrid_RandomLoadBalancingPolicy_ids = ["::Ice::Object", "::IceGrid::LoadBalancingPolicy", "::IceGrid::RandomLoadBalancingPolicy"];

    /**
     * Random load balancing policy.
     *
     **/
    IceGrid.RandomLoadBalancingPolicy = function (_IceGrid$LoadBalancin) {
        _inherits(_class21, _IceGrid$LoadBalancin);

        function _class21(nReplicas) {
            _classCallCheck(this, _class21);

            return _possibleConstructorReturn(this, (_class21.__proto__ || Object.getPrototypeOf(_class21)).call(this, nReplicas));
        }

        return _class21;
    }(IceGrid.LoadBalancingPolicy);

    Slice.defineValue(IceGrid.RandomLoadBalancingPolicy, iceC_IceGrid_RandomLoadBalancingPolicy_ids[2], false);

    /**
     * Random load balancing policy.
     *
     **/
    IceGrid.RandomLoadBalancingPolicyDisp = function (_IceGrid$LoadBalancin2) {
        _inherits(_class22, _IceGrid$LoadBalancin2);

        function _class22() {
            _classCallCheck(this, _class22);

            return _possibleConstructorReturn(this, (_class22.__proto__ || Object.getPrototypeOf(_class22)).apply(this, arguments));
        }

        return _class22;
    }(IceGrid.LoadBalancingPolicyDisp);

    Slice.defineOperations(IceGrid.RandomLoadBalancingPolicyDisp, undefined, iceC_IceGrid_RandomLoadBalancingPolicy_ids, 2);

    var iceC_IceGrid_OrderedLoadBalancingPolicy_ids = ["::Ice::Object", "::IceGrid::LoadBalancingPolicy", "::IceGrid::OrderedLoadBalancingPolicy"];

    /**
     * Ordered load balancing policy.
     *
     **/
    IceGrid.OrderedLoadBalancingPolicy = function (_IceGrid$LoadBalancin3) {
        _inherits(_class23, _IceGrid$LoadBalancin3);

        function _class23(nReplicas) {
            _classCallCheck(this, _class23);

            return _possibleConstructorReturn(this, (_class23.__proto__ || Object.getPrototypeOf(_class23)).call(this, nReplicas));
        }

        return _class23;
    }(IceGrid.LoadBalancingPolicy);

    Slice.defineValue(IceGrid.OrderedLoadBalancingPolicy, iceC_IceGrid_OrderedLoadBalancingPolicy_ids[2], false);

    /**
     * Ordered load balancing policy.
     *
     **/
    IceGrid.OrderedLoadBalancingPolicyDisp = function (_IceGrid$LoadBalancin4) {
        _inherits(_class24, _IceGrid$LoadBalancin4);

        function _class24() {
            _classCallCheck(this, _class24);

            return _possibleConstructorReturn(this, (_class24.__proto__ || Object.getPrototypeOf(_class24)).apply(this, arguments));
        }

        return _class24;
    }(IceGrid.LoadBalancingPolicyDisp);

    Slice.defineOperations(IceGrid.OrderedLoadBalancingPolicyDisp, undefined, iceC_IceGrid_OrderedLoadBalancingPolicy_ids, 2);

    var iceC_IceGrid_RoundRobinLoadBalancingPolicy_ids = ["::Ice::Object", "::IceGrid::LoadBalancingPolicy", "::IceGrid::RoundRobinLoadBalancingPolicy"];

    /**
     * Round robin load balancing policy.
     *
     **/
    IceGrid.RoundRobinLoadBalancingPolicy = function (_IceGrid$LoadBalancin5) {
        _inherits(_class25, _IceGrid$LoadBalancin5);

        function _class25(nReplicas) {
            _classCallCheck(this, _class25);

            return _possibleConstructorReturn(this, (_class25.__proto__ || Object.getPrototypeOf(_class25)).call(this, nReplicas));
        }

        return _class25;
    }(IceGrid.LoadBalancingPolicy);

    Slice.defineValue(IceGrid.RoundRobinLoadBalancingPolicy, iceC_IceGrid_RoundRobinLoadBalancingPolicy_ids[2], false);

    /**
     * Round robin load balancing policy.
     *
     **/
    IceGrid.RoundRobinLoadBalancingPolicyDisp = function (_IceGrid$LoadBalancin6) {
        _inherits(_class26, _IceGrid$LoadBalancin6);

        function _class26() {
            _classCallCheck(this, _class26);

            return _possibleConstructorReturn(this, (_class26.__proto__ || Object.getPrototypeOf(_class26)).apply(this, arguments));
        }

        return _class26;
    }(IceGrid.LoadBalancingPolicyDisp);

    Slice.defineOperations(IceGrid.RoundRobinLoadBalancingPolicyDisp, undefined, iceC_IceGrid_RoundRobinLoadBalancingPolicy_ids, 2);

    var iceC_IceGrid_AdaptiveLoadBalancingPolicy_ids = ["::Ice::Object", "::IceGrid::AdaptiveLoadBalancingPolicy", "::IceGrid::LoadBalancingPolicy"];

    /**
     * Adaptive load balancing policy.
     *
     **/
    IceGrid.AdaptiveLoadBalancingPolicy = function (_IceGrid$LoadBalancin7) {
        _inherits(_class27, _IceGrid$LoadBalancin7);

        function _class27(nReplicas) {
            var loadSample = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";

            _classCallCheck(this, _class27);

            var _this19 = _possibleConstructorReturn(this, (_class27.__proto__ || Object.getPrototypeOf(_class27)).call(this, nReplicas));

            _this19.loadSample = loadSample;
            return _this19;
        }

        _createClass(_class27, [{
            key: "_iceWriteMemberImpl",
            value: function _iceWriteMemberImpl(ostr) {
                ostr.writeString(this.loadSample);
            }
        }, {
            key: "_iceReadMemberImpl",
            value: function _iceReadMemberImpl(istr) {
                this.loadSample = istr.readString();
            }
        }]);

        return _class27;
    }(IceGrid.LoadBalancingPolicy);

    Slice.defineValue(IceGrid.AdaptiveLoadBalancingPolicy, iceC_IceGrid_AdaptiveLoadBalancingPolicy_ids[1], false);

    /**
     * Adaptive load balancing policy.
     *
     **/
    IceGrid.AdaptiveLoadBalancingPolicyDisp = function (_IceGrid$LoadBalancin8) {
        _inherits(_class28, _IceGrid$LoadBalancin8);

        function _class28() {
            _classCallCheck(this, _class28);

            return _possibleConstructorReturn(this, (_class28.__proto__ || Object.getPrototypeOf(_class28)).apply(this, arguments));
        }

        return _class28;
    }(IceGrid.LoadBalancingPolicyDisp);

    Slice.defineOperations(IceGrid.AdaptiveLoadBalancingPolicyDisp, undefined, iceC_IceGrid_AdaptiveLoadBalancingPolicy_ids, 1);

    /**
     * A replica group descriptor.
     *
     **/
    IceGrid.ReplicaGroupDescriptor = function () {
        function _class29() {
            var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
            var loadBalancing = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
            var proxyOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "";
            var objects = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
            var description = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : "";
            var filter = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : "";

            _classCallCheck(this, _class29);

            this.id = id;
            this.loadBalancing = loadBalancing;
            this.proxyOptions = proxyOptions;
            this.objects = objects;
            this.description = description;
            this.filter = filter;
        }

        _createClass(_class29, [{
            key: "_write",
            value: function _write(ostr) {
                ostr.writeString(this.id);
                ostr.writeValue(this.loadBalancing);
                ostr.writeString(this.proxyOptions);
                IceGrid.ObjectDescriptorSeqHelper.write(ostr, this.objects);
                ostr.writeString(this.description);
                ostr.writeString(this.filter);
            }
        }, {
            key: "_read",
            value: function _read(istr) {
                var _this21 = this;

                this.id = istr.readString();
                istr.readValue(function (obj) {
                    return _this21.loadBalancing = obj;
                }, IceGrid.LoadBalancingPolicy);
                this.proxyOptions = istr.readString();
                this.objects = IceGrid.ObjectDescriptorSeqHelper.read(istr);
                this.description = istr.readString();
                this.filter = istr.readString();
            }
        }], [{
            key: "minWireSize",
            get: function get() {
                return 6;
            }
        }]);

        return _class29;
    }();

    Slice.defineStruct(IceGrid.ReplicaGroupDescriptor, false, true);

    Slice.defineSequence(IceGrid, "ReplicaGroupDescriptorSeqHelper", "IceGrid.ReplicaGroupDescriptor", false);

    /**
     * An application descriptor.
     *
     **/
    IceGrid.ApplicationDescriptor = function () {
        function _class30() {
            var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
            var variables = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
            var replicaGroups = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
            var serverTemplates = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
            var serviceTemplates = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;
            var nodes = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;
            var distrib = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new IceGrid.DistributionDescriptor();
            var description = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : "";
            var propertySets = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : null;

            _classCallCheck(this, _class30);

            this.name = name;
            this.variables = variables;
            this.replicaGroups = replicaGroups;
            this.serverTemplates = serverTemplates;
            this.serviceTemplates = serviceTemplates;
            this.nodes = nodes;
            this.distrib = distrib;
            this.description = description;
            this.propertySets = propertySets;
        }

        _createClass(_class30, [{
            key: "_write",
            value: function _write(ostr) {
                ostr.writeString(this.name);
                IceGrid.StringStringDictHelper.write(ostr, this.variables);
                IceGrid.ReplicaGroupDescriptorSeqHelper.write(ostr, this.replicaGroups);
                IceGrid.TemplateDescriptorDictHelper.write(ostr, this.serverTemplates);
                IceGrid.TemplateDescriptorDictHelper.write(ostr, this.serviceTemplates);
                IceGrid.NodeDescriptorDictHelper.write(ostr, this.nodes);
                IceGrid.DistributionDescriptor.write(ostr, this.distrib);
                ostr.writeString(this.description);
                IceGrid.PropertySetDescriptorDictHelper.write(ostr, this.propertySets);
            }
        }, {
            key: "_read",
            value: function _read(istr) {
                this.name = istr.readString();
                this.variables = IceGrid.StringStringDictHelper.read(istr);
                this.replicaGroups = IceGrid.ReplicaGroupDescriptorSeqHelper.read(istr);
                this.serverTemplates = IceGrid.TemplateDescriptorDictHelper.read(istr);
                this.serviceTemplates = IceGrid.TemplateDescriptorDictHelper.read(istr);
                this.nodes = IceGrid.NodeDescriptorDictHelper.read(istr);
                this.distrib = IceGrid.DistributionDescriptor.read(istr, this.distrib);
                this.description = istr.readString();
                this.propertySets = IceGrid.PropertySetDescriptorDictHelper.read(istr);
            }
        }], [{
            key: "minWireSize",
            get: function get() {
                return 10;
            }
        }]);

        return _class30;
    }();

    Slice.defineStruct(IceGrid.ApplicationDescriptor, false, true);

    Slice.defineSequence(IceGrid, "ApplicationDescriptorSeqHelper", "IceGrid.ApplicationDescriptor", false);

    var iceC_IceGrid_BoxedString_ids = ["::Ice::Object", "::IceGrid::BoxedString"];

    /**
     * A "boxed" string.
     *
     **/
    IceGrid.BoxedString = function (_Ice$Value3) {
        _inherits(_class31, _Ice$Value3);

        function _class31() {
            var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";

            _classCallCheck(this, _class31);

            var _this22 = _possibleConstructorReturn(this, (_class31.__proto__ || Object.getPrototypeOf(_class31)).call(this));

            _this22.value = value;
            return _this22;
        }

        _createClass(_class31, [{
            key: "_iceWriteMemberImpl",
            value: function _iceWriteMemberImpl(ostr) {
                ostr.writeString(this.value);
            }
        }, {
            key: "_iceReadMemberImpl",
            value: function _iceReadMemberImpl(istr) {
                this.value = istr.readString();
            }
        }]);

        return _class31;
    }(Ice.Value);

    Slice.defineValue(IceGrid.BoxedString, iceC_IceGrid_BoxedString_ids[1], false);

    /**
     * A "boxed" string.
     *
     **/
    IceGrid.BoxedStringDisp = function (_Ice$Object3) {
        _inherits(_class32, _Ice$Object3);

        function _class32() {
            _classCallCheck(this, _class32);

            return _possibleConstructorReturn(this, (_class32.__proto__ || Object.getPrototypeOf(_class32)).apply(this, arguments));
        }

        return _class32;
    }(Ice.Object);

    Slice.defineOperations(IceGrid.BoxedStringDisp, undefined, iceC_IceGrid_BoxedString_ids, 1);

    /**
     * A node update descriptor to describe the updates to apply to a
     * node of a deployed application.
     *
     **/
    IceGrid.NodeUpdateDescriptor = function () {
        function _class33() {
            var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
            var description = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
            var variables = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
            var removeVariables = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
            var propertySets = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;
            var removePropertySets = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;
            var serverInstances = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : null;
            var servers = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : null;
            var removeServers = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : null;
            var loadFactor = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : null;

            _classCallCheck(this, _class33);

            this.name = name;
            this.description = description;
            this.variables = variables;
            this.removeVariables = removeVariables;
            this.propertySets = propertySets;
            this.removePropertySets = removePropertySets;
            this.serverInstances = serverInstances;
            this.servers = servers;
            this.removeServers = removeServers;
            this.loadFactor = loadFactor;
        }

        _createClass(_class33, [{
            key: "_write",
            value: function _write(ostr) {
                ostr.writeString(this.name);
                ostr.writeValue(this.description);
                IceGrid.StringStringDictHelper.write(ostr, this.variables);
                Ice.StringSeqHelper.write(ostr, this.removeVariables);
                IceGrid.PropertySetDescriptorDictHelper.write(ostr, this.propertySets);
                Ice.StringSeqHelper.write(ostr, this.removePropertySets);
                IceGrid.ServerInstanceDescriptorSeqHelper.write(ostr, this.serverInstances);
                IceGrid.ServerDescriptorSeqHelper.write(ostr, this.servers);
                Ice.StringSeqHelper.write(ostr, this.removeServers);
                ostr.writeValue(this.loadFactor);
            }
        }, {
            key: "_read",
            value: function _read(istr) {
                var _this24 = this;

                this.name = istr.readString();
                istr.readValue(function (obj) {
                    return _this24.description = obj;
                }, IceGrid.BoxedString);
                this.variables = IceGrid.StringStringDictHelper.read(istr);
                this.removeVariables = Ice.StringSeqHelper.read(istr);
                this.propertySets = IceGrid.PropertySetDescriptorDictHelper.read(istr);
                this.removePropertySets = Ice.StringSeqHelper.read(istr);
                this.serverInstances = IceGrid.ServerInstanceDescriptorSeqHelper.read(istr);
                this.servers = IceGrid.ServerDescriptorSeqHelper.read(istr);
                this.removeServers = Ice.StringSeqHelper.read(istr);
                istr.readValue(function (obj) {
                    return _this24.loadFactor = obj;
                }, IceGrid.BoxedString);
            }
        }], [{
            key: "minWireSize",
            get: function get() {
                return 10;
            }
        }]);

        return _class33;
    }();

    Slice.defineStruct(IceGrid.NodeUpdateDescriptor, false, true);

    Slice.defineSequence(IceGrid, "NodeUpdateDescriptorSeqHelper", "IceGrid.NodeUpdateDescriptor", false);

    var iceC_IceGrid_BoxedDistributionDescriptor_ids = ["::Ice::Object", "::IceGrid::BoxedDistributionDescriptor"];

    /**
     * A "boxed" distribution descriptor.
     *
     **/
    IceGrid.BoxedDistributionDescriptor = function (_Ice$Value4) {
        _inherits(_class34, _Ice$Value4);

        function _class34() {
            var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new IceGrid.DistributionDescriptor();

            _classCallCheck(this, _class34);

            var _this25 = _possibleConstructorReturn(this, (_class34.__proto__ || Object.getPrototypeOf(_class34)).call(this));

            _this25.value = value;
            return _this25;
        }

        _createClass(_class34, [{
            key: "_iceWriteMemberImpl",
            value: function _iceWriteMemberImpl(ostr) {
                IceGrid.DistributionDescriptor.write(ostr, this.value);
            }
        }, {
            key: "_iceReadMemberImpl",
            value: function _iceReadMemberImpl(istr) {
                this.value = IceGrid.DistributionDescriptor.read(istr, this.value);
            }
        }]);

        return _class34;
    }(Ice.Value);

    Slice.defineValue(IceGrid.BoxedDistributionDescriptor, iceC_IceGrid_BoxedDistributionDescriptor_ids[1], false);

    /**
     * A "boxed" distribution descriptor.
     *
     **/
    IceGrid.BoxedDistributionDescriptorDisp = function (_Ice$Object4) {
        _inherits(_class35, _Ice$Object4);

        function _class35() {
            _classCallCheck(this, _class35);

            return _possibleConstructorReturn(this, (_class35.__proto__ || Object.getPrototypeOf(_class35)).apply(this, arguments));
        }

        return _class35;
    }(Ice.Object);

    Slice.defineOperations(IceGrid.BoxedDistributionDescriptorDisp, undefined, iceC_IceGrid_BoxedDistributionDescriptor_ids, 1);

    /**
     * An application update descriptor to describe the updates to apply
     * to a deployed application.
     *
     **/
    IceGrid.ApplicationUpdateDescriptor = function () {
        function _class36() {
            var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
            var description = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
            var distrib = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
            var variables = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
            var removeVariables = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;
            var propertySets = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;
            var removePropertySets = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : null;
            var replicaGroups = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : null;
            var removeReplicaGroups = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : null;
            var serverTemplates = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : null;
            var removeServerTemplates = arguments.length > 10 && arguments[10] !== undefined ? arguments[10] : null;
            var serviceTemplates = arguments.length > 11 && arguments[11] !== undefined ? arguments[11] : null;
            var removeServiceTemplates = arguments.length > 12 && arguments[12] !== undefined ? arguments[12] : null;
            var nodes = arguments.length > 13 && arguments[13] !== undefined ? arguments[13] : null;
            var removeNodes = arguments.length > 14 && arguments[14] !== undefined ? arguments[14] : null;

            _classCallCheck(this, _class36);

            this.name = name;
            this.description = description;
            this.distrib = distrib;
            this.variables = variables;
            this.removeVariables = removeVariables;
            this.propertySets = propertySets;
            this.removePropertySets = removePropertySets;
            this.replicaGroups = replicaGroups;
            this.removeReplicaGroups = removeReplicaGroups;
            this.serverTemplates = serverTemplates;
            this.removeServerTemplates = removeServerTemplates;
            this.serviceTemplates = serviceTemplates;
            this.removeServiceTemplates = removeServiceTemplates;
            this.nodes = nodes;
            this.removeNodes = removeNodes;
        }

        _createClass(_class36, [{
            key: "_write",
            value: function _write(ostr) {
                ostr.writeString(this.name);
                ostr.writeValue(this.description);
                ostr.writeValue(this.distrib);
                IceGrid.StringStringDictHelper.write(ostr, this.variables);
                Ice.StringSeqHelper.write(ostr, this.removeVariables);
                IceGrid.PropertySetDescriptorDictHelper.write(ostr, this.propertySets);
                Ice.StringSeqHelper.write(ostr, this.removePropertySets);
                IceGrid.ReplicaGroupDescriptorSeqHelper.write(ostr, this.replicaGroups);
                Ice.StringSeqHelper.write(ostr, this.removeReplicaGroups);
                IceGrid.TemplateDescriptorDictHelper.write(ostr, this.serverTemplates);
                Ice.StringSeqHelper.write(ostr, this.removeServerTemplates);
                IceGrid.TemplateDescriptorDictHelper.write(ostr, this.serviceTemplates);
                Ice.StringSeqHelper.write(ostr, this.removeServiceTemplates);
                IceGrid.NodeUpdateDescriptorSeqHelper.write(ostr, this.nodes);
                Ice.StringSeqHelper.write(ostr, this.removeNodes);
            }
        }, {
            key: "_read",
            value: function _read(istr) {
                var _this27 = this;

                this.name = istr.readString();
                istr.readValue(function (obj) {
                    return _this27.description = obj;
                }, IceGrid.BoxedString);
                istr.readValue(function (obj) {
                    return _this27.distrib = obj;
                }, IceGrid.BoxedDistributionDescriptor);
                this.variables = IceGrid.StringStringDictHelper.read(istr);
                this.removeVariables = Ice.StringSeqHelper.read(istr);
                this.propertySets = IceGrid.PropertySetDescriptorDictHelper.read(istr);
                this.removePropertySets = Ice.StringSeqHelper.read(istr);
                this.replicaGroups = IceGrid.ReplicaGroupDescriptorSeqHelper.read(istr);
                this.removeReplicaGroups = Ice.StringSeqHelper.read(istr);
                this.serverTemplates = IceGrid.TemplateDescriptorDictHelper.read(istr);
                this.removeServerTemplates = Ice.StringSeqHelper.read(istr);
                this.serviceTemplates = IceGrid.TemplateDescriptorDictHelper.read(istr);
                this.removeServiceTemplates = Ice.StringSeqHelper.read(istr);
                this.nodes = IceGrid.NodeUpdateDescriptorSeqHelper.read(istr);
                this.removeNodes = Ice.StringSeqHelper.read(istr);
            }
        }], [{
            key: "minWireSize",
            get: function get() {
                return 15;
            }
        }]);

        return _class36;
    }();

    Slice.defineStruct(IceGrid.ApplicationUpdateDescriptor, false, true);
    /* slice2js browser-bundle-skip */
    exports.IceGrid = IceGrid;
    /* slice2js browser-bundle-skip-end */
    /* slice2js browser-bundle-skip */
})(typeof global !== "undefined" && typeof global.process !== "undefined" ? module : undefined, typeof global !== "undefined" && typeof global.process !== "undefined" ? require : this.Ice._require, typeof global !== "undefined" && typeof global.process !== "undefined" ? exports : this);
/* slice2js browser-bundle-skip-end */