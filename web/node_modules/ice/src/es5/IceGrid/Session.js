var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `Session.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

/* slice2js browser-bundle-skip */
(function (module, require, exports) {
    /* slice2js browser-bundle-skip-end */
    /* slice2js browser-bundle-skip */
    var _ModuleRegistry = require("../Ice/ModuleRegistry").Ice._ModuleRegistry;
    var Glacier2 = require("../Glacier2/Session").Glacier2;
    var Ice = _ModuleRegistry.require(module, ["../Ice/Object", "../Ice/Value", "../Ice/ObjectPrx", "../Ice/Operation", "../Ice/Long", "../Ice/HashMap", "../Ice/HashUtil", "../Ice/ArrayUtil", "../Ice/StreamHelpers"]).Ice;

    var IceGrid = require("../IceGrid/Exception").IceGrid;
    var Slice = Ice.Slice;
    /* slice2js browser-bundle-skip-end */

    var iceC_IceGrid_Session_ids = ["::Glacier2::Session", "::Ice::Object", "::IceGrid::Session"];

    /**
     * A session object is used by IceGrid clients to allocate and
     * release objects. Client sessions are created either via the
     * {@link Registry} object or via the registry client <tt>SessionManager</tt>
     * object.
     *
     * @see Registry
     *
     **/
    IceGrid.Session = function (_Ice$Object) {
        _inherits(_class, _Ice$Object);

        function _class() {
            _classCallCheck(this, _class);

            return _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).apply(this, arguments));
        }

        _createClass(_class, null, [{
            key: "_iceImplements",
            get: function get() {
                return [Glacier2.Session];
            }
        }]);

        return _class;
    }(Ice.Object);

    IceGrid.SessionPrx = function (_Ice$ObjectPrx) {
        _inherits(_class2, _Ice$ObjectPrx);

        function _class2() {
            _classCallCheck(this, _class2);

            return _possibleConstructorReturn(this, (_class2.__proto__ || Object.getPrototypeOf(_class2)).apply(this, arguments));
        }

        _createClass(_class2, null, [{
            key: "_implements",
            get: function get() {
                return [Glacier2.SessionPrx];
            }
        }]);

        return _class2;
    }(Ice.ObjectPrx);

    Slice.defineOperations(IceGrid.Session, IceGrid.SessionPrx, iceC_IceGrid_Session_ids, 2, {
        "keepAlive": [, 2, 2,,,,,,,],
        "allocateObjectById": [,,,, [9], [[Ice.Identity]],, [IceGrid.AllocationException, IceGrid.ObjectNotRegisteredException],,],
        "allocateObjectByType": [,,,, [9], [[7]],, [IceGrid.AllocationException],,],
        "releaseObject": [,,,,, [[Ice.Identity]],, [IceGrid.AllocationException, IceGrid.ObjectNotRegisteredException],,],
        "setAllocationTimeout": [, 2, 2,,, [[3]],,,,]
    });
    /* slice2js browser-bundle-skip */
    exports.IceGrid = IceGrid;
    /* slice2js browser-bundle-skip-end */
    /* slice2js browser-bundle-skip */
})(typeof global !== "undefined" && typeof global.process !== "undefined" ? module : undefined, typeof global !== "undefined" && typeof global.process !== "undefined" ? require : this.Ice._require, typeof global !== "undefined" && typeof global.process !== "undefined" ? exports : this);
/* slice2js browser-bundle-skip-end */