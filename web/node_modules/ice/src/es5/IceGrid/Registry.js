var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `Registry.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

/* slice2js browser-bundle-skip */
(function (module, require, exports) {
    /* slice2js browser-bundle-skip-end */
    /* slice2js browser-bundle-skip */
    var _ModuleRegistry = require("../Ice/ModuleRegistry").Ice._ModuleRegistry;
    var Ice = _ModuleRegistry.require(module, ["../Ice/Object", "../Ice/Value", "../Ice/ObjectPrx", "../Ice/Operation", "../Ice/EnumBase", "../Ice/Long", "../Ice/HashMap", "../Ice/HashUtil", "../Ice/ArrayUtil", "../Ice/StreamHelpers", "../Ice/Locator"]).Ice;

    var IceGrid = _ModuleRegistry.require(module, ["../IceGrid/Exception", "../IceGrid/Session", "../IceGrid/Admin"]).IceGrid;

    var Slice = Ice.Slice;
    /* slice2js browser-bundle-skip-end */

    /**
     * Determines which load sampling interval to use.
     *
     **/
    IceGrid.LoadSample = Slice.defineEnum([['LoadSample1', 0], ['LoadSample5', 1], ['LoadSample15', 2]]);

    var iceC_IceGrid_Query_ids = ["::Ice::Object", "::IceGrid::Query"];

    /**
     * The IceGrid query interface. This interface is accessible to
     * Ice clients who wish to look up well-known objects.
     *
     **/
    IceGrid.Query = function (_Ice$Object) {
        _inherits(_class, _Ice$Object);

        function _class() {
            _classCallCheck(this, _class);

            return _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).apply(this, arguments));
        }

        return _class;
    }(Ice.Object);

    IceGrid.QueryPrx = function (_Ice$ObjectPrx) {
        _inherits(_class2, _Ice$ObjectPrx);

        function _class2() {
            _classCallCheck(this, _class2);

            return _possibleConstructorReturn(this, (_class2.__proto__ || Object.getPrototypeOf(_class2)).apply(this, arguments));
        }

        return _class2;
    }(Ice.ObjectPrx);

    Slice.defineOperations(IceGrid.Query, IceGrid.QueryPrx, iceC_IceGrid_Query_ids, 1, {
        "findObjectById": [, 2, 1,, [9], [[Ice.Identity]],,,,],
        "findObjectByType": [, 2, 1,, [9], [[7]],,,,],
        "findObjectByTypeOnLeastLoadedNode": [, 2, 1,, [9], [[7], [IceGrid.LoadSample._helper]],,,,],
        "findAllObjectsByType": [, 2, 1,, ["Ice.ObjectProxySeqHelper"], [[7]],,,,],
        "findAllReplicas": [, 2, 2,, ["Ice.ObjectProxySeqHelper"], [[9]],,,,]
    });

    var iceC_IceGrid_Registry_ids = ["::Ice::Object", "::IceGrid::Registry"];

    /**
     * The IceGrid registry allows clients create sessions
     * directly with the registry.
     *
     * @see Session
     * @see AdminSession
     *
     **/
    IceGrid.Registry = function (_Ice$Object2) {
        _inherits(_class3, _Ice$Object2);

        function _class3() {
            _classCallCheck(this, _class3);

            return _possibleConstructorReturn(this, (_class3.__proto__ || Object.getPrototypeOf(_class3)).apply(this, arguments));
        }

        return _class3;
    }(Ice.Object);

    IceGrid.RegistryPrx = function (_Ice$ObjectPrx2) {
        _inherits(_class4, _Ice$ObjectPrx2);

        function _class4() {
            _classCallCheck(this, _class4);

            return _possibleConstructorReturn(this, (_class4.__proto__ || Object.getPrototypeOf(_class4)).apply(this, arguments));
        }

        return _class4;
    }(Ice.ObjectPrx);

    Slice.defineOperations(IceGrid.Registry, IceGrid.RegistryPrx, iceC_IceGrid_Registry_ids, 1, {
        "createSession": [,,,, ["IceGrid.SessionPrx"], [[7], [7]],, [IceGrid.PermissionDeniedException],,],
        "createAdminSession": [,,,, ["IceGrid.AdminSessionPrx"], [[7], [7]],, [IceGrid.PermissionDeniedException],,],
        "createSessionFromSecureConnection": [,,,, ["IceGrid.SessionPrx"],,, [IceGrid.PermissionDeniedException],,],
        "createAdminSessionFromSecureConnection": [,,,, ["IceGrid.AdminSessionPrx"],,, [IceGrid.PermissionDeniedException],,],
        "getSessionTimeout": [, 2, 1,, [3],,,,,],
        "getACMTimeout": [, 2, 1,, [3],,,,,]
    });

    var iceC_IceGrid_Locator_ids = ["::Ice::Locator", "::Ice::Object", "::IceGrid::Locator"];

    /**
     * The IceGrid locator interface provides access to the {@link Query}
     * and {@link Registry} object of the IceGrid registry.
     *
     * @see Query
     * @see Registry
     *
     **/
    IceGrid.Locator = function (_Ice$Object3) {
        _inherits(_class5, _Ice$Object3);

        function _class5() {
            _classCallCheck(this, _class5);

            return _possibleConstructorReturn(this, (_class5.__proto__ || Object.getPrototypeOf(_class5)).apply(this, arguments));
        }

        _createClass(_class5, null, [{
            key: "_iceImplements",
            get: function get() {
                return [Ice.Locator];
            }
        }]);

        return _class5;
    }(Ice.Object);

    IceGrid.LocatorPrx = function (_Ice$ObjectPrx3) {
        _inherits(_class6, _Ice$ObjectPrx3);

        function _class6() {
            _classCallCheck(this, _class6);

            return _possibleConstructorReturn(this, (_class6.__proto__ || Object.getPrototypeOf(_class6)).apply(this, arguments));
        }

        _createClass(_class6, null, [{
            key: "_implements",
            get: function get() {
                return [Ice.LocatorPrx];
            }
        }]);

        return _class6;
    }(Ice.ObjectPrx);

    Slice.defineOperations(IceGrid.Locator, IceGrid.LocatorPrx, iceC_IceGrid_Locator_ids, 2, {
        "getLocalRegistry": [, 2, 2,, ["IceGrid.RegistryPrx"],,,,,],
        "getLocalQuery": [, 2, 2,, ["IceGrid.QueryPrx"],,,,,]
    });
    /* slice2js browser-bundle-skip */
    exports.IceGrid = IceGrid;
    /* slice2js browser-bundle-skip-end */
    /* slice2js browser-bundle-skip */
})(typeof global !== "undefined" && typeof global.process !== "undefined" ? module : undefined, typeof global !== "undefined" && typeof global.process !== "undefined" ? require : this.Ice._require, typeof global !== "undefined" && typeof global.process !== "undefined" ? exports : this);
/* slice2js browser-bundle-skip-end */