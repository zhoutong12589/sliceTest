var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `RemoteLogger.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

/* slice2js browser-bundle-skip */
(function (module, require, exports) {
    /* slice2js browser-bundle-skip-end */
    /* slice2js browser-bundle-skip */
    var _ModuleRegistry = require("../Ice/ModuleRegistry").Ice._ModuleRegistry;
    var Ice = _ModuleRegistry.require(module, ["../Ice/Object", "../Ice/Value", "../Ice/ObjectPrx", "../Ice/Operation", "../Ice/Struct", "../Ice/Exception", "../Ice/EnumBase", "../Ice/Long", "../Ice/HashMap", "../Ice/HashUtil", "../Ice/ArrayUtil", "../Ice/StreamHelpers", "../Ice/BuiltinSequences"]).Ice;

    var Slice = Ice.Slice;
    /* slice2js browser-bundle-skip-end */

    /**
     * An enumeration representing the different types of log messages.
     *
     **/
    Ice.LogMessageType = Slice.defineEnum([['PrintMessage', 0], ['TraceMessage', 1], ['WarningMessage', 2], ['ErrorMessage', 3]]);

    Slice.defineSequence(Ice, "LogMessageTypeSeqHelper", "Ice.LogMessageType._helper", false);

    /**
     * A complete log message.
     *
     **/
    Ice.LogMessage = function () {
        function _class() {
            var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Ice.LogMessageType.PrintMessage;
            var timestamp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Ice.Long(0, 0);
            var traceCategory = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "";
            var message = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "";

            _classCallCheck(this, _class);

            this.type = type;
            this.timestamp = timestamp;
            this.traceCategory = traceCategory;
            this.message = message;
        }

        _createClass(_class, [{
            key: "_write",
            value: function _write(ostr) {
                Ice.LogMessageType._write(ostr, this.type);
                ostr.writeLong(this.timestamp);
                ostr.writeString(this.traceCategory);
                ostr.writeString(this.message);
            }
        }, {
            key: "_read",
            value: function _read(istr) {
                this.type = Ice.LogMessageType._read(istr);
                this.timestamp = istr.readLong();
                this.traceCategory = istr.readString();
                this.message = istr.readString();
            }
        }], [{
            key: "minWireSize",
            get: function get() {
                return 11;
            }
        }]);

        return _class;
    }();

    Slice.defineStruct(Ice.LogMessage, true, true);

    Slice.defineSequence(Ice, "LogMessageSeqHelper", "Ice.LogMessage", false);

    var iceC_Ice_RemoteLogger_ids = ["::Ice::Object", "::Ice::RemoteLogger"];

    /**
     * The Ice remote logger interface. An application can implement a
     * RemoteLogger to receive the log messages sent to the local {@link Logger}
     * of another Ice application.
     *
     **/
    Ice.RemoteLogger = function (_Ice$Object) {
        _inherits(_class2, _Ice$Object);

        function _class2() {
            _classCallCheck(this, _class2);

            return _possibleConstructorReturn(this, (_class2.__proto__ || Object.getPrototypeOf(_class2)).apply(this, arguments));
        }

        return _class2;
    }(Ice.Object);

    Ice.RemoteLoggerPrx = function (_Ice$ObjectPrx) {
        _inherits(_class3, _Ice$ObjectPrx);

        function _class3() {
            _classCallCheck(this, _class3);

            return _possibleConstructorReturn(this, (_class3.__proto__ || Object.getPrototypeOf(_class3)).apply(this, arguments));
        }

        return _class3;
    }(Ice.ObjectPrx);

    Slice.defineOperations(Ice.RemoteLogger, Ice.RemoteLoggerPrx, iceC_Ice_RemoteLogger_ids, 1, {
        "init": [,,,,, [[7], ["Ice.LogMessageSeqHelper"]],,,,],
        "log": [,,,,, [[Ice.LogMessage]],,,,]
    });

    /**
     * An exception thrown by {@link LoggerAdmin#attachRemoteLogger} to report
     * that the provided {@link RemoteLogger} was previously attached to this
     * {@link LoggerAdmin}.
     *
     **/
    Ice.RemoteLoggerAlreadyAttachedException = function (_Ice$UserException) {
        _inherits(_class4, _Ice$UserException);

        function _class4() {
            var _cause = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";

            _classCallCheck(this, _class4);

            return _possibleConstructorReturn(this, (_class4.__proto__ || Object.getPrototypeOf(_class4)).call(this, _cause));
        }

        _createClass(_class4, [{
            key: "_mostDerivedType",
            value: function _mostDerivedType() {
                return Ice.RemoteLoggerAlreadyAttachedException;
            }
        }], [{
            key: "_parent",
            get: function get() {
                return Ice.UserException;
            }
        }, {
            key: "_id",
            get: function get() {
                return "::Ice::RemoteLoggerAlreadyAttachedException";
            }
        }]);

        return _class4;
    }(Ice.UserException);

    var iceC_Ice_LoggerAdmin_ids = ["::Ice::LoggerAdmin", "::Ice::Object"];

    /**
     * The interface of the admin object that allows an Ice application the attach its
     * {@link RemoteLogger} to the {@link Logger} of this admin object's Ice communicator.
     *
     **/
    Ice.LoggerAdmin = function (_Ice$Object2) {
        _inherits(_class5, _Ice$Object2);

        function _class5() {
            _classCallCheck(this, _class5);

            return _possibleConstructorReturn(this, (_class5.__proto__ || Object.getPrototypeOf(_class5)).apply(this, arguments));
        }

        return _class5;
    }(Ice.Object);

    Ice.LoggerAdminPrx = function (_Ice$ObjectPrx2) {
        _inherits(_class6, _Ice$ObjectPrx2);

        function _class6() {
            _classCallCheck(this, _class6);

            return _possibleConstructorReturn(this, (_class6.__proto__ || Object.getPrototypeOf(_class6)).apply(this, arguments));
        }

        return _class6;
    }(Ice.ObjectPrx);

    Slice.defineOperations(Ice.LoggerAdmin, Ice.LoggerAdminPrx, iceC_Ice_LoggerAdmin_ids, 0, {
        "attachRemoteLogger": [,,,,, [["Ice.RemoteLoggerPrx"], ["Ice.LogMessageTypeSeqHelper"], ["Ice.StringSeqHelper"], [3]],, [Ice.RemoteLoggerAlreadyAttachedException],,],
        "detachRemoteLogger": [,,,, [1], [["Ice.RemoteLoggerPrx"]],,,,],
        "getLog": [,,,, ["Ice.LogMessageSeqHelper"], [["Ice.LogMessageTypeSeqHelper"], ["Ice.StringSeqHelper"], [3]], [[7]],,,]
    });
    /* slice2js browser-bundle-skip */
    exports.Ice = Ice;
    /* slice2js browser-bundle-skip-end */
    /* slice2js browser-bundle-skip */
})(typeof global !== "undefined" && typeof global.process !== "undefined" ? module : undefined, typeof global !== "undefined" && typeof global.process !== "undefined" ? require : this.Ice._require, typeof global !== "undefined" && typeof global.process !== "undefined" ? exports : this);
/* slice2js browser-bundle-skip-end */