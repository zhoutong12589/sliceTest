function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `Current.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

/* slice2js browser-bundle-skip */
(function (module, require, exports) {
    /* slice2js browser-bundle-skip-end */
    /* slice2js browser-bundle-skip */
    var _ModuleRegistry = require("../Ice/ModuleRegistry").Ice._ModuleRegistry;
    var Ice = _ModuleRegistry.require(module, ["../Ice/Struct", "../Ice/EnumBase", "../Ice/Long", "../Ice/HashMap", "../Ice/HashUtil", "../Ice/ArrayUtil", "../Ice/StreamHelpers", "../Ice/ObjectAdapterF", "../Ice/ConnectionF", "../Ice/Identity", "../Ice/Version"]).Ice;

    var Slice = Ice.Slice;
    /* slice2js browser-bundle-skip-end */

    Slice.defineDictionary(Ice, "Context", "ContextHelper", "Ice.StringHelper", "Ice.StringHelper", false, undefined, undefined);

    /**
     * The {@link OperationMode} determines the retry behavior an
     * invocation in case of a (potentially) recoverable error.
     *
     **/
    Ice.OperationMode = Slice.defineEnum([['Normal', 0], ['Nonmutating', 1], ['Idempotent', 2]]);

    /**
     * Information about the current method invocation for servers. Each
     * operation on the server has a <tt>Current</tt> as its implicit final
     * parameter. <tt>Current</tt> is mostly used for Ice services. Most
     * applications ignore this parameter.
     *
     **/
    Ice.Current = function () {
        function _class() {
            var adapter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
            var con = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
            var id = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new Ice.Identity();
            var facet = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "";
            var operation = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : "";
            var mode = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : Ice.OperationMode.Normal;
            var ctx = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : null;
            var requestId = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 0;
            var encoding = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : new Ice.EncodingVersion();

            _classCallCheck(this, _class);

            this.adapter = adapter;
            this.con = con;
            this.id = id;
            this.facet = facet;
            this.operation = operation;
            this.mode = mode;
            this.ctx = ctx;
            this.requestId = requestId;
            this.encoding = encoding;
        }

        return _class;
    }();

    Slice.defineStruct(Ice.Current, false, true);
    /* slice2js browser-bundle-skip */
    exports.Ice = Ice;
    /* slice2js browser-bundle-skip-end */
    /* slice2js browser-bundle-skip */
})(typeof global !== "undefined" && typeof global.process !== "undefined" ? module : undefined, typeof global !== "undefined" && typeof global.process !== "undefined" ? require : this.Ice._require, typeof global !== "undefined" && typeof global.process !== "undefined" ? exports : this);
/* slice2js browser-bundle-skip-end */