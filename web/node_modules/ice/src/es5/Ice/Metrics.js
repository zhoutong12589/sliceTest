var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `Metrics.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

/* slice2js browser-bundle-skip */
(function (module, require, exports) {
    /* slice2js browser-bundle-skip-end */
    /* slice2js browser-bundle-skip */
    var _ModuleRegistry = require("../Ice/ModuleRegistry").Ice._ModuleRegistry;
    var Ice = _ModuleRegistry.require(module, ["../Ice/Object", "../Ice/Value", "../Ice/ObjectPrx", "../Ice/Operation", "../Ice/Struct", "../Ice/Exception", "../Ice/Long", "../Ice/HashMap", "../Ice/HashUtil", "../Ice/ArrayUtil", "../Ice/StreamHelpers", "../Ice/BuiltinSequences"]).Ice;

    var Slice = Ice.Slice;
    /* slice2js browser-bundle-skip-end */
    /* slice2js browser-bundle-skip */

    var IceMX = _ModuleRegistry.module("IceMX");
    /* slice2js browser-bundle-skip-end */

    Slice.defineDictionary(IceMX, "StringIntDict", "StringIntDictHelper", "Ice.StringHelper", "Ice.IntHelper", false, undefined, undefined);

    var iceC_IceMX_Metrics_ids = ["::Ice::Object", "::IceMX::Metrics"];

    /**
     * The base class for metrics. A metrics object represents a
     * collection of measurements associated to a given a system.
     *
     **/
    IceMX.Metrics = function (_Ice$Value) {
        _inherits(_class, _Ice$Value);

        function _class() {
            var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
            var total = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Ice.Long(0, 0);
            var current = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
            var totalLifetime = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new Ice.Long(0, 0);
            var failures = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;

            _classCallCheck(this, _class);

            var _this = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this));

            _this.id = id;
            _this.total = total;
            _this.current = current;
            _this.totalLifetime = totalLifetime;
            _this.failures = failures;
            return _this;
        }

        _createClass(_class, [{
            key: "_iceWriteMemberImpl",
            value: function _iceWriteMemberImpl(ostr) {
                ostr.writeString(this.id);
                ostr.writeLong(this.total);
                ostr.writeInt(this.current);
                ostr.writeLong(this.totalLifetime);
                ostr.writeInt(this.failures);
            }
        }, {
            key: "_iceReadMemberImpl",
            value: function _iceReadMemberImpl(istr) {
                this.id = istr.readString();
                this.total = istr.readLong();
                this.current = istr.readInt();
                this.totalLifetime = istr.readLong();
                this.failures = istr.readInt();
            }
        }]);

        return _class;
    }(Ice.Value);

    Slice.defineValue(IceMX.Metrics, iceC_IceMX_Metrics_ids[1], false);

    /**
     * The base class for metrics. A metrics object represents a
     * collection of measurements associated to a given a system.
     *
     **/
    IceMX.MetricsDisp = function (_Ice$Object) {
        _inherits(_class2, _Ice$Object);

        function _class2() {
            _classCallCheck(this, _class2);

            return _possibleConstructorReturn(this, (_class2.__proto__ || Object.getPrototypeOf(_class2)).apply(this, arguments));
        }

        return _class2;
    }(Ice.Object);

    Slice.defineOperations(IceMX.MetricsDisp, undefined, iceC_IceMX_Metrics_ids, 1);

    /**
     * A structure to keep track of failures associated with a given
     * metrics.
     *
     **/
    IceMX.MetricsFailures = function () {
        function _class3() {
            var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
            var failures = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

            _classCallCheck(this, _class3);

            this.id = id;
            this.failures = failures;
        }

        _createClass(_class3, [{
            key: "_write",
            value: function _write(ostr) {
                ostr.writeString(this.id);
                IceMX.StringIntDictHelper.write(ostr, this.failures);
            }
        }, {
            key: "_read",
            value: function _read(istr) {
                this.id = istr.readString();
                this.failures = IceMX.StringIntDictHelper.read(istr);
            }
        }], [{
            key: "minWireSize",
            get: function get() {
                return 2;
            }
        }]);

        return _class3;
    }();

    Slice.defineStruct(IceMX.MetricsFailures, false, true);

    Slice.defineSequence(IceMX, "MetricsFailuresSeqHelper", "IceMX.MetricsFailures", false);

    Slice.defineSequence(IceMX, "MetricsMapHelper", "Ice.ObjectHelper", false, "IceMX.Metrics");

    Slice.defineDictionary(IceMX, "MetricsView", "MetricsViewHelper", "Ice.StringHelper", "IceMX.MetricsMapHelper", false, undefined, undefined, Ice.ArrayUtil.equals);

    /**
     * Raised if a metrics view cannot be found.
     *
     **/
    IceMX.UnknownMetricsView = function (_Ice$UserException) {
        _inherits(_class4, _Ice$UserException);

        function _class4() {
            var _cause = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";

            _classCallCheck(this, _class4);

            return _possibleConstructorReturn(this, (_class4.__proto__ || Object.getPrototypeOf(_class4)).call(this, _cause));
        }

        _createClass(_class4, [{
            key: "_mostDerivedType",
            value: function _mostDerivedType() {
                return IceMX.UnknownMetricsView;
            }
        }], [{
            key: "_parent",
            get: function get() {
                return Ice.UserException;
            }
        }, {
            key: "_id",
            get: function get() {
                return "::IceMX::UnknownMetricsView";
            }
        }]);

        return _class4;
    }(Ice.UserException);

    var iceC_IceMX_MetricsAdmin_ids = ["::Ice::Object", "::IceMX::MetricsAdmin"];

    /**
     * The metrics administrative facet interface. This interface allows
     * remote administrative clients to access metrics of an application
     * that enabled the Ice administrative facility and configured some
     * metrics views.
     *
     **/
    IceMX.MetricsAdmin = function (_Ice$Object2) {
        _inherits(_class5, _Ice$Object2);

        function _class5() {
            _classCallCheck(this, _class5);

            return _possibleConstructorReturn(this, (_class5.__proto__ || Object.getPrototypeOf(_class5)).apply(this, arguments));
        }

        return _class5;
    }(Ice.Object);

    IceMX.MetricsAdminPrx = function (_Ice$ObjectPrx) {
        _inherits(_class6, _Ice$ObjectPrx);

        function _class6() {
            _classCallCheck(this, _class6);

            return _possibleConstructorReturn(this, (_class6.__proto__ || Object.getPrototypeOf(_class6)).apply(this, arguments));
        }

        return _class6;
    }(Ice.ObjectPrx);

    Slice.defineOperations(IceMX.MetricsAdmin, IceMX.MetricsAdminPrx, iceC_IceMX_MetricsAdmin_ids, 1, {
        "getMetricsViewNames": [,,, 2, ["Ice.StringSeqHelper"],, [["Ice.StringSeqHelper"]],,,],
        "enableMetricsView": [,,, 2,, [[7]],, [IceMX.UnknownMetricsView],,],
        "disableMetricsView": [,,, 2,, [[7]],, [IceMX.UnknownMetricsView],,],
        "getMetricsView": [,,, 2, ["IceMX.MetricsViewHelper"], [[7]], [[4]], [IceMX.UnknownMetricsView],, true],
        "getMapMetricsFailures": [,,, 2, ["IceMX.MetricsFailuresSeqHelper"], [[7], [7]],, [IceMX.UnknownMetricsView],,],
        "getMetricsFailures": [,,, 2, [IceMX.MetricsFailures], [[7], [7], [7]],, [IceMX.UnknownMetricsView],,]
    });

    var iceC_IceMX_ThreadMetrics_ids = ["::Ice::Object", "::IceMX::Metrics", "::IceMX::ThreadMetrics"];

    /**
     * Provides information on the number of threads currently in use and
     * their activity.
     *
     **/
    IceMX.ThreadMetrics = function (_IceMX$Metrics) {
        _inherits(_class7, _IceMX$Metrics);

        function _class7(id, total, current, totalLifetime, failures) {
            var inUseForIO = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;
            var inUseForUser = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;
            var inUseForOther = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 0;

            _classCallCheck(this, _class7);

            var _this6 = _possibleConstructorReturn(this, (_class7.__proto__ || Object.getPrototypeOf(_class7)).call(this, id, total, current, totalLifetime, failures));

            _this6.inUseForIO = inUseForIO;
            _this6.inUseForUser = inUseForUser;
            _this6.inUseForOther = inUseForOther;
            return _this6;
        }

        _createClass(_class7, [{
            key: "_iceWriteMemberImpl",
            value: function _iceWriteMemberImpl(ostr) {
                ostr.writeInt(this.inUseForIO);
                ostr.writeInt(this.inUseForUser);
                ostr.writeInt(this.inUseForOther);
            }
        }, {
            key: "_iceReadMemberImpl",
            value: function _iceReadMemberImpl(istr) {
                this.inUseForIO = istr.readInt();
                this.inUseForUser = istr.readInt();
                this.inUseForOther = istr.readInt();
            }
        }]);

        return _class7;
    }(IceMX.Metrics);

    Slice.defineValue(IceMX.ThreadMetrics, iceC_IceMX_ThreadMetrics_ids[2], false);

    /**
     * Provides information on the number of threads currently in use and
     * their activity.
     *
     **/
    IceMX.ThreadMetricsDisp = function (_IceMX$MetricsDisp) {
        _inherits(_class8, _IceMX$MetricsDisp);

        function _class8() {
            _classCallCheck(this, _class8);

            return _possibleConstructorReturn(this, (_class8.__proto__ || Object.getPrototypeOf(_class8)).apply(this, arguments));
        }

        return _class8;
    }(IceMX.MetricsDisp);

    Slice.defineOperations(IceMX.ThreadMetricsDisp, undefined, iceC_IceMX_ThreadMetrics_ids, 2);

    var iceC_IceMX_DispatchMetrics_ids = ["::Ice::Object", "::IceMX::DispatchMetrics", "::IceMX::Metrics"];

    /**
     * Provides information on servant dispatch.
     *
     **/
    IceMX.DispatchMetrics = function (_IceMX$Metrics2) {
        _inherits(_class9, _IceMX$Metrics2);

        function _class9(id, total, current, totalLifetime, failures) {
            var userException = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;
            var size = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new Ice.Long(0, 0);
            var replySize = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : new Ice.Long(0, 0);

            _classCallCheck(this, _class9);

            var _this8 = _possibleConstructorReturn(this, (_class9.__proto__ || Object.getPrototypeOf(_class9)).call(this, id, total, current, totalLifetime, failures));

            _this8.userException = userException;
            _this8.size = size;
            _this8.replySize = replySize;
            return _this8;
        }

        _createClass(_class9, [{
            key: "_iceWriteMemberImpl",
            value: function _iceWriteMemberImpl(ostr) {
                ostr.writeInt(this.userException);
                ostr.writeLong(this.size);
                ostr.writeLong(this.replySize);
            }
        }, {
            key: "_iceReadMemberImpl",
            value: function _iceReadMemberImpl(istr) {
                this.userException = istr.readInt();
                this.size = istr.readLong();
                this.replySize = istr.readLong();
            }
        }]);

        return _class9;
    }(IceMX.Metrics);

    Slice.defineValue(IceMX.DispatchMetrics, iceC_IceMX_DispatchMetrics_ids[1], false);

    /**
     * Provides information on servant dispatch.
     *
     **/
    IceMX.DispatchMetricsDisp = function (_IceMX$MetricsDisp2) {
        _inherits(_class10, _IceMX$MetricsDisp2);

        function _class10() {
            _classCallCheck(this, _class10);

            return _possibleConstructorReturn(this, (_class10.__proto__ || Object.getPrototypeOf(_class10)).apply(this, arguments));
        }

        return _class10;
    }(IceMX.MetricsDisp);

    Slice.defineOperations(IceMX.DispatchMetricsDisp, undefined, iceC_IceMX_DispatchMetrics_ids, 1);

    var iceC_IceMX_ChildInvocationMetrics_ids = ["::Ice::Object", "::IceMX::ChildInvocationMetrics", "::IceMX::Metrics"];

    /**
     * Provides information on child invocations. A child invocation is
     * either remote (sent over an Ice connection) or collocated. An
     * invocation can have multiple child invocation if it is
     * retried. Child invocation metrics are embedded within {@link
     * InvocationMetrics}.
     *
     **/
    IceMX.ChildInvocationMetrics = function (_IceMX$Metrics3) {
        _inherits(_class11, _IceMX$Metrics3);

        function _class11(id, total, current, totalLifetime, failures) {
            var size = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : new Ice.Long(0, 0);
            var replySize = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new Ice.Long(0, 0);

            _classCallCheck(this, _class11);

            var _this10 = _possibleConstructorReturn(this, (_class11.__proto__ || Object.getPrototypeOf(_class11)).call(this, id, total, current, totalLifetime, failures));

            _this10.size = size;
            _this10.replySize = replySize;
            return _this10;
        }

        _createClass(_class11, [{
            key: "_iceWriteMemberImpl",
            value: function _iceWriteMemberImpl(ostr) {
                ostr.writeLong(this.size);
                ostr.writeLong(this.replySize);
            }
        }, {
            key: "_iceReadMemberImpl",
            value: function _iceReadMemberImpl(istr) {
                this.size = istr.readLong();
                this.replySize = istr.readLong();
            }
        }]);

        return _class11;
    }(IceMX.Metrics);

    Slice.defineValue(IceMX.ChildInvocationMetrics, iceC_IceMX_ChildInvocationMetrics_ids[1], false);

    /**
     * Provides information on child invocations. A child invocation is
     * either remote (sent over an Ice connection) or collocated. An
     * invocation can have multiple child invocation if it is
     * retried. Child invocation metrics are embedded within {@link
     * InvocationMetrics}.
     *
     **/
    IceMX.ChildInvocationMetricsDisp = function (_IceMX$MetricsDisp3) {
        _inherits(_class12, _IceMX$MetricsDisp3);

        function _class12() {
            _classCallCheck(this, _class12);

            return _possibleConstructorReturn(this, (_class12.__proto__ || Object.getPrototypeOf(_class12)).apply(this, arguments));
        }

        return _class12;
    }(IceMX.MetricsDisp);

    Slice.defineOperations(IceMX.ChildInvocationMetricsDisp, undefined, iceC_IceMX_ChildInvocationMetrics_ids, 1);

    var iceC_IceMX_CollocatedMetrics_ids = ["::Ice::Object", "::IceMX::ChildInvocationMetrics", "::IceMX::CollocatedMetrics", "::IceMX::Metrics"];

    /**
     * Provides information on invocations that are collocated. Collocated
     * metrics are embedded within {@link InvocationMetrics}.
     *
     **/
    IceMX.CollocatedMetrics = function (_IceMX$ChildInvocatio) {
        _inherits(_class13, _IceMX$ChildInvocatio);

        function _class13(id, total, current, totalLifetime, failures, size, replySize) {
            _classCallCheck(this, _class13);

            return _possibleConstructorReturn(this, (_class13.__proto__ || Object.getPrototypeOf(_class13)).call(this, id, total, current, totalLifetime, failures, size, replySize));
        }

        return _class13;
    }(IceMX.ChildInvocationMetrics);

    Slice.defineValue(IceMX.CollocatedMetrics, iceC_IceMX_CollocatedMetrics_ids[2], false);

    /**
     * Provides information on invocations that are collocated. Collocated
     * metrics are embedded within {@link InvocationMetrics}.
     *
     **/
    IceMX.CollocatedMetricsDisp = function (_IceMX$ChildInvocatio2) {
        _inherits(_class14, _IceMX$ChildInvocatio2);

        function _class14() {
            _classCallCheck(this, _class14);

            return _possibleConstructorReturn(this, (_class14.__proto__ || Object.getPrototypeOf(_class14)).apply(this, arguments));
        }

        return _class14;
    }(IceMX.ChildInvocationMetricsDisp);

    Slice.defineOperations(IceMX.CollocatedMetricsDisp, undefined, iceC_IceMX_CollocatedMetrics_ids, 2);

    var iceC_IceMX_RemoteMetrics_ids = ["::Ice::Object", "::IceMX::ChildInvocationMetrics", "::IceMX::Metrics", "::IceMX::RemoteMetrics"];

    /**
     * Provides information on invocations that are specifically sent over
     * Ice connections. Remote metrics are embedded within {@link
     * InvocationMetrics}.
     *
     **/
    IceMX.RemoteMetrics = function (_IceMX$ChildInvocatio3) {
        _inherits(_class15, _IceMX$ChildInvocatio3);

        function _class15(id, total, current, totalLifetime, failures, size, replySize) {
            _classCallCheck(this, _class15);

            return _possibleConstructorReturn(this, (_class15.__proto__ || Object.getPrototypeOf(_class15)).call(this, id, total, current, totalLifetime, failures, size, replySize));
        }

        return _class15;
    }(IceMX.ChildInvocationMetrics);

    Slice.defineValue(IceMX.RemoteMetrics, iceC_IceMX_RemoteMetrics_ids[3], false);

    /**
     * Provides information on invocations that are specifically sent over
     * Ice connections. Remote metrics are embedded within {@link
     * InvocationMetrics}.
     *
     **/
    IceMX.RemoteMetricsDisp = function (_IceMX$ChildInvocatio4) {
        _inherits(_class16, _IceMX$ChildInvocatio4);

        function _class16() {
            _classCallCheck(this, _class16);

            return _possibleConstructorReturn(this, (_class16.__proto__ || Object.getPrototypeOf(_class16)).apply(this, arguments));
        }

        return _class16;
    }(IceMX.ChildInvocationMetricsDisp);

    Slice.defineOperations(IceMX.RemoteMetricsDisp, undefined, iceC_IceMX_RemoteMetrics_ids, 3);

    var iceC_IceMX_InvocationMetrics_ids = ["::Ice::Object", "::IceMX::InvocationMetrics", "::IceMX::Metrics"];

    /**
     * Provide measurements for proxy invocations. Proxy invocations can
     * either be sent over the wire or be collocated.
     *
     **/
    IceMX.InvocationMetrics = function (_IceMX$Metrics4) {
        _inherits(_class17, _IceMX$Metrics4);

        function _class17(id, total, current, totalLifetime, failures) {
            var retry = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;
            var userException = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;
            var remotes = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : null;
            var collocated = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : null;

            _classCallCheck(this, _class17);

            var _this16 = _possibleConstructorReturn(this, (_class17.__proto__ || Object.getPrototypeOf(_class17)).call(this, id, total, current, totalLifetime, failures));

            _this16.retry = retry;
            _this16.userException = userException;
            _this16.remotes = remotes;
            _this16.collocated = collocated;
            return _this16;
        }

        _createClass(_class17, [{
            key: "_iceWriteMemberImpl",
            value: function _iceWriteMemberImpl(ostr) {
                ostr.writeInt(this.retry);
                ostr.writeInt(this.userException);
                IceMX.MetricsMapHelper.write(ostr, this.remotes);
                IceMX.MetricsMapHelper.write(ostr, this.collocated);
            }
        }, {
            key: "_iceReadMemberImpl",
            value: function _iceReadMemberImpl(istr) {
                this.retry = istr.readInt();
                this.userException = istr.readInt();
                this.remotes = IceMX.MetricsMapHelper.read(istr);
                this.collocated = IceMX.MetricsMapHelper.read(istr);
            }
        }]);

        return _class17;
    }(IceMX.Metrics);

    Slice.defineValue(IceMX.InvocationMetrics, iceC_IceMX_InvocationMetrics_ids[1], false);

    /**
     * Provide measurements for proxy invocations. Proxy invocations can
     * either be sent over the wire or be collocated.
     *
     **/
    IceMX.InvocationMetricsDisp = function (_IceMX$MetricsDisp4) {
        _inherits(_class18, _IceMX$MetricsDisp4);

        function _class18() {
            _classCallCheck(this, _class18);

            return _possibleConstructorReturn(this, (_class18.__proto__ || Object.getPrototypeOf(_class18)).apply(this, arguments));
        }

        return _class18;
    }(IceMX.MetricsDisp);

    Slice.defineOperations(IceMX.InvocationMetricsDisp, undefined, iceC_IceMX_InvocationMetrics_ids, 1);

    var iceC_IceMX_ConnectionMetrics_ids = ["::Ice::Object", "::IceMX::ConnectionMetrics", "::IceMX::Metrics"];

    /**
     * Provides information on the data sent and received over Ice
     * connections.
     *
     **/
    IceMX.ConnectionMetrics = function (_IceMX$Metrics5) {
        _inherits(_class19, _IceMX$Metrics5);

        function _class19(id, total, current, totalLifetime, failures) {
            var receivedBytes = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : new Ice.Long(0, 0);
            var sentBytes = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new Ice.Long(0, 0);

            _classCallCheck(this, _class19);

            var _this18 = _possibleConstructorReturn(this, (_class19.__proto__ || Object.getPrototypeOf(_class19)).call(this, id, total, current, totalLifetime, failures));

            _this18.receivedBytes = receivedBytes;
            _this18.sentBytes = sentBytes;
            return _this18;
        }

        _createClass(_class19, [{
            key: "_iceWriteMemberImpl",
            value: function _iceWriteMemberImpl(ostr) {
                ostr.writeLong(this.receivedBytes);
                ostr.writeLong(this.sentBytes);
            }
        }, {
            key: "_iceReadMemberImpl",
            value: function _iceReadMemberImpl(istr) {
                this.receivedBytes = istr.readLong();
                this.sentBytes = istr.readLong();
            }
        }]);

        return _class19;
    }(IceMX.Metrics);

    Slice.defineValue(IceMX.ConnectionMetrics, iceC_IceMX_ConnectionMetrics_ids[1], false);

    /**
     * Provides information on the data sent and received over Ice
     * connections.
     *
     **/
    IceMX.ConnectionMetricsDisp = function (_IceMX$MetricsDisp5) {
        _inherits(_class20, _IceMX$MetricsDisp5);

        function _class20() {
            _classCallCheck(this, _class20);

            return _possibleConstructorReturn(this, (_class20.__proto__ || Object.getPrototypeOf(_class20)).apply(this, arguments));
        }

        return _class20;
    }(IceMX.MetricsDisp);

    Slice.defineOperations(IceMX.ConnectionMetricsDisp, undefined, iceC_IceMX_ConnectionMetrics_ids, 1);
    /* slice2js browser-bundle-skip */
    exports.IceMX = IceMX;
    /* slice2js browser-bundle-skip-end */
    /* slice2js browser-bundle-skip */
})(typeof global !== "undefined" && typeof global.process !== "undefined" ? module : undefined, typeof global !== "undefined" && typeof global.process !== "undefined" ? require : this.Ice._require, typeof global !== "undefined" && typeof global.process !== "undefined" ? exports : this);
/* slice2js browser-bundle-skip-end */