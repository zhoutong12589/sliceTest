function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `Connection.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

/* slice2js browser-bundle-skip */
(function (module, require, exports) {
    /* slice2js browser-bundle-skip-end */
    /* slice2js browser-bundle-skip */
    var _ModuleRegistry = require("../Ice/ModuleRegistry").Ice._ModuleRegistry;
    var Ice = _ModuleRegistry.require(module, ["../Ice/Object", "../Ice/Value", "../Ice/ObjectPrx", "../Ice/Struct", "../Ice/EnumBase", "../Ice/Long", "../Ice/HashMap", "../Ice/HashUtil", "../Ice/ArrayUtil", "../Ice/StreamHelpers", "../Ice/ObjectAdapterF", "../Ice/Identity", "../Ice/Endpoint"]).Ice;

    var Slice = Ice.Slice;
    /* slice2js browser-bundle-skip-end */

    /**
     * The batch compression option when flushing queued batch requests.
     *
     **/
    Ice.CompressBatch = Slice.defineEnum([['Yes', 0], ['No', 1], ['BasedOnProxy', 2]]);

    /**
     * Base class providing access to the connection details. *
     **/
    Ice.ConnectionInfo = function () {
        function _class() {
            var underlying = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
            var incoming = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
            var adapterName = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "";
            var connectionId = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "";

            _classCallCheck(this, _class);

            this.underlying = underlying;
            this.incoming = incoming;
            this.adapterName = adapterName;
            this.connectionId = connectionId;
        }

        return _class;
    }();

    Ice.ACMClose = Slice.defineEnum([['CloseOff', 0], ['CloseOnIdle', 1], ['CloseOnInvocation', 2], ['CloseOnInvocationAndIdle', 3], ['CloseOnIdleForceful', 4]]);

    Ice.ACMHeartbeat = Slice.defineEnum([['HeartbeatOff', 0], ['HeartbeatOnDispatch', 1], ['HeartbeatOnIdle', 2], ['HeartbeatAlways', 3]]);

    Ice.ACM = function () {
        function _class2() {
            var timeout = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
            var close = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Ice.ACMClose.CloseOff;
            var heartbeat = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Ice.ACMHeartbeat.HeartbeatOff;

            _classCallCheck(this, _class2);

            this.timeout = timeout;
            this.close = close;
            this.heartbeat = heartbeat;
        }

        return _class2;
    }();

    Slice.defineStruct(Ice.ACM, true, true);

    /**
     * Determines the behavior when manually closing a connection.
     **/
    Ice.ConnectionClose = Slice.defineEnum([['Forcefully', 0], ['Gracefully', 1], ['GracefullyWithWait', 2]]);

    /**
     * Provides access to the connection details of an IP connection
     *
     **/
    Ice.IPConnectionInfo = function (_Ice$ConnectionInfo) {
        _inherits(_class3, _Ice$ConnectionInfo);

        function _class3(underlying, incoming, adapterName, connectionId) {
            var localAddress = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : "";
            var localPort = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : -1;
            var remoteAddress = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : "";
            var remotePort = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : -1;

            _classCallCheck(this, _class3);

            var _this = _possibleConstructorReturn(this, (_class3.__proto__ || Object.getPrototypeOf(_class3)).call(this, underlying, incoming, adapterName, connectionId));

            _this.localAddress = localAddress;
            _this.localPort = localPort;
            _this.remoteAddress = remoteAddress;
            _this.remotePort = remotePort;
            return _this;
        }

        return _class3;
    }(Ice.ConnectionInfo);

    /**
     * Provides access to the connection details of a TCP connection
     *
     **/
    Ice.TCPConnectionInfo = function (_Ice$IPConnectionInfo) {
        _inherits(_class4, _Ice$IPConnectionInfo);

        function _class4(underlying, incoming, adapterName, connectionId, localAddress, localPort, remoteAddress, remotePort) {
            var rcvSize = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : 0;
            var sndSize = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : 0;

            _classCallCheck(this, _class4);

            var _this2 = _possibleConstructorReturn(this, (_class4.__proto__ || Object.getPrototypeOf(_class4)).call(this, underlying, incoming, adapterName, connectionId, localAddress, localPort, remoteAddress, remotePort));

            _this2.rcvSize = rcvSize;
            _this2.sndSize = sndSize;
            return _this2;
        }

        return _class4;
    }(Ice.IPConnectionInfo);

    /**
     * Provides access to the connection details of a UDP connection
     *
     **/
    Ice.UDPConnectionInfo = function (_Ice$IPConnectionInfo2) {
        _inherits(_class5, _Ice$IPConnectionInfo2);

        function _class5(underlying, incoming, adapterName, connectionId, localAddress, localPort, remoteAddress, remotePort) {
            var mcastAddress = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : "";
            var mcastPort = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : -1;
            var rcvSize = arguments.length > 10 && arguments[10] !== undefined ? arguments[10] : 0;
            var sndSize = arguments.length > 11 && arguments[11] !== undefined ? arguments[11] : 0;

            _classCallCheck(this, _class5);

            var _this3 = _possibleConstructorReturn(this, (_class5.__proto__ || Object.getPrototypeOf(_class5)).call(this, underlying, incoming, adapterName, connectionId, localAddress, localPort, remoteAddress, remotePort));

            _this3.mcastAddress = mcastAddress;
            _this3.mcastPort = mcastPort;
            _this3.rcvSize = rcvSize;
            _this3.sndSize = sndSize;
            return _this3;
        }

        return _class5;
    }(Ice.IPConnectionInfo);

    Slice.defineDictionary(Ice, "HeaderDict", "HeaderDictHelper", "Ice.StringHelper", "Ice.StringHelper", false, undefined, undefined);

    /**
     * Provides access to the connection details of a WebSocket connection
     *
     **/
    Ice.WSConnectionInfo = function (_Ice$ConnectionInfo2) {
        _inherits(_class6, _Ice$ConnectionInfo2);

        function _class6(underlying, incoming, adapterName, connectionId) {
            var headers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;

            _classCallCheck(this, _class6);

            var _this4 = _possibleConstructorReturn(this, (_class6.__proto__ || Object.getPrototypeOf(_class6)).call(this, underlying, incoming, adapterName, connectionId));

            _this4.headers = headers;
            return _this4;
        }

        return _class6;
    }(Ice.ConnectionInfo);

    /* slice2js browser-bundle-skip */
    exports.Ice = Ice;
    /* slice2js browser-bundle-skip-end */
    /* slice2js browser-bundle-skip */
})(typeof global !== "undefined" && typeof global.process !== "undefined" ? module : undefined, typeof global !== "undefined" && typeof global.process !== "undefined" ? require : this.Ice._require, typeof global !== "undefined" && typeof global.process !== "undefined" ? exports : this);
/* slice2js browser-bundle-skip-end */