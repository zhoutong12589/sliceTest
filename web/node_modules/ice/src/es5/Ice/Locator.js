var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `Locator.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

/* slice2js browser-bundle-skip */
(function (module, require, exports) {
    /* slice2js browser-bundle-skip-end */
    /* slice2js browser-bundle-skip */
    var _ModuleRegistry = require("../Ice/ModuleRegistry").Ice._ModuleRegistry;
    var Ice = _ModuleRegistry.require(module, ["../Ice/Object", "../Ice/Value", "../Ice/ObjectPrx", "../Ice/Operation", "../Ice/Exception", "../Ice/Long", "../Ice/HashMap", "../Ice/HashUtil", "../Ice/ArrayUtil", "../Ice/StreamHelpers", "../Ice/Identity", "../Ice/Process"]).Ice;

    var Slice = Ice.Slice;
    /* slice2js browser-bundle-skip-end */

    /**
     * This exception is raised if an adapter cannot be found.
     *
     **/
    Ice.AdapterNotFoundException = function (_Ice$UserException) {
        _inherits(_class, _Ice$UserException);

        function _class() {
            var _cause = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";

            _classCallCheck(this, _class);

            return _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this, _cause));
        }

        _createClass(_class, [{
            key: "_mostDerivedType",
            value: function _mostDerivedType() {
                return Ice.AdapterNotFoundException;
            }
        }], [{
            key: "_parent",
            get: function get() {
                return Ice.UserException;
            }
        }, {
            key: "_id",
            get: function get() {
                return "::Ice::AdapterNotFoundException";
            }
        }]);

        return _class;
    }(Ice.UserException);

    /**
     * This exception is raised if the replica group provided by the
     * server is invalid.
     *
     **/
    Ice.InvalidReplicaGroupIdException = function (_Ice$UserException2) {
        _inherits(_class2, _Ice$UserException2);

        function _class2() {
            var _cause = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";

            _classCallCheck(this, _class2);

            return _possibleConstructorReturn(this, (_class2.__proto__ || Object.getPrototypeOf(_class2)).call(this, _cause));
        }

        _createClass(_class2, [{
            key: "_mostDerivedType",
            value: function _mostDerivedType() {
                return Ice.InvalidReplicaGroupIdException;
            }
        }], [{
            key: "_parent",
            get: function get() {
                return Ice.UserException;
            }
        }, {
            key: "_id",
            get: function get() {
                return "::Ice::InvalidReplicaGroupIdException";
            }
        }]);

        return _class2;
    }(Ice.UserException);

    /**
     * This exception is raised if a server tries to set endpoints for
     * an adapter that is already active.
     *
     **/
    Ice.AdapterAlreadyActiveException = function (_Ice$UserException3) {
        _inherits(_class3, _Ice$UserException3);

        function _class3() {
            var _cause = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";

            _classCallCheck(this, _class3);

            return _possibleConstructorReturn(this, (_class3.__proto__ || Object.getPrototypeOf(_class3)).call(this, _cause));
        }

        _createClass(_class3, [{
            key: "_mostDerivedType",
            value: function _mostDerivedType() {
                return Ice.AdapterAlreadyActiveException;
            }
        }], [{
            key: "_parent",
            get: function get() {
                return Ice.UserException;
            }
        }, {
            key: "_id",
            get: function get() {
                return "::Ice::AdapterAlreadyActiveException";
            }
        }]);

        return _class3;
    }(Ice.UserException);

    /**
     * This exception is raised if an object cannot be found.
     *
     **/
    Ice.ObjectNotFoundException = function (_Ice$UserException4) {
        _inherits(_class4, _Ice$UserException4);

        function _class4() {
            var _cause = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";

            _classCallCheck(this, _class4);

            return _possibleConstructorReturn(this, (_class4.__proto__ || Object.getPrototypeOf(_class4)).call(this, _cause));
        }

        _createClass(_class4, [{
            key: "_mostDerivedType",
            value: function _mostDerivedType() {
                return Ice.ObjectNotFoundException;
            }
        }], [{
            key: "_parent",
            get: function get() {
                return Ice.UserException;
            }
        }, {
            key: "_id",
            get: function get() {
                return "::Ice::ObjectNotFoundException";
            }
        }]);

        return _class4;
    }(Ice.UserException);

    /**
     * This exception is raised if a server cannot be found.
     *
     **/
    Ice.ServerNotFoundException = function (_Ice$UserException5) {
        _inherits(_class5, _Ice$UserException5);

        function _class5() {
            var _cause = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";

            _classCallCheck(this, _class5);

            return _possibleConstructorReturn(this, (_class5.__proto__ || Object.getPrototypeOf(_class5)).call(this, _cause));
        }

        _createClass(_class5, [{
            key: "_mostDerivedType",
            value: function _mostDerivedType() {
                return Ice.ServerNotFoundException;
            }
        }], [{
            key: "_parent",
            get: function get() {
                return Ice.UserException;
            }
        }, {
            key: "_id",
            get: function get() {
                return "::Ice::ServerNotFoundException";
            }
        }]);

        return _class5;
    }(Ice.UserException);

    var iceC_Ice_Locator_ids = ["::Ice::Locator", "::Ice::Object"];

    /**
     * The Ice locator interface. This interface is used by clients to
     * lookup adapters and objects. It is also used by servers to get the
     * locator registry proxy.
     *
     * <p class="Note">The {@link Locator} interface is intended to be used by
     * Ice internals and by locator implementations. Regular user code
     * should not attempt to use any functionality of this interface
     * directly.
     *
     **/
    Ice.Locator = function (_Ice$Object) {
        _inherits(_class6, _Ice$Object);

        function _class6() {
            _classCallCheck(this, _class6);

            return _possibleConstructorReturn(this, (_class6.__proto__ || Object.getPrototypeOf(_class6)).apply(this, arguments));
        }

        return _class6;
    }(Ice.Object);

    Ice.LocatorPrx = function (_Ice$ObjectPrx) {
        _inherits(_class7, _Ice$ObjectPrx);

        function _class7() {
            _classCallCheck(this, _class7);

            return _possibleConstructorReturn(this, (_class7.__proto__ || Object.getPrototypeOf(_class7)).apply(this, arguments));
        }

        return _class7;
    }(Ice.ObjectPrx);

    Slice.defineOperations(Ice.Locator, Ice.LocatorPrx, iceC_Ice_Locator_ids, 0, {
        "findObjectById": [, 2, 1,, [9], [[Ice.Identity]],, [Ice.ObjectNotFoundException],,],
        "findAdapterById": [, 2, 1,, [9], [[7]],, [Ice.AdapterNotFoundException],,],
        "getRegistry": [, 2, 1,, ["Ice.LocatorRegistryPrx"],,,,,]
    });

    var iceC_Ice_LocatorRegistry_ids = ["::Ice::LocatorRegistry", "::Ice::Object"];

    /**
     * The Ice locator registry interface. This interface is used by
     * servers to register adapter endpoints with the locator.
     *
     * <p class="Note"> The {@link LocatorRegistry} interface is intended to be used
     * by Ice internals and by locator implementations. Regular user
     * code should not attempt to use any functionality of this interface
     * directly.
     *
     **/
    Ice.LocatorRegistry = function (_Ice$Object2) {
        _inherits(_class8, _Ice$Object2);

        function _class8() {
            _classCallCheck(this, _class8);

            return _possibleConstructorReturn(this, (_class8.__proto__ || Object.getPrototypeOf(_class8)).apply(this, arguments));
        }

        return _class8;
    }(Ice.Object);

    Ice.LocatorRegistryPrx = function (_Ice$ObjectPrx2) {
        _inherits(_class9, _Ice$ObjectPrx2);

        function _class9() {
            _classCallCheck(this, _class9);

            return _possibleConstructorReturn(this, (_class9.__proto__ || Object.getPrototypeOf(_class9)).apply(this, arguments));
        }

        return _class9;
    }(Ice.ObjectPrx);

    Slice.defineOperations(Ice.LocatorRegistry, Ice.LocatorRegistryPrx, iceC_Ice_LocatorRegistry_ids, 0, {
        "setAdapterDirectProxy": [, 2, 2,,, [[7], [9]],, [Ice.AdapterAlreadyActiveException, Ice.AdapterNotFoundException],,],
        "setReplicatedAdapterDirectProxy": [, 2, 2,,, [[7], [7], [9]],, [Ice.AdapterAlreadyActiveException, Ice.AdapterNotFoundException, Ice.InvalidReplicaGroupIdException],,],
        "setServerProcessProxy": [, 2, 2,,, [[7], ["Ice.ProcessPrx"]],, [Ice.ServerNotFoundException],,]
    });

    var iceC_Ice_LocatorFinder_ids = ["::Ice::LocatorFinder", "::Ice::Object"];

    /**
     * This inferface should be implemented by services implementing the
     * Ice::Locator interface. It should be advertised through an Ice
     * object with the identity `Ice/LocatorFinder'. This allows clients
     * to retrieve the locator proxy with just the endpoint information of
     * the service.
     *
     **/
    Ice.LocatorFinder = function (_Ice$Object3) {
        _inherits(_class10, _Ice$Object3);

        function _class10() {
            _classCallCheck(this, _class10);

            return _possibleConstructorReturn(this, (_class10.__proto__ || Object.getPrototypeOf(_class10)).apply(this, arguments));
        }

        return _class10;
    }(Ice.Object);

    Ice.LocatorFinderPrx = function (_Ice$ObjectPrx3) {
        _inherits(_class11, _Ice$ObjectPrx3);

        function _class11() {
            _classCallCheck(this, _class11);

            return _possibleConstructorReturn(this, (_class11.__proto__ || Object.getPrototypeOf(_class11)).apply(this, arguments));
        }

        return _class11;
    }(Ice.ObjectPrx);

    Slice.defineOperations(Ice.LocatorFinder, Ice.LocatorFinderPrx, iceC_Ice_LocatorFinder_ids, 0, {
        "getLocator": [,,,, ["Ice.LocatorPrx"],,,,,]
    });
    /* slice2js browser-bundle-skip */
    exports.Ice = Ice;
    /* slice2js browser-bundle-skip-end */
    /* slice2js browser-bundle-skip */
})(typeof global !== "undefined" && typeof global.process !== "undefined" ? module : undefined, typeof global !== "undefined" && typeof global.process !== "undefined" ? require : this.Ice._require, typeof global !== "undefined" && typeof global.process !== "undefined" ? exports : this);
/* slice2js browser-bundle-skip-end */