function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `Router.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

/* slice2js browser-bundle-skip */
(function (module, require, exports) {
    /* slice2js browser-bundle-skip-end */
    /* slice2js browser-bundle-skip */
    var _ModuleRegistry = require("../Ice/ModuleRegistry").Ice._ModuleRegistry;
    var Ice = _ModuleRegistry.require(module, ["../Ice/Object", "../Ice/Value", "../Ice/ObjectPrx", "../Ice/Operation", "../Ice/Long", "../Ice/HashMap", "../Ice/HashUtil", "../Ice/ArrayUtil", "../Ice/StreamHelpers", "../Ice/BuiltinSequences"]).Ice;

    var Slice = Ice.Slice;
    /* slice2js browser-bundle-skip-end */

    var iceC_Ice_Router_ids = ["::Ice::Object", "::Ice::Router"];

    /**
     * The Ice router interface. Routers can be set either globally with
     * {@link Communicator#setDefaultRouter}, or with <tt>ice_router</tt> on specific
     * proxies.
     *
     **/
    Ice.Router = function (_Ice$Object) {
        _inherits(_class, _Ice$Object);

        function _class() {
            _classCallCheck(this, _class);

            return _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).apply(this, arguments));
        }

        return _class;
    }(Ice.Object);

    Ice.RouterPrx = function (_Ice$ObjectPrx) {
        _inherits(_class2, _Ice$ObjectPrx);

        function _class2() {
            _classCallCheck(this, _class2);

            return _possibleConstructorReturn(this, (_class2.__proto__ || Object.getPrototypeOf(_class2)).apply(this, arguments));
        }

        return _class2;
    }(Ice.ObjectPrx);

    Slice.defineOperations(Ice.Router, Ice.RouterPrx, iceC_Ice_Router_ids, 1, {
        "getClientProxy": [, 2, 1,, [9],, [[1,, 1]],,,],
        "getServerProxy": [, 2, 1,, [9],,,,,],
        "addProxies": [, 2, 2,, ["Ice.ObjectProxySeqHelper"], [["Ice.ObjectProxySeqHelper"]],,,,]
    });

    var iceC_Ice_RouterFinder_ids = ["::Ice::Object", "::Ice::RouterFinder"];

    /**
     * This inferface should be implemented by services implementing the
     * Ice::Router interface. It should be advertised through an Ice
     * object with the identity `Ice/RouterFinder'. This allows clients to
     * retrieve the router proxy with just the endpoint information of the
     * service.
     *
     **/
    Ice.RouterFinder = function (_Ice$Object2) {
        _inherits(_class3, _Ice$Object2);

        function _class3() {
            _classCallCheck(this, _class3);

            return _possibleConstructorReturn(this, (_class3.__proto__ || Object.getPrototypeOf(_class3)).apply(this, arguments));
        }

        return _class3;
    }(Ice.Object);

    Ice.RouterFinderPrx = function (_Ice$ObjectPrx2) {
        _inherits(_class4, _Ice$ObjectPrx2);

        function _class4() {
            _classCallCheck(this, _class4);

            return _possibleConstructorReturn(this, (_class4.__proto__ || Object.getPrototypeOf(_class4)).apply(this, arguments));
        }

        return _class4;
    }(Ice.ObjectPrx);

    Slice.defineOperations(Ice.RouterFinder, Ice.RouterFinderPrx, iceC_Ice_RouterFinder_ids, 1, {
        "getRouter": [,,,, ["Ice.RouterPrx"],,,,,]
    });
    /* slice2js browser-bundle-skip */
    exports.Ice = Ice;
    /* slice2js browser-bundle-skip-end */
    /* slice2js browser-bundle-skip */
})(typeof global !== "undefined" && typeof global.process !== "undefined" ? module : undefined, typeof global !== "undefined" && typeof global.process !== "undefined" ? require : this.Ice._require, typeof global !== "undefined" && typeof global.process !== "undefined" ? exports : this);
/* slice2js browser-bundle-skip-end */