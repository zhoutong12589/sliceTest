// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `Router.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

/* slice2js browser-bundle-skip */
(function(module, require, exports)
{
/* slice2js browser-bundle-skip-end */
/* slice2js browser-bundle-skip */
    const _ModuleRegistry = require("../Ice/ModuleRegistry").Ice._ModuleRegistry;
    const Glacier2 = _ModuleRegistry.require(module,
    [
        "../Glacier2/Session",
        "../Glacier2/PermissionsVerifier"
    ]).Glacier2;

    const Ice = _ModuleRegistry.require(module,
    [
        "../Ice/Object",
        "../Ice/Value",
        "../Ice/ObjectPrx",
        "../Ice/Operation",
        "../Ice/Exception",
        "../Ice/Long",
        "../Ice/HashMap",
        "../Ice/HashUtil",
        "../Ice/ArrayUtil",
        "../Ice/StreamHelpers",
        "../Ice/Router"
    ]).Ice;

    const Slice = Ice.Slice;
/* slice2js browser-bundle-skip-end */

    /**
     * This exception is raised if a client tries to destroy a session
     * with a router, but no session exists for the client.
     *
     * @see Router#destroySession
     *
     **/
    Glacier2.SessionNotExistException = class extends Ice.UserException
    {
        constructor(_cause = "")
        {
            super(_cause);
        }

        static get _parent()
        {
            return Ice.UserException;
        }

        static get _id()
        {
            return "::Glacier2::SessionNotExistException";
        }

        _mostDerivedType()
        {
            return Glacier2.SessionNotExistException;
        }
    };

    const iceC_Glacier2_Router_ids = [
        "::Glacier2::Router",
        "::Ice::Object",
        "::Ice::Router"
    ];

    /**
     * The Glacier2 specialization of the <tt>Ice::Router</tt> interface.
     *
     **/
    Glacier2.Router = class extends Ice.Object
    {
        static get _iceImplements()
        {
            return [
                Ice.Router
            ];
        }
    };

    Glacier2.RouterPrx = class extends Ice.ObjectPrx
    {
        static get _implements()
        {
            return [
                Ice.RouterPrx];
        }
    };

    Slice.defineOperations(Glacier2.Router, Glacier2.RouterPrx, iceC_Glacier2_Router_ids, 0,
    {
        "getCategoryForClient": [, 2, 1, , [7], , , , , ],
        "createSession": [, , , 2, ["Glacier2.SessionPrx"], [[7], [7]], ,
        [
            Glacier2.CannotCreateSessionException,
            Glacier2.PermissionDeniedException
        ], , ],
        "createSessionFromSecureConnection": [, , , 2, ["Glacier2.SessionPrx"], , ,
        [
            Glacier2.CannotCreateSessionException,
            Glacier2.PermissionDeniedException
        ], , ],
        "refreshSession": [, , , , , , ,
        [
            Glacier2.SessionNotExistException
        ], , ],
        "destroySession": [, , , , , , ,
        [
            Glacier2.SessionNotExistException
        ], , ],
        "getSessionTimeout": [, 2, 1, , [4], , , , , ],
        "getACMTimeout": [, 2, 1, , [3], , , , , ]
    });
/* slice2js browser-bundle-skip */
    exports.Glacier2 = Glacier2;
/* slice2js browser-bundle-skip-end */
/* slice2js browser-bundle-skip */
}
(typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? module : undefined,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? require : this.Ice._require,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? exports : this));
/* slice2js browser-bundle-skip-end */
