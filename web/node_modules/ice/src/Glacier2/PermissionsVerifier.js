// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `PermissionsVerifier.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

/* slice2js browser-bundle-skip */
(function(module, require, exports)
{
/* slice2js browser-bundle-skip-end */
/* slice2js browser-bundle-skip */
    const _ModuleRegistry = require("../Ice/ModuleRegistry").Ice._ModuleRegistry;
    const Glacier2 = require("../Glacier2/SSLInfo").Glacier2;
    const Ice = _ModuleRegistry.require(module,
    [
        "../Ice/Object",
        "../Ice/Value",
        "../Ice/ObjectPrx",
        "../Ice/Operation",
        "../Ice/Exception",
        "../Ice/Long",
        "../Ice/HashMap",
        "../Ice/HashUtil",
        "../Ice/ArrayUtil",
        "../Ice/StreamHelpers"
    ]).Ice;

    const Slice = Ice.Slice;
/* slice2js browser-bundle-skip-end */

    /**
     * This exception is raised if a client is denied the ability to create
     * a session with the router.
     *
     **/
    Glacier2.PermissionDeniedException = class extends Ice.UserException
    {
        constructor(reason = "", _cause = "")
        {
            super(_cause);
            this.reason = reason;
        }

        static get _parent()
        {
            return Ice.UserException;
        }

        static get _id()
        {
            return "::Glacier2::PermissionDeniedException";
        }

        _mostDerivedType()
        {
            return Glacier2.PermissionDeniedException;
        }

        _writeMemberImpl(ostr)
        {
            ostr.writeString(this.reason);
        }

        _readMemberImpl(istr)
        {
            this.reason = istr.readString();
        }
    };

    Slice.PreservedUserException(Glacier2.PermissionDeniedException);

    const iceC_Glacier2_PermissionsVerifier_ids = [
        "::Glacier2::PermissionsVerifier",
        "::Ice::Object"
    ];

    /**
     * The Glacier2 permissions verifier. This is called through the
     * process of establishing a session.
     *
     * @see Router
     *
     **/
    Glacier2.PermissionsVerifier = class extends Ice.Object
    {
    };

    Glacier2.PermissionsVerifierPrx = class extends Ice.ObjectPrx
    {
    };

    Slice.defineOperations(Glacier2.PermissionsVerifier, Glacier2.PermissionsVerifierPrx, iceC_Glacier2_PermissionsVerifier_ids, 0,
    {
        "checkPermissions": [, 2, 1, 2, [1], [[7], [7]], [[7]],
        [
            Glacier2.PermissionDeniedException
        ], , ]
    });

    const iceC_Glacier2_SSLPermissionsVerifier_ids = [
        "::Glacier2::SSLPermissionsVerifier",
        "::Ice::Object"
    ];

    /**
     * The SSL Glacier2 permissions verifier. This is called through the
     * process of establishing a session.
     *
     * @see Router
     *
     **/
    Glacier2.SSLPermissionsVerifier = class extends Ice.Object
    {
    };

    Glacier2.SSLPermissionsVerifierPrx = class extends Ice.ObjectPrx
    {
    };

    Slice.defineOperations(Glacier2.SSLPermissionsVerifier, Glacier2.SSLPermissionsVerifierPrx, iceC_Glacier2_SSLPermissionsVerifier_ids, 0,
    {
        "authorize": [, 2, 1, 2, [1], [[Glacier2.SSLInfo]], [[7]],
        [
            Glacier2.PermissionDeniedException
        ], , ]
    });
/* slice2js browser-bundle-skip */
    exports.Glacier2 = Glacier2;
/* slice2js browser-bundle-skip-end */
/* slice2js browser-bundle-skip */
}
(typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? module : undefined,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? require : this.Ice._require,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? exports : this));
/* slice2js browser-bundle-skip-end */
