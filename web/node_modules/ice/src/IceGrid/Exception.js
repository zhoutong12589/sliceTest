// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `Exception.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

/* slice2js browser-bundle-skip */
(function(module, require, exports)
{
/* slice2js browser-bundle-skip-end */
/* slice2js browser-bundle-skip */
    const _ModuleRegistry = require("../Ice/ModuleRegistry").Ice._ModuleRegistry;
    const Ice = _ModuleRegistry.require(module,
    [
        "../Ice/Exception",
        "../Ice/Long",
        "../Ice/HashMap",
        "../Ice/HashUtil",
        "../Ice/ArrayUtil",
        "../Ice/StreamHelpers",
        "../Ice/Identity",
        "../Ice/BuiltinSequences"
    ]).Ice;

    const Slice = Ice.Slice;
/* slice2js browser-bundle-skip-end */
/* slice2js browser-bundle-skip */

    let IceGrid = _ModuleRegistry.module("IceGrid");
/* slice2js browser-bundle-skip-end */

    /**
     * This exception is raised if an application does not exist.
     *
     **/
    IceGrid.ApplicationNotExistException = class extends Ice.UserException
    {
        constructor(name = "", _cause = "")
        {
            super(_cause);
            this.name = name;
        }

        static get _parent()
        {
            return Ice.UserException;
        }

        static get _id()
        {
            return "::IceGrid::ApplicationNotExistException";
        }

        _mostDerivedType()
        {
            return IceGrid.ApplicationNotExistException;
        }

        _writeMemberImpl(ostr)
        {
            ostr.writeString(this.name);
        }

        _readMemberImpl(istr)
        {
            this.name = istr.readString();
        }
    };

    /**
     * This exception is raised if a server does not exist.
     *
     **/
    IceGrid.ServerNotExistException = class extends Ice.UserException
    {
        constructor(id = "", _cause = "")
        {
            super(_cause);
            this.id = id;
        }

        static get _parent()
        {
            return Ice.UserException;
        }

        static get _id()
        {
            return "::IceGrid::ServerNotExistException";
        }

        _mostDerivedType()
        {
            return IceGrid.ServerNotExistException;
        }

        _writeMemberImpl(ostr)
        {
            ostr.writeString(this.id);
        }

        _readMemberImpl(istr)
        {
            this.id = istr.readString();
        }
    };

    /**
     * This exception is raised if a server failed to start.
     *
     **/
    IceGrid.ServerStartException = class extends Ice.UserException
    {
        constructor(id = "", reason = "", _cause = "")
        {
            super(_cause);
            this.id = id;
            this.reason = reason;
        }

        static get _parent()
        {
            return Ice.UserException;
        }

        static get _id()
        {
            return "::IceGrid::ServerStartException";
        }

        _mostDerivedType()
        {
            return IceGrid.ServerStartException;
        }

        _writeMemberImpl(ostr)
        {
            ostr.writeString(this.id);
            ostr.writeString(this.reason);
        }

        _readMemberImpl(istr)
        {
            this.id = istr.readString();
            this.reason = istr.readString();
        }
    };

    /**
     * This exception is raised if a server failed to stop.
     *
     **/
    IceGrid.ServerStopException = class extends Ice.UserException
    {
        constructor(id = "", reason = "", _cause = "")
        {
            super(_cause);
            this.id = id;
            this.reason = reason;
        }

        static get _parent()
        {
            return Ice.UserException;
        }

        static get _id()
        {
            return "::IceGrid::ServerStopException";
        }

        _mostDerivedType()
        {
            return IceGrid.ServerStopException;
        }

        _writeMemberImpl(ostr)
        {
            ostr.writeString(this.id);
            ostr.writeString(this.reason);
        }

        _readMemberImpl(istr)
        {
            this.id = istr.readString();
            this.reason = istr.readString();
        }
    };

    /**
     * This exception is raised if an adapter does not exist.
     *
     **/
    IceGrid.AdapterNotExistException = class extends Ice.UserException
    {
        constructor(id = "", _cause = "")
        {
            super(_cause);
            this.id = id;
        }

        static get _parent()
        {
            return Ice.UserException;
        }

        static get _id()
        {
            return "::IceGrid::AdapterNotExistException";
        }

        _mostDerivedType()
        {
            return IceGrid.AdapterNotExistException;
        }

        _writeMemberImpl(ostr)
        {
            ostr.writeString(this.id);
        }

        _readMemberImpl(istr)
        {
            this.id = istr.readString();
        }
    };

    /**
     * This exception is raised if an object already exists.
     *
     **/
    IceGrid.ObjectExistsException = class extends Ice.UserException
    {
        constructor(id = new Ice.Identity(), _cause = "")
        {
            super(_cause);
            this.id = id;
        }

        static get _parent()
        {
            return Ice.UserException;
        }

        static get _id()
        {
            return "::IceGrid::ObjectExistsException";
        }

        _mostDerivedType()
        {
            return IceGrid.ObjectExistsException;
        }

        _writeMemberImpl(ostr)
        {
            Ice.Identity.write(ostr, this.id);
        }

        _readMemberImpl(istr)
        {
            this.id = Ice.Identity.read(istr, this.id);
        }
    };

    /**
     * This exception is raised if an object is not registered.
     *
     **/
    IceGrid.ObjectNotRegisteredException = class extends Ice.UserException
    {
        constructor(id = new Ice.Identity(), _cause = "")
        {
            super(_cause);
            this.id = id;
        }

        static get _parent()
        {
            return Ice.UserException;
        }

        static get _id()
        {
            return "::IceGrid::ObjectNotRegisteredException";
        }

        _mostDerivedType()
        {
            return IceGrid.ObjectNotRegisteredException;
        }

        _writeMemberImpl(ostr)
        {
            Ice.Identity.write(ostr, this.id);
        }

        _readMemberImpl(istr)
        {
            this.id = Ice.Identity.read(istr, this.id);
        }
    };

    /**
     * This exception is raised if a node does not exist.
     *
     **/
    IceGrid.NodeNotExistException = class extends Ice.UserException
    {
        constructor(name = "", _cause = "")
        {
            super(_cause);
            this.name = name;
        }

        static get _parent()
        {
            return Ice.UserException;
        }

        static get _id()
        {
            return "::IceGrid::NodeNotExistException";
        }

        _mostDerivedType()
        {
            return IceGrid.NodeNotExistException;
        }

        _writeMemberImpl(ostr)
        {
            ostr.writeString(this.name);
        }

        _readMemberImpl(istr)
        {
            this.name = istr.readString();
        }
    };

    /**
     * This exception is raised if a registry does not exist.
     *
     **/
    IceGrid.RegistryNotExistException = class extends Ice.UserException
    {
        constructor(name = "", _cause = "")
        {
            super(_cause);
            this.name = name;
        }

        static get _parent()
        {
            return Ice.UserException;
        }

        static get _id()
        {
            return "::IceGrid::RegistryNotExistException";
        }

        _mostDerivedType()
        {
            return IceGrid.RegistryNotExistException;
        }

        _writeMemberImpl(ostr)
        {
            ostr.writeString(this.name);
        }

        _readMemberImpl(istr)
        {
            this.name = istr.readString();
        }
    };

    /**
     * An exception for deployment errors.
     *
     **/
    IceGrid.DeploymentException = class extends Ice.UserException
    {
        constructor(reason = "", _cause = "")
        {
            super(_cause);
            this.reason = reason;
        }

        static get _parent()
        {
            return Ice.UserException;
        }

        static get _id()
        {
            return "::IceGrid::DeploymentException";
        }

        _mostDerivedType()
        {
            return IceGrid.DeploymentException;
        }

        _writeMemberImpl(ostr)
        {
            ostr.writeString(this.reason);
        }

        _readMemberImpl(istr)
        {
            this.reason = istr.readString();
        }
    };

    /**
     * This exception is raised if a node could not be reached.
     *
     **/
    IceGrid.NodeUnreachableException = class extends Ice.UserException
    {
        constructor(name = "", reason = "", _cause = "")
        {
            super(_cause);
            this.name = name;
            this.reason = reason;
        }

        static get _parent()
        {
            return Ice.UserException;
        }

        static get _id()
        {
            return "::IceGrid::NodeUnreachableException";
        }

        _mostDerivedType()
        {
            return IceGrid.NodeUnreachableException;
        }

        _writeMemberImpl(ostr)
        {
            ostr.writeString(this.name);
            ostr.writeString(this.reason);
        }

        _readMemberImpl(istr)
        {
            this.name = istr.readString();
            this.reason = istr.readString();
        }
    };

    /**
     * This exception is raised if a server could not be reached.
     *
     **/
    IceGrid.ServerUnreachableException = class extends Ice.UserException
    {
        constructor(name = "", reason = "", _cause = "")
        {
            super(_cause);
            this.name = name;
            this.reason = reason;
        }

        static get _parent()
        {
            return Ice.UserException;
        }

        static get _id()
        {
            return "::IceGrid::ServerUnreachableException";
        }

        _mostDerivedType()
        {
            return IceGrid.ServerUnreachableException;
        }

        _writeMemberImpl(ostr)
        {
            ostr.writeString(this.name);
            ostr.writeString(this.reason);
        }

        _readMemberImpl(istr)
        {
            this.name = istr.readString();
            this.reason = istr.readString();
        }
    };

    /**
     * This exception is raised if a registry could not be reached.
     *
     **/
    IceGrid.RegistryUnreachableException = class extends Ice.UserException
    {
        constructor(name = "", reason = "", _cause = "")
        {
            super(_cause);
            this.name = name;
            this.reason = reason;
        }

        static get _parent()
        {
            return Ice.UserException;
        }

        static get _id()
        {
            return "::IceGrid::RegistryUnreachableException";
        }

        _mostDerivedType()
        {
            return IceGrid.RegistryUnreachableException;
        }

        _writeMemberImpl(ostr)
        {
            ostr.writeString(this.name);
            ostr.writeString(this.reason);
        }

        _readMemberImpl(istr)
        {
            this.name = istr.readString();
            this.reason = istr.readString();
        }
    };

    /**
     * This exception is raised if an unknown signal was sent to
     * to a server.
     *
     **/
    IceGrid.BadSignalException = class extends Ice.UserException
    {
        constructor(reason = "", _cause = "")
        {
            super(_cause);
            this.reason = reason;
        }

        static get _parent()
        {
            return Ice.UserException;
        }

        static get _id()
        {
            return "::IceGrid::BadSignalException";
        }

        _mostDerivedType()
        {
            return IceGrid.BadSignalException;
        }

        _writeMemberImpl(ostr)
        {
            ostr.writeString(this.reason);
        }

        _readMemberImpl(istr)
        {
            this.reason = istr.readString();
        }
    };

    /**
     * This exception is raised if a patch failed.
     *
     **/
    IceGrid.PatchException = class extends Ice.UserException
    {
        constructor(reasons = null, _cause = "")
        {
            super(_cause);
            this.reasons = reasons;
        }

        static get _parent()
        {
            return Ice.UserException;
        }

        static get _id()
        {
            return "::IceGrid::PatchException";
        }

        _mostDerivedType()
        {
            return IceGrid.PatchException;
        }

        _writeMemberImpl(ostr)
        {
            Ice.StringSeqHelper.write(ostr, this.reasons);
        }

        _readMemberImpl(istr)
        {
            this.reasons = Ice.StringSeqHelper.read(istr);
        }
    };

    /**
     * This exception is raised if a registry lock wasn't
     * acquired or is already held by a session.
     *
     **/
    IceGrid.AccessDeniedException = class extends Ice.UserException
    {
        constructor(lockUserId = "", _cause = "")
        {
            super(_cause);
            this.lockUserId = lockUserId;
        }

        static get _parent()
        {
            return Ice.UserException;
        }

        static get _id()
        {
            return "::IceGrid::AccessDeniedException";
        }

        _mostDerivedType()
        {
            return IceGrid.AccessDeniedException;
        }

        _writeMemberImpl(ostr)
        {
            ostr.writeString(this.lockUserId);
        }

        _readMemberImpl(istr)
        {
            this.lockUserId = istr.readString();
        }
    };

    /**
     * This exception is raised if the allocation of an object failed.
     *
     **/
    IceGrid.AllocationException = class extends Ice.UserException
    {
        constructor(reason = "", _cause = "")
        {
            super(_cause);
            this.reason = reason;
        }

        static get _parent()
        {
            return Ice.UserException;
        }

        static get _id()
        {
            return "::IceGrid::AllocationException";
        }

        _mostDerivedType()
        {
            return IceGrid.AllocationException;
        }

        _writeMemberImpl(ostr)
        {
            ostr.writeString(this.reason);
        }

        _readMemberImpl(istr)
        {
            this.reason = istr.readString();
        }
    };

    /**
     * This exception is raised if the request to allocate an object times
     * out.
     *
     **/
    IceGrid.AllocationTimeoutException = class extends IceGrid.AllocationException
    {
        constructor(reason, _cause = "")
        {
            super(reason, _cause);
        }

        static get _parent()
        {
            return IceGrid.AllocationException;
        }

        static get _id()
        {
            return "::IceGrid::AllocationTimeoutException";
        }

        _mostDerivedType()
        {
            return IceGrid.AllocationTimeoutException;
        }
    };

    /**
     * This exception is raised if a client is denied the ability to create
     * a session with IceGrid.
     *
     **/
    IceGrid.PermissionDeniedException = class extends Ice.UserException
    {
        constructor(reason = "", _cause = "")
        {
            super(_cause);
            this.reason = reason;
        }

        static get _parent()
        {
            return Ice.UserException;
        }

        static get _id()
        {
            return "::IceGrid::PermissionDeniedException";
        }

        _mostDerivedType()
        {
            return IceGrid.PermissionDeniedException;
        }

        _writeMemberImpl(ostr)
        {
            ostr.writeString(this.reason);
        }

        _readMemberImpl(istr)
        {
            this.reason = istr.readString();
        }
    };

    /**
     * This exception is raised if an observer is already registered with
     * the registry.
     *
     * @see AdminSession#setObservers
     * @see AdminSession#setObserversByIdentity
     *
     **/
    IceGrid.ObserverAlreadyRegisteredException = class extends Ice.UserException
    {
        constructor(id = new Ice.Identity(), _cause = "")
        {
            super(_cause);
            this.id = id;
        }

        static get _parent()
        {
            return Ice.UserException;
        }

        static get _id()
        {
            return "::IceGrid::ObserverAlreadyRegisteredException";
        }

        _mostDerivedType()
        {
            return IceGrid.ObserverAlreadyRegisteredException;
        }

        _writeMemberImpl(ostr)
        {
            Ice.Identity.write(ostr, this.id);
        }

        _readMemberImpl(istr)
        {
            this.id = Ice.Identity.read(istr, this.id);
        }
    };

    /**
     * This exception is raised if a file is not available.
     *
     * @see AdminSession#openServerStdOut
     * @see AdminSession#openServerStdErr
     * @see AdminSession#openNodeStdOut
     * @see AdminSession#openNodeStdErr
     * @see AdminSession#openRegistryStdOut
     * @see AdminSession#openRegistryStdErr
     *
     **/
    IceGrid.FileNotAvailableException = class extends Ice.UserException
    {
        constructor(reason = "", _cause = "")
        {
            super(_cause);
            this.reason = reason;
        }

        static get _parent()
        {
            return Ice.UserException;
        }

        static get _id()
        {
            return "::IceGrid::FileNotAvailableException";
        }

        _mostDerivedType()
        {
            return IceGrid.FileNotAvailableException;
        }

        _writeMemberImpl(ostr)
        {
            ostr.writeString(this.reason);
        }

        _readMemberImpl(istr)
        {
            this.reason = istr.readString();
        }
    };
/* slice2js browser-bundle-skip */
    exports.IceGrid = IceGrid;
/* slice2js browser-bundle-skip-end */
/* slice2js browser-bundle-skip */
}
(typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? module : undefined,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? require : this.Ice._require,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? exports : this));
/* slice2js browser-bundle-skip-end */
