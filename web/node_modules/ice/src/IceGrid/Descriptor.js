// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `Descriptor.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

/* slice2js browser-bundle-skip */
(function(module, require, exports)
{
/* slice2js browser-bundle-skip-end */
/* slice2js browser-bundle-skip */
    const _ModuleRegistry = require("../Ice/ModuleRegistry").Ice._ModuleRegistry;
    const Ice = _ModuleRegistry.require(module,
    [
        "../Ice/Object",
        "../Ice/Value",
        "../Ice/ObjectPrx",
        "../Ice/Struct",
        "../Ice/Long",
        "../Ice/HashMap",
        "../Ice/HashUtil",
        "../Ice/ArrayUtil",
        "../Ice/StreamHelpers",
        "../Ice/Identity",
        "../Ice/BuiltinSequences"
    ]).Ice;

    const Slice = Ice.Slice;
/* slice2js browser-bundle-skip-end */
/* slice2js browser-bundle-skip */

    let IceGrid = _ModuleRegistry.module("IceGrid");
/* slice2js browser-bundle-skip-end */

    Slice.defineDictionary(IceGrid, "StringStringDict", "StringStringDictHelper", "Ice.StringHelper", "Ice.StringHelper", false, undefined, undefined);

    /**
     * Property descriptor.
     *
     **/
    IceGrid.PropertyDescriptor = class
    {
        constructor(name = "", value = "")
        {
            this.name = name;
            this.value = value;
        }

        _write(ostr)
        {
            ostr.writeString(this.name);
            ostr.writeString(this.value);
        }

        _read(istr)
        {
            this.name = istr.readString();
            this.value = istr.readString();
        }

        static get minWireSize()
        {
            return  2;
        }
    };

    Slice.defineStruct(IceGrid.PropertyDescriptor, true, true);

    Slice.defineSequence(IceGrid, "PropertyDescriptorSeqHelper", "IceGrid.PropertyDescriptor", false);

    /**
     * A property set descriptor.
     *
     **/
    IceGrid.PropertySetDescriptor = class
    {
        constructor(references = null, properties = null)
        {
            this.references = references;
            this.properties = properties;
        }

        _write(ostr)
        {
            Ice.StringSeqHelper.write(ostr, this.references);
            IceGrid.PropertyDescriptorSeqHelper.write(ostr, this.properties);
        }

        _read(istr)
        {
            this.references = Ice.StringSeqHelper.read(istr);
            this.properties = IceGrid.PropertyDescriptorSeqHelper.read(istr);
        }

        static get minWireSize()
        {
            return  2;
        }
    };

    Slice.defineStruct(IceGrid.PropertySetDescriptor, true, true);

    Slice.defineDictionary(IceGrid, "PropertySetDescriptorDict", "PropertySetDescriptorDictHelper", "Ice.StringHelper", "IceGrid.PropertySetDescriptor", false, undefined, undefined);

    /**
     * An Ice object descriptor.
     *
     **/
    IceGrid.ObjectDescriptor = class
    {
        constructor(id = new Ice.Identity(), type = "", proxyOptions = "")
        {
            this.id = id;
            this.type = type;
            this.proxyOptions = proxyOptions;
        }

        _write(ostr)
        {
            Ice.Identity.write(ostr, this.id);
            ostr.writeString(this.type);
            ostr.writeString(this.proxyOptions);
        }

        _read(istr)
        {
            this.id = Ice.Identity.read(istr, this.id);
            this.type = istr.readString();
            this.proxyOptions = istr.readString();
        }

        static get minWireSize()
        {
            return  4;
        }
    };

    Slice.defineStruct(IceGrid.ObjectDescriptor, true, true);

    Slice.defineSequence(IceGrid, "ObjectDescriptorSeqHelper", "IceGrid.ObjectDescriptor", false);

    /**
     * An Ice object adapter descriptor.
     *
     **/
    IceGrid.AdapterDescriptor = class
    {
        constructor(name = "", description = "", id = "", replicaGroupId = "", priority = "", registerProcess = false, serverLifetime = false, objects = null, allocatables = null)
        {
            this.name = name;
            this.description = description;
            this.id = id;
            this.replicaGroupId = replicaGroupId;
            this.priority = priority;
            this.registerProcess = registerProcess;
            this.serverLifetime = serverLifetime;
            this.objects = objects;
            this.allocatables = allocatables;
        }

        _write(ostr)
        {
            ostr.writeString(this.name);
            ostr.writeString(this.description);
            ostr.writeString(this.id);
            ostr.writeString(this.replicaGroupId);
            ostr.writeString(this.priority);
            ostr.writeBool(this.registerProcess);
            ostr.writeBool(this.serverLifetime);
            IceGrid.ObjectDescriptorSeqHelper.write(ostr, this.objects);
            IceGrid.ObjectDescriptorSeqHelper.write(ostr, this.allocatables);
        }

        _read(istr)
        {
            this.name = istr.readString();
            this.description = istr.readString();
            this.id = istr.readString();
            this.replicaGroupId = istr.readString();
            this.priority = istr.readString();
            this.registerProcess = istr.readBool();
            this.serverLifetime = istr.readBool();
            this.objects = IceGrid.ObjectDescriptorSeqHelper.read(istr);
            this.allocatables = IceGrid.ObjectDescriptorSeqHelper.read(istr);
        }

        static get minWireSize()
        {
            return  9;
        }
    };

    Slice.defineStruct(IceGrid.AdapterDescriptor, true, true);

    Slice.defineSequence(IceGrid, "AdapterDescriptorSeqHelper", "IceGrid.AdapterDescriptor", false);

    /**
     * A Freeze database environment descriptor.
     *
     **/
    IceGrid.DbEnvDescriptor = class
    {
        constructor(name = "", description = "", dbHome = "", properties = null)
        {
            this.name = name;
            this.description = description;
            this.dbHome = dbHome;
            this.properties = properties;
        }

        _write(ostr)
        {
            ostr.writeString(this.name);
            ostr.writeString(this.description);
            ostr.writeString(this.dbHome);
            IceGrid.PropertyDescriptorSeqHelper.write(ostr, this.properties);
        }

        _read(istr)
        {
            this.name = istr.readString();
            this.description = istr.readString();
            this.dbHome = istr.readString();
            this.properties = IceGrid.PropertyDescriptorSeqHelper.read(istr);
        }

        static get minWireSize()
        {
            return  4;
        }
    };

    Slice.defineStruct(IceGrid.DbEnvDescriptor, true, true);

    Slice.defineSequence(IceGrid, "DbEnvDescriptorSeqHelper", "IceGrid.DbEnvDescriptor", false);

    const iceC_IceGrid_CommunicatorDescriptor_ids = [
        "::Ice::Object",
        "::IceGrid::CommunicatorDescriptor"
    ];

    /**
     * A communicator descriptor.
     *
     **/
    IceGrid.CommunicatorDescriptor = class extends Ice.Value
    {
        constructor(adapters = null, propertySet = new IceGrid.PropertySetDescriptor(), dbEnvs = null, logs = null, description = "")
        {
            super();
            this.adapters = adapters;
            this.propertySet = propertySet;
            this.dbEnvs = dbEnvs;
            this.logs = logs;
            this.description = description;
        }

        _iceWriteMemberImpl(ostr)
        {
            IceGrid.AdapterDescriptorSeqHelper.write(ostr, this.adapters);
            IceGrid.PropertySetDescriptor.write(ostr, this.propertySet);
            IceGrid.DbEnvDescriptorSeqHelper.write(ostr, this.dbEnvs);
            Ice.StringSeqHelper.write(ostr, this.logs);
            ostr.writeString(this.description);
        }

        _iceReadMemberImpl(istr)
        {
            this.adapters = IceGrid.AdapterDescriptorSeqHelper.read(istr);
            this.propertySet = IceGrid.PropertySetDescriptor.read(istr, this.propertySet);
            this.dbEnvs = IceGrid.DbEnvDescriptorSeqHelper.read(istr);
            this.logs = Ice.StringSeqHelper.read(istr);
            this.description = istr.readString();
        }
    };

    Slice.defineValue(IceGrid.CommunicatorDescriptor, iceC_IceGrid_CommunicatorDescriptor_ids[1], false);

    /**
     * A communicator descriptor.
     *
     **/
    IceGrid.CommunicatorDescriptorDisp = class extends Ice.Object
    {
    };

    Slice.defineOperations(IceGrid.CommunicatorDescriptorDisp, undefined, iceC_IceGrid_CommunicatorDescriptor_ids, 1);

    /**
     * A distribution descriptor defines an IcePatch2 server and the
     * directories to retrieve from the patch server.
     *
     **/
    IceGrid.DistributionDescriptor = class
    {
        constructor(icepatch = "", directories = null)
        {
            this.icepatch = icepatch;
            this.directories = directories;
        }

        _write(ostr)
        {
            ostr.writeString(this.icepatch);
            Ice.StringSeqHelper.write(ostr, this.directories);
        }

        _read(istr)
        {
            this.icepatch = istr.readString();
            this.directories = Ice.StringSeqHelper.read(istr);
        }

        static get minWireSize()
        {
            return  2;
        }
    };

    Slice.defineStruct(IceGrid.DistributionDescriptor, true, true);

    const iceC_IceGrid_ServerDescriptor_ids = [
        "::Ice::Object",
        "::IceGrid::CommunicatorDescriptor",
        "::IceGrid::ServerDescriptor"
    ];

    /**
     * An Ice server descriptor.
     *
     **/
    IceGrid.ServerDescriptor = class extends IceGrid.CommunicatorDescriptor
    {
        constructor(adapters, propertySet, dbEnvs, logs, description, id = "", exe = "", iceVersion = "", pwd = "", options = null, envs = null, activation = "", activationTimeout = "", deactivationTimeout = "", applicationDistrib = false, distrib = new IceGrid.DistributionDescriptor(), allocatable = false, user = "")
        {
            super(adapters, propertySet, dbEnvs, logs, description);
            this.id = id;
            this.exe = exe;
            this.iceVersion = iceVersion;
            this.pwd = pwd;
            this.options = options;
            this.envs = envs;
            this.activation = activation;
            this.activationTimeout = activationTimeout;
            this.deactivationTimeout = deactivationTimeout;
            this.applicationDistrib = applicationDistrib;
            this.distrib = distrib;
            this.allocatable = allocatable;
            this.user = user;
        }

        _iceWriteMemberImpl(ostr)
        {
            ostr.writeString(this.id);
            ostr.writeString(this.exe);
            ostr.writeString(this.iceVersion);
            ostr.writeString(this.pwd);
            Ice.StringSeqHelper.write(ostr, this.options);
            Ice.StringSeqHelper.write(ostr, this.envs);
            ostr.writeString(this.activation);
            ostr.writeString(this.activationTimeout);
            ostr.writeString(this.deactivationTimeout);
            ostr.writeBool(this.applicationDistrib);
            IceGrid.DistributionDescriptor.write(ostr, this.distrib);
            ostr.writeBool(this.allocatable);
            ostr.writeString(this.user);
        }

        _iceReadMemberImpl(istr)
        {
            this.id = istr.readString();
            this.exe = istr.readString();
            this.iceVersion = istr.readString();
            this.pwd = istr.readString();
            this.options = Ice.StringSeqHelper.read(istr);
            this.envs = Ice.StringSeqHelper.read(istr);
            this.activation = istr.readString();
            this.activationTimeout = istr.readString();
            this.deactivationTimeout = istr.readString();
            this.applicationDistrib = istr.readBool();
            this.distrib = IceGrid.DistributionDescriptor.read(istr, this.distrib);
            this.allocatable = istr.readBool();
            this.user = istr.readString();
        }
    };

    Slice.defineValue(IceGrid.ServerDescriptor, iceC_IceGrid_ServerDescriptor_ids[2], false);

    /**
     * An Ice server descriptor.
     *
     **/
    IceGrid.ServerDescriptorDisp = class extends IceGrid.CommunicatorDescriptorDisp
    {
    };

    Slice.defineOperations(IceGrid.ServerDescriptorDisp, undefined, iceC_IceGrid_ServerDescriptor_ids, 2);

    Slice.defineSequence(IceGrid, "ServerDescriptorSeqHelper", "Ice.ObjectHelper", false, "IceGrid.ServerDescriptor");

    const iceC_IceGrid_ServiceDescriptor_ids = [
        "::Ice::Object",
        "::IceGrid::CommunicatorDescriptor",
        "::IceGrid::ServiceDescriptor"
    ];

    /**
     * An IceBox service descriptor.
     *
     **/
    IceGrid.ServiceDescriptor = class extends IceGrid.CommunicatorDescriptor
    {
        constructor(adapters, propertySet, dbEnvs, logs, description, name = "", entry = "")
        {
            super(adapters, propertySet, dbEnvs, logs, description);
            this.name = name;
            this.entry = entry;
        }

        _iceWriteMemberImpl(ostr)
        {
            ostr.writeString(this.name);
            ostr.writeString(this.entry);
        }

        _iceReadMemberImpl(istr)
        {
            this.name = istr.readString();
            this.entry = istr.readString();
        }
    };

    Slice.defineValue(IceGrid.ServiceDescriptor, iceC_IceGrid_ServiceDescriptor_ids[2], false);

    /**
     * An IceBox service descriptor.
     *
     **/
    IceGrid.ServiceDescriptorDisp = class extends IceGrid.CommunicatorDescriptorDisp
    {
    };

    Slice.defineOperations(IceGrid.ServiceDescriptorDisp, undefined, iceC_IceGrid_ServiceDescriptor_ids, 2);

    Slice.defineSequence(IceGrid, "ServiceDescriptorSeqHelper", "Ice.ObjectHelper", false, "IceGrid.ServiceDescriptor");

    /**
     * A server template instance descriptor.
     *
     **/
    IceGrid.ServerInstanceDescriptor = class
    {
        constructor(template = "", parameterValues = null, propertySet = new IceGrid.PropertySetDescriptor(), servicePropertySets = null)
        {
            this.template = template;
            this.parameterValues = parameterValues;
            this.propertySet = propertySet;
            this.servicePropertySets = servicePropertySets;
        }

        _write(ostr)
        {
            ostr.writeString(this.template);
            IceGrid.StringStringDictHelper.write(ostr, this.parameterValues);
            IceGrid.PropertySetDescriptor.write(ostr, this.propertySet);
            IceGrid.PropertySetDescriptorDictHelper.write(ostr, this.servicePropertySets);
        }

        _read(istr)
        {
            this.template = istr.readString();
            this.parameterValues = IceGrid.StringStringDictHelper.read(istr);
            this.propertySet = IceGrid.PropertySetDescriptor.read(istr, this.propertySet);
            this.servicePropertySets = IceGrid.PropertySetDescriptorDictHelper.read(istr);
        }

        static get minWireSize()
        {
            return  5;
        }
    };

    Slice.defineStruct(IceGrid.ServerInstanceDescriptor, false, true);

    Slice.defineSequence(IceGrid, "ServerInstanceDescriptorSeqHelper", "IceGrid.ServerInstanceDescriptor", false);

    /**
     * A template descriptor for server or service templates.
     *
     **/
    IceGrid.TemplateDescriptor = class
    {
        constructor(descriptor = null, parameters = null, parameterDefaults = null)
        {
            this.descriptor = descriptor;
            this.parameters = parameters;
            this.parameterDefaults = parameterDefaults;
        }

        _write(ostr)
        {
            ostr.writeValue(this.descriptor);
            Ice.StringSeqHelper.write(ostr, this.parameters);
            IceGrid.StringStringDictHelper.write(ostr, this.parameterDefaults);
        }

        _read(istr)
        {
            istr.readValue(obj => this.descriptor = obj, IceGrid.CommunicatorDescriptor);
            this.parameters = Ice.StringSeqHelper.read(istr);
            this.parameterDefaults = IceGrid.StringStringDictHelper.read(istr);
        }

        static get minWireSize()
        {
            return  3;
        }
    };

    Slice.defineStruct(IceGrid.TemplateDescriptor, false, true);

    Slice.defineDictionary(IceGrid, "TemplateDescriptorDict", "TemplateDescriptorDictHelper", "Ice.StringHelper", "IceGrid.TemplateDescriptor", false, undefined, undefined);

    /**
     * A service template instance descriptor.
     *
     **/
    IceGrid.ServiceInstanceDescriptor = class
    {
        constructor(template = "", parameterValues = null, descriptor = null, propertySet = new IceGrid.PropertySetDescriptor())
        {
            this.template = template;
            this.parameterValues = parameterValues;
            this.descriptor = descriptor;
            this.propertySet = propertySet;
        }

        _write(ostr)
        {
            ostr.writeString(this.template);
            IceGrid.StringStringDictHelper.write(ostr, this.parameterValues);
            ostr.writeValue(this.descriptor);
            IceGrid.PropertySetDescriptor.write(ostr, this.propertySet);
        }

        _read(istr)
        {
            this.template = istr.readString();
            this.parameterValues = IceGrid.StringStringDictHelper.read(istr);
            istr.readValue(obj => this.descriptor = obj, IceGrid.ServiceDescriptor);
            this.propertySet = IceGrid.PropertySetDescriptor.read(istr, this.propertySet);
        }

        static get minWireSize()
        {
            return  5;
        }
    };

    Slice.defineStruct(IceGrid.ServiceInstanceDescriptor, false, true);

    Slice.defineSequence(IceGrid, "ServiceInstanceDescriptorSeqHelper", "IceGrid.ServiceInstanceDescriptor", false);

    const iceC_IceGrid_IceBoxDescriptor_ids = [
        "::Ice::Object",
        "::IceGrid::CommunicatorDescriptor",
        "::IceGrid::IceBoxDescriptor",
        "::IceGrid::ServerDescriptor"
    ];

    /**
     * An IceBox server descriptor.
     *
     **/
    IceGrid.IceBoxDescriptor = class extends IceGrid.ServerDescriptor
    {
        constructor(adapters, propertySet, dbEnvs, logs, description, id, exe, iceVersion, pwd, options, envs, activation, activationTimeout, deactivationTimeout, applicationDistrib, distrib, allocatable, user, services = null)
        {
            super(adapters, propertySet, dbEnvs, logs, description, id, exe, iceVersion, pwd, options, envs, activation, activationTimeout, deactivationTimeout, applicationDistrib, distrib, allocatable, user);
            this.services = services;
        }

        _iceWriteMemberImpl(ostr)
        {
            IceGrid.ServiceInstanceDescriptorSeqHelper.write(ostr, this.services);
        }

        _iceReadMemberImpl(istr)
        {
            this.services = IceGrid.ServiceInstanceDescriptorSeqHelper.read(istr);
        }
    };

    Slice.defineValue(IceGrid.IceBoxDescriptor, iceC_IceGrid_IceBoxDescriptor_ids[2], false);

    /**
     * An IceBox server descriptor.
     *
     **/
    IceGrid.IceBoxDescriptorDisp = class extends IceGrid.ServerDescriptorDisp
    {
    };

    Slice.defineOperations(IceGrid.IceBoxDescriptorDisp, undefined, iceC_IceGrid_IceBoxDescriptor_ids, 2);

    /**
     * A node descriptor.
     *
     **/
    IceGrid.NodeDescriptor = class
    {
        constructor(variables = null, serverInstances = null, servers = null, loadFactor = "", description = "", propertySets = null)
        {
            this.variables = variables;
            this.serverInstances = serverInstances;
            this.servers = servers;
            this.loadFactor = loadFactor;
            this.description = description;
            this.propertySets = propertySets;
        }

        _write(ostr)
        {
            IceGrid.StringStringDictHelper.write(ostr, this.variables);
            IceGrid.ServerInstanceDescriptorSeqHelper.write(ostr, this.serverInstances);
            IceGrid.ServerDescriptorSeqHelper.write(ostr, this.servers);
            ostr.writeString(this.loadFactor);
            ostr.writeString(this.description);
            IceGrid.PropertySetDescriptorDictHelper.write(ostr, this.propertySets);
        }

        _read(istr)
        {
            this.variables = IceGrid.StringStringDictHelper.read(istr);
            this.serverInstances = IceGrid.ServerInstanceDescriptorSeqHelper.read(istr);
            this.servers = IceGrid.ServerDescriptorSeqHelper.read(istr);
            this.loadFactor = istr.readString();
            this.description = istr.readString();
            this.propertySets = IceGrid.PropertySetDescriptorDictHelper.read(istr);
        }

        static get minWireSize()
        {
            return  6;
        }
    };

    Slice.defineStruct(IceGrid.NodeDescriptor, false, true);

    Slice.defineDictionary(IceGrid, "NodeDescriptorDict", "NodeDescriptorDictHelper", "Ice.StringHelper", "IceGrid.NodeDescriptor", false, undefined, undefined);

    const iceC_IceGrid_LoadBalancingPolicy_ids = [
        "::Ice::Object",
        "::IceGrid::LoadBalancingPolicy"
    ];

    /**
     * A base class for load balancing policies.
     *
     **/
    IceGrid.LoadBalancingPolicy = class extends Ice.Value
    {
        constructor(nReplicas = "")
        {
            super();
            this.nReplicas = nReplicas;
        }

        _iceWriteMemberImpl(ostr)
        {
            ostr.writeString(this.nReplicas);
        }

        _iceReadMemberImpl(istr)
        {
            this.nReplicas = istr.readString();
        }
    };

    Slice.defineValue(IceGrid.LoadBalancingPolicy, iceC_IceGrid_LoadBalancingPolicy_ids[1], false);

    /**
     * A base class for load balancing policies.
     *
     **/
    IceGrid.LoadBalancingPolicyDisp = class extends Ice.Object
    {
    };

    Slice.defineOperations(IceGrid.LoadBalancingPolicyDisp, undefined, iceC_IceGrid_LoadBalancingPolicy_ids, 1);

    const iceC_IceGrid_RandomLoadBalancingPolicy_ids = [
        "::Ice::Object",
        "::IceGrid::LoadBalancingPolicy",
        "::IceGrid::RandomLoadBalancingPolicy"
    ];

    /**
     * Random load balancing policy.
     *
     **/
    IceGrid.RandomLoadBalancingPolicy = class extends IceGrid.LoadBalancingPolicy
    {
        constructor(nReplicas)
        {
            super(nReplicas);
        }
    };

    Slice.defineValue(IceGrid.RandomLoadBalancingPolicy, iceC_IceGrid_RandomLoadBalancingPolicy_ids[2], false);

    /**
     * Random load balancing policy.
     *
     **/
    IceGrid.RandomLoadBalancingPolicyDisp = class extends IceGrid.LoadBalancingPolicyDisp
    {
    };

    Slice.defineOperations(IceGrid.RandomLoadBalancingPolicyDisp, undefined, iceC_IceGrid_RandomLoadBalancingPolicy_ids, 2);

    const iceC_IceGrid_OrderedLoadBalancingPolicy_ids = [
        "::Ice::Object",
        "::IceGrid::LoadBalancingPolicy",
        "::IceGrid::OrderedLoadBalancingPolicy"
    ];

    /**
     * Ordered load balancing policy.
     *
     **/
    IceGrid.OrderedLoadBalancingPolicy = class extends IceGrid.LoadBalancingPolicy
    {
        constructor(nReplicas)
        {
            super(nReplicas);
        }
    };

    Slice.defineValue(IceGrid.OrderedLoadBalancingPolicy, iceC_IceGrid_OrderedLoadBalancingPolicy_ids[2], false);

    /**
     * Ordered load balancing policy.
     *
     **/
    IceGrid.OrderedLoadBalancingPolicyDisp = class extends IceGrid.LoadBalancingPolicyDisp
    {
    };

    Slice.defineOperations(IceGrid.OrderedLoadBalancingPolicyDisp, undefined, iceC_IceGrid_OrderedLoadBalancingPolicy_ids, 2);

    const iceC_IceGrid_RoundRobinLoadBalancingPolicy_ids = [
        "::Ice::Object",
        "::IceGrid::LoadBalancingPolicy",
        "::IceGrid::RoundRobinLoadBalancingPolicy"
    ];

    /**
     * Round robin load balancing policy.
     *
     **/
    IceGrid.RoundRobinLoadBalancingPolicy = class extends IceGrid.LoadBalancingPolicy
    {
        constructor(nReplicas)
        {
            super(nReplicas);
        }
    };

    Slice.defineValue(IceGrid.RoundRobinLoadBalancingPolicy, iceC_IceGrid_RoundRobinLoadBalancingPolicy_ids[2], false);

    /**
     * Round robin load balancing policy.
     *
     **/
    IceGrid.RoundRobinLoadBalancingPolicyDisp = class extends IceGrid.LoadBalancingPolicyDisp
    {
    };

    Slice.defineOperations(IceGrid.RoundRobinLoadBalancingPolicyDisp, undefined, iceC_IceGrid_RoundRobinLoadBalancingPolicy_ids, 2);

    const iceC_IceGrid_AdaptiveLoadBalancingPolicy_ids = [
        "::Ice::Object",
        "::IceGrid::AdaptiveLoadBalancingPolicy",
        "::IceGrid::LoadBalancingPolicy"
    ];

    /**
     * Adaptive load balancing policy.
     *
     **/
    IceGrid.AdaptiveLoadBalancingPolicy = class extends IceGrid.LoadBalancingPolicy
    {
        constructor(nReplicas, loadSample = "")
        {
            super(nReplicas);
            this.loadSample = loadSample;
        }

        _iceWriteMemberImpl(ostr)
        {
            ostr.writeString(this.loadSample);
        }

        _iceReadMemberImpl(istr)
        {
            this.loadSample = istr.readString();
        }
    };

    Slice.defineValue(IceGrid.AdaptiveLoadBalancingPolicy, iceC_IceGrid_AdaptiveLoadBalancingPolicy_ids[1], false);

    /**
     * Adaptive load balancing policy.
     *
     **/
    IceGrid.AdaptiveLoadBalancingPolicyDisp = class extends IceGrid.LoadBalancingPolicyDisp
    {
    };

    Slice.defineOperations(IceGrid.AdaptiveLoadBalancingPolicyDisp, undefined, iceC_IceGrid_AdaptiveLoadBalancingPolicy_ids, 1);

    /**
     * A replica group descriptor.
     *
     **/
    IceGrid.ReplicaGroupDescriptor = class
    {
        constructor(id = "", loadBalancing = null, proxyOptions = "", objects = null, description = "", filter = "")
        {
            this.id = id;
            this.loadBalancing = loadBalancing;
            this.proxyOptions = proxyOptions;
            this.objects = objects;
            this.description = description;
            this.filter = filter;
        }

        _write(ostr)
        {
            ostr.writeString(this.id);
            ostr.writeValue(this.loadBalancing);
            ostr.writeString(this.proxyOptions);
            IceGrid.ObjectDescriptorSeqHelper.write(ostr, this.objects);
            ostr.writeString(this.description);
            ostr.writeString(this.filter);
        }

        _read(istr)
        {
            this.id = istr.readString();
            istr.readValue(obj => this.loadBalancing = obj, IceGrid.LoadBalancingPolicy);
            this.proxyOptions = istr.readString();
            this.objects = IceGrid.ObjectDescriptorSeqHelper.read(istr);
            this.description = istr.readString();
            this.filter = istr.readString();
        }

        static get minWireSize()
        {
            return  6;
        }
    };

    Slice.defineStruct(IceGrid.ReplicaGroupDescriptor, false, true);

    Slice.defineSequence(IceGrid, "ReplicaGroupDescriptorSeqHelper", "IceGrid.ReplicaGroupDescriptor", false);

    /**
     * An application descriptor.
     *
     **/
    IceGrid.ApplicationDescriptor = class
    {
        constructor(name = "", variables = null, replicaGroups = null, serverTemplates = null, serviceTemplates = null, nodes = null, distrib = new IceGrid.DistributionDescriptor(), description = "", propertySets = null)
        {
            this.name = name;
            this.variables = variables;
            this.replicaGroups = replicaGroups;
            this.serverTemplates = serverTemplates;
            this.serviceTemplates = serviceTemplates;
            this.nodes = nodes;
            this.distrib = distrib;
            this.description = description;
            this.propertySets = propertySets;
        }

        _write(ostr)
        {
            ostr.writeString(this.name);
            IceGrid.StringStringDictHelper.write(ostr, this.variables);
            IceGrid.ReplicaGroupDescriptorSeqHelper.write(ostr, this.replicaGroups);
            IceGrid.TemplateDescriptorDictHelper.write(ostr, this.serverTemplates);
            IceGrid.TemplateDescriptorDictHelper.write(ostr, this.serviceTemplates);
            IceGrid.NodeDescriptorDictHelper.write(ostr, this.nodes);
            IceGrid.DistributionDescriptor.write(ostr, this.distrib);
            ostr.writeString(this.description);
            IceGrid.PropertySetDescriptorDictHelper.write(ostr, this.propertySets);
        }

        _read(istr)
        {
            this.name = istr.readString();
            this.variables = IceGrid.StringStringDictHelper.read(istr);
            this.replicaGroups = IceGrid.ReplicaGroupDescriptorSeqHelper.read(istr);
            this.serverTemplates = IceGrid.TemplateDescriptorDictHelper.read(istr);
            this.serviceTemplates = IceGrid.TemplateDescriptorDictHelper.read(istr);
            this.nodes = IceGrid.NodeDescriptorDictHelper.read(istr);
            this.distrib = IceGrid.DistributionDescriptor.read(istr, this.distrib);
            this.description = istr.readString();
            this.propertySets = IceGrid.PropertySetDescriptorDictHelper.read(istr);
        }

        static get minWireSize()
        {
            return  10;
        }
    };

    Slice.defineStruct(IceGrid.ApplicationDescriptor, false, true);

    Slice.defineSequence(IceGrid, "ApplicationDescriptorSeqHelper", "IceGrid.ApplicationDescriptor", false);

    const iceC_IceGrid_BoxedString_ids = [
        "::Ice::Object",
        "::IceGrid::BoxedString"
    ];

    /**
     * A "boxed" string.
     *
     **/
    IceGrid.BoxedString = class extends Ice.Value
    {
        constructor(value = "")
        {
            super();
            this.value = value;
        }

        _iceWriteMemberImpl(ostr)
        {
            ostr.writeString(this.value);
        }

        _iceReadMemberImpl(istr)
        {
            this.value = istr.readString();
        }
    };

    Slice.defineValue(IceGrid.BoxedString, iceC_IceGrid_BoxedString_ids[1], false);

    /**
     * A "boxed" string.
     *
     **/
    IceGrid.BoxedStringDisp = class extends Ice.Object
    {
    };

    Slice.defineOperations(IceGrid.BoxedStringDisp, undefined, iceC_IceGrid_BoxedString_ids, 1);

    /**
     * A node update descriptor to describe the updates to apply to a
     * node of a deployed application.
     *
     **/
    IceGrid.NodeUpdateDescriptor = class
    {
        constructor(name = "", description = null, variables = null, removeVariables = null, propertySets = null, removePropertySets = null, serverInstances = null, servers = null, removeServers = null, loadFactor = null)
        {
            this.name = name;
            this.description = description;
            this.variables = variables;
            this.removeVariables = removeVariables;
            this.propertySets = propertySets;
            this.removePropertySets = removePropertySets;
            this.serverInstances = serverInstances;
            this.servers = servers;
            this.removeServers = removeServers;
            this.loadFactor = loadFactor;
        }

        _write(ostr)
        {
            ostr.writeString(this.name);
            ostr.writeValue(this.description);
            IceGrid.StringStringDictHelper.write(ostr, this.variables);
            Ice.StringSeqHelper.write(ostr, this.removeVariables);
            IceGrid.PropertySetDescriptorDictHelper.write(ostr, this.propertySets);
            Ice.StringSeqHelper.write(ostr, this.removePropertySets);
            IceGrid.ServerInstanceDescriptorSeqHelper.write(ostr, this.serverInstances);
            IceGrid.ServerDescriptorSeqHelper.write(ostr, this.servers);
            Ice.StringSeqHelper.write(ostr, this.removeServers);
            ostr.writeValue(this.loadFactor);
        }

        _read(istr)
        {
            this.name = istr.readString();
            istr.readValue(obj => this.description = obj, IceGrid.BoxedString);
            this.variables = IceGrid.StringStringDictHelper.read(istr);
            this.removeVariables = Ice.StringSeqHelper.read(istr);
            this.propertySets = IceGrid.PropertySetDescriptorDictHelper.read(istr);
            this.removePropertySets = Ice.StringSeqHelper.read(istr);
            this.serverInstances = IceGrid.ServerInstanceDescriptorSeqHelper.read(istr);
            this.servers = IceGrid.ServerDescriptorSeqHelper.read(istr);
            this.removeServers = Ice.StringSeqHelper.read(istr);
            istr.readValue(obj => this.loadFactor = obj, IceGrid.BoxedString);
        }

        static get minWireSize()
        {
            return  10;
        }
    };

    Slice.defineStruct(IceGrid.NodeUpdateDescriptor, false, true);

    Slice.defineSequence(IceGrid, "NodeUpdateDescriptorSeqHelper", "IceGrid.NodeUpdateDescriptor", false);

    const iceC_IceGrid_BoxedDistributionDescriptor_ids = [
        "::Ice::Object",
        "::IceGrid::BoxedDistributionDescriptor"
    ];

    /**
     * A "boxed" distribution descriptor.
     *
     **/
    IceGrid.BoxedDistributionDescriptor = class extends Ice.Value
    {
        constructor(value = new IceGrid.DistributionDescriptor())
        {
            super();
            this.value = value;
        }

        _iceWriteMemberImpl(ostr)
        {
            IceGrid.DistributionDescriptor.write(ostr, this.value);
        }

        _iceReadMemberImpl(istr)
        {
            this.value = IceGrid.DistributionDescriptor.read(istr, this.value);
        }
    };

    Slice.defineValue(IceGrid.BoxedDistributionDescriptor, iceC_IceGrid_BoxedDistributionDescriptor_ids[1], false);

    /**
     * A "boxed" distribution descriptor.
     *
     **/
    IceGrid.BoxedDistributionDescriptorDisp = class extends Ice.Object
    {
    };

    Slice.defineOperations(IceGrid.BoxedDistributionDescriptorDisp, undefined, iceC_IceGrid_BoxedDistributionDescriptor_ids, 1);

    /**
     * An application update descriptor to describe the updates to apply
     * to a deployed application.
     *
     **/
    IceGrid.ApplicationUpdateDescriptor = class
    {
        constructor(name = "", description = null, distrib = null, variables = null, removeVariables = null, propertySets = null, removePropertySets = null, replicaGroups = null, removeReplicaGroups = null, serverTemplates = null, removeServerTemplates = null, serviceTemplates = null, removeServiceTemplates = null, nodes = null, removeNodes = null)
        {
            this.name = name;
            this.description = description;
            this.distrib = distrib;
            this.variables = variables;
            this.removeVariables = removeVariables;
            this.propertySets = propertySets;
            this.removePropertySets = removePropertySets;
            this.replicaGroups = replicaGroups;
            this.removeReplicaGroups = removeReplicaGroups;
            this.serverTemplates = serverTemplates;
            this.removeServerTemplates = removeServerTemplates;
            this.serviceTemplates = serviceTemplates;
            this.removeServiceTemplates = removeServiceTemplates;
            this.nodes = nodes;
            this.removeNodes = removeNodes;
        }

        _write(ostr)
        {
            ostr.writeString(this.name);
            ostr.writeValue(this.description);
            ostr.writeValue(this.distrib);
            IceGrid.StringStringDictHelper.write(ostr, this.variables);
            Ice.StringSeqHelper.write(ostr, this.removeVariables);
            IceGrid.PropertySetDescriptorDictHelper.write(ostr, this.propertySets);
            Ice.StringSeqHelper.write(ostr, this.removePropertySets);
            IceGrid.ReplicaGroupDescriptorSeqHelper.write(ostr, this.replicaGroups);
            Ice.StringSeqHelper.write(ostr, this.removeReplicaGroups);
            IceGrid.TemplateDescriptorDictHelper.write(ostr, this.serverTemplates);
            Ice.StringSeqHelper.write(ostr, this.removeServerTemplates);
            IceGrid.TemplateDescriptorDictHelper.write(ostr, this.serviceTemplates);
            Ice.StringSeqHelper.write(ostr, this.removeServiceTemplates);
            IceGrid.NodeUpdateDescriptorSeqHelper.write(ostr, this.nodes);
            Ice.StringSeqHelper.write(ostr, this.removeNodes);
        }

        _read(istr)
        {
            this.name = istr.readString();
            istr.readValue(obj => this.description = obj, IceGrid.BoxedString);
            istr.readValue(obj => this.distrib = obj, IceGrid.BoxedDistributionDescriptor);
            this.variables = IceGrid.StringStringDictHelper.read(istr);
            this.removeVariables = Ice.StringSeqHelper.read(istr);
            this.propertySets = IceGrid.PropertySetDescriptorDictHelper.read(istr);
            this.removePropertySets = Ice.StringSeqHelper.read(istr);
            this.replicaGroups = IceGrid.ReplicaGroupDescriptorSeqHelper.read(istr);
            this.removeReplicaGroups = Ice.StringSeqHelper.read(istr);
            this.serverTemplates = IceGrid.TemplateDescriptorDictHelper.read(istr);
            this.removeServerTemplates = Ice.StringSeqHelper.read(istr);
            this.serviceTemplates = IceGrid.TemplateDescriptorDictHelper.read(istr);
            this.removeServiceTemplates = Ice.StringSeqHelper.read(istr);
            this.nodes = IceGrid.NodeUpdateDescriptorSeqHelper.read(istr);
            this.removeNodes = Ice.StringSeqHelper.read(istr);
        }

        static get minWireSize()
        {
            return  15;
        }
    };

    Slice.defineStruct(IceGrid.ApplicationUpdateDescriptor, false, true);
/* slice2js browser-bundle-skip */
    exports.IceGrid = IceGrid;
/* slice2js browser-bundle-skip-end */
/* slice2js browser-bundle-skip */
}
(typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? module : undefined,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? require : this.Ice._require,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? exports : this));
/* slice2js browser-bundle-skip-end */
