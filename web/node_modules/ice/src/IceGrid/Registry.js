// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `Registry.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

/* slice2js browser-bundle-skip */
(function(module, require, exports)
{
/* slice2js browser-bundle-skip-end */
/* slice2js browser-bundle-skip */
    const _ModuleRegistry = require("../Ice/ModuleRegistry").Ice._ModuleRegistry;
    const Ice = _ModuleRegistry.require(module,
    [
        "../Ice/Object",
        "../Ice/Value",
        "../Ice/ObjectPrx",
        "../Ice/Operation",
        "../Ice/EnumBase",
        "../Ice/Long",
        "../Ice/HashMap",
        "../Ice/HashUtil",
        "../Ice/ArrayUtil",
        "../Ice/StreamHelpers",
        "../Ice/Locator"
    ]).Ice;

    const IceGrid = _ModuleRegistry.require(module,
    [
        "../IceGrid/Exception",
        "../IceGrid/Session",
        "../IceGrid/Admin"
    ]).IceGrid;

    const Slice = Ice.Slice;
/* slice2js browser-bundle-skip-end */

    /**
     * Determines which load sampling interval to use.
     *
     **/
    IceGrid.LoadSample = Slice.defineEnum([
        ['LoadSample1', 0], ['LoadSample5', 1], ['LoadSample15', 2]]);

    const iceC_IceGrid_Query_ids = [
        "::Ice::Object",
        "::IceGrid::Query"
    ];

    /**
     * The IceGrid query interface. This interface is accessible to
     * Ice clients who wish to look up well-known objects.
     *
     **/
    IceGrid.Query = class extends Ice.Object
    {
    };

    IceGrid.QueryPrx = class extends Ice.ObjectPrx
    {
    };

    Slice.defineOperations(IceGrid.Query, IceGrid.QueryPrx, iceC_IceGrid_Query_ids, 1,
    {
        "findObjectById": [, 2, 1, , [9], [[Ice.Identity]], , , , ],
        "findObjectByType": [, 2, 1, , [9], [[7]], , , , ],
        "findObjectByTypeOnLeastLoadedNode": [, 2, 1, , [9], [[7], [IceGrid.LoadSample._helper]], , , , ],
        "findAllObjectsByType": [, 2, 1, , ["Ice.ObjectProxySeqHelper"], [[7]], , , , ],
        "findAllReplicas": [, 2, 2, , ["Ice.ObjectProxySeqHelper"], [[9]], , , , ]
    });

    const iceC_IceGrid_Registry_ids = [
        "::Ice::Object",
        "::IceGrid::Registry"
    ];

    /**
     * The IceGrid registry allows clients create sessions
     * directly with the registry.
     *
     * @see Session
     * @see AdminSession
     *
     **/
    IceGrid.Registry = class extends Ice.Object
    {
    };

    IceGrid.RegistryPrx = class extends Ice.ObjectPrx
    {
    };

    Slice.defineOperations(IceGrid.Registry, IceGrid.RegistryPrx, iceC_IceGrid_Registry_ids, 1,
    {
        "createSession": [, , , , ["IceGrid.SessionPrx"], [[7], [7]], ,
        [
            IceGrid.PermissionDeniedException
        ], , ],
        "createAdminSession": [, , , , ["IceGrid.AdminSessionPrx"], [[7], [7]], ,
        [
            IceGrid.PermissionDeniedException
        ], , ],
        "createSessionFromSecureConnection": [, , , , ["IceGrid.SessionPrx"], , ,
        [
            IceGrid.PermissionDeniedException
        ], , ],
        "createAdminSessionFromSecureConnection": [, , , , ["IceGrid.AdminSessionPrx"], , ,
        [
            IceGrid.PermissionDeniedException
        ], , ],
        "getSessionTimeout": [, 2, 1, , [3], , , , , ],
        "getACMTimeout": [, 2, 1, , [3], , , , , ]
    });

    const iceC_IceGrid_Locator_ids = [
        "::Ice::Locator",
        "::Ice::Object",
        "::IceGrid::Locator"
    ];

    /**
     * The IceGrid locator interface provides access to the {@link Query}
     * and {@link Registry} object of the IceGrid registry.
     *
     * @see Query
     * @see Registry
     *
     **/
    IceGrid.Locator = class extends Ice.Object
    {
        static get _iceImplements()
        {
            return [
                Ice.Locator
            ];
        }
    };

    IceGrid.LocatorPrx = class extends Ice.ObjectPrx
    {
        static get _implements()
        {
            return [
                Ice.LocatorPrx];
        }
    };

    Slice.defineOperations(IceGrid.Locator, IceGrid.LocatorPrx, iceC_IceGrid_Locator_ids, 2,
    {
        "getLocalRegistry": [, 2, 2, , ["IceGrid.RegistryPrx"], , , , , ],
        "getLocalQuery": [, 2, 2, , ["IceGrid.QueryPrx"], , , , , ]
    });
/* slice2js browser-bundle-skip */
    exports.IceGrid = IceGrid;
/* slice2js browser-bundle-skip-end */
/* slice2js browser-bundle-skip */
}
(typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? module : undefined,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? require : this.Ice._require,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? exports : this));
/* slice2js browser-bundle-skip-end */
