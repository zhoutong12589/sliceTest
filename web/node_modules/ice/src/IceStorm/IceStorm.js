// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `IceStorm.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

/* slice2js browser-bundle-skip */
(function(module, require, exports)
{
/* slice2js browser-bundle-skip-end */
/* slice2js browser-bundle-skip */
    const _ModuleRegistry = require("../Ice/ModuleRegistry").Ice._ModuleRegistry;
    const Ice = _ModuleRegistry.require(module,
    [
        "../Ice/Object",
        "../Ice/Value",
        "../Ice/ObjectPrx",
        "../Ice/Operation",
        "../Ice/Struct",
        "../Ice/Exception",
        "../Ice/Long",
        "../Ice/HashMap",
        "../Ice/HashUtil",
        "../Ice/ArrayUtil",
        "../Ice/StreamHelpers",
        "../Ice/Identity",
        "../Ice/SliceChecksumDict"
    ]).Ice;

    const IceMX = require("../IceStorm/Metrics").IceMX;
    const Slice = Ice.Slice;
/* slice2js browser-bundle-skip-end */
/* slice2js browser-bundle-skip */

    let IceStorm = _ModuleRegistry.module("IceStorm");
/* slice2js browser-bundle-skip-end */

    /**
     * Information on the topic links.
     *
     **/
    IceStorm.LinkInfo = class
    {
        constructor(theTopic = null, name = "", cost = 0)
        {
            this.theTopic = theTopic;
            this.name = name;
            this.cost = cost;
        }

        _write(ostr)
        {
            IceStorm.TopicPrx.write(ostr, this.theTopic);
            ostr.writeString(this.name);
            ostr.writeInt(this.cost);
        }

        _read(istr)
        {
            this.theTopic = IceStorm.TopicPrx.read(istr, this.theTopic);
            this.name = istr.readString();
            this.cost = istr.readInt();
        }

        static get minWireSize()
        {
            return  7;
        }
    };

    Slice.defineStruct(IceStorm.LinkInfo, false, true);

    Slice.defineSequence(IceStorm, "LinkInfoSeqHelper", "IceStorm.LinkInfo", false);

    Slice.defineDictionary(IceStorm, "QoS", "QoSHelper", "Ice.StringHelper", "Ice.StringHelper", false, undefined, undefined);

    /**
     * This exception indicates that an attempt was made to create a link
     * that already exists.
     *
     **/
    IceStorm.LinkExists = class extends Ice.UserException
    {
        constructor(name = "", _cause = "")
        {
            super(_cause);
            this.name = name;
        }

        static get _parent()
        {
            return Ice.UserException;
        }

        static get _id()
        {
            return "::IceStorm::LinkExists";
        }

        _mostDerivedType()
        {
            return IceStorm.LinkExists;
        }

        _writeMemberImpl(ostr)
        {
            ostr.writeString(this.name);
        }

        _readMemberImpl(istr)
        {
            this.name = istr.readString();
        }
    };

    /**
     * This exception indicates that an attempt was made to remove a
     * link that does not exist.
     *
     **/
    IceStorm.NoSuchLink = class extends Ice.UserException
    {
        constructor(name = "", _cause = "")
        {
            super(_cause);
            this.name = name;
        }

        static get _parent()
        {
            return Ice.UserException;
        }

        static get _id()
        {
            return "::IceStorm::NoSuchLink";
        }

        _mostDerivedType()
        {
            return IceStorm.NoSuchLink;
        }

        _writeMemberImpl(ostr)
        {
            ostr.writeString(this.name);
        }

        _readMemberImpl(istr)
        {
            this.name = istr.readString();
        }
    };

    /**
     * This exception indicates that an attempt was made to subscribe
     * a proxy for which a subscription already exists.
     *
     **/
    IceStorm.AlreadySubscribed = class extends Ice.UserException
    {
        constructor(_cause = "")
        {
            super(_cause);
        }

        static get _parent()
        {
            return Ice.UserException;
        }

        static get _id()
        {
            return "::IceStorm::AlreadySubscribed";
        }

        _mostDerivedType()
        {
            return IceStorm.AlreadySubscribed;
        }
    };

    /**
     * This exception indicates that an attempt was made to subscribe
     * a proxy that is null.
     *
     **/
    IceStorm.InvalidSubscriber = class extends Ice.UserException
    {
        constructor(reason = "", _cause = "")
        {
            super(_cause);
            this.reason = reason;
        }

        static get _parent()
        {
            return Ice.UserException;
        }

        static get _id()
        {
            return "::IceStorm::InvalidSubscriber";
        }

        _mostDerivedType()
        {
            return IceStorm.InvalidSubscriber;
        }

        _writeMemberImpl(ostr)
        {
            ostr.writeString(this.reason);
        }

        _readMemberImpl(istr)
        {
            this.reason = istr.readString();
        }
    };

    /**
     * This exception indicates that a subscription failed due to an
     * invalid QoS.
     *
     **/
    IceStorm.BadQoS = class extends Ice.UserException
    {
        constructor(reason = "", _cause = "")
        {
            super(_cause);
            this.reason = reason;
        }

        static get _parent()
        {
            return Ice.UserException;
        }

        static get _id()
        {
            return "::IceStorm::BadQoS";
        }

        _mostDerivedType()
        {
            return IceStorm.BadQoS;
        }

        _writeMemberImpl(ostr)
        {
            ostr.writeString(this.reason);
        }

        _readMemberImpl(istr)
        {
            this.reason = istr.readString();
        }
    };

    const iceC_IceStorm_Topic_ids = [
        "::Ice::Object",
        "::IceStorm::Topic"
    ];

    /**
     * Publishers publish information on a particular topic. A topic
     * logically represents a type.
     *
     * @see TopicManager
     *
     **/
    IceStorm.Topic = class extends Ice.Object
    {
    };

    IceStorm.TopicPrx = class extends Ice.ObjectPrx
    {
    };

    Slice.defineOperations(IceStorm.Topic, IceStorm.TopicPrx, iceC_IceStorm_Topic_ids, 1,
    {
        "getName": [, 2, 1, , [7], , , , , ],
        "getPublisher": [, 2, 1, , [9], , , , , ],
        "getNonReplicatedPublisher": [, 2, 1, , [9], , , , , ],
        "subscribeAndGetPublisher": [, , , , [9], [["IceStorm.QoSHelper"], [9]], ,
        [
            IceStorm.AlreadySubscribed,
            IceStorm.BadQoS,
            IceStorm.InvalidSubscriber
        ], , ],
        "unsubscribe": [, 2, 2, , , [[9]], , , , ],
        "link": [, , , , , [["IceStorm.TopicPrx"], [3]], ,
        [
            IceStorm.LinkExists
        ], , ],
        "unlink": [, , , , , [["IceStorm.TopicPrx"]], ,
        [
            IceStorm.NoSuchLink
        ], , ],
        "getLinkInfoSeq": [, 2, 1, , ["IceStorm.LinkInfoSeqHelper"], , , , , ],
        "getSubscribers": [, , , , ["Ice.IdentitySeqHelper"], , , , , ],
        "destroy": [, , , , , , , , , ]
    });

    Slice.defineDictionary(IceStorm, "TopicDict", "TopicDictHelper", "Ice.StringHelper", "IceStorm.TopicPrx", false, undefined, undefined);

    /**
     * This exception indicates that an attempt was made to create a topic
     * that already exists.
     *
     **/
    IceStorm.TopicExists = class extends Ice.UserException
    {
        constructor(name = "", _cause = "")
        {
            super(_cause);
            this.name = name;
        }

        static get _parent()
        {
            return Ice.UserException;
        }

        static get _id()
        {
            return "::IceStorm::TopicExists";
        }

        _mostDerivedType()
        {
            return IceStorm.TopicExists;
        }

        _writeMemberImpl(ostr)
        {
            ostr.writeString(this.name);
        }

        _readMemberImpl(istr)
        {
            this.name = istr.readString();
        }
    };

    /**
     * This exception indicates that an attempt was made to retrieve a
     * topic that does not exist.
     *
     **/
    IceStorm.NoSuchTopic = class extends Ice.UserException
    {
        constructor(name = "", _cause = "")
        {
            super(_cause);
            this.name = name;
        }

        static get _parent()
        {
            return Ice.UserException;
        }

        static get _id()
        {
            return "::IceStorm::NoSuchTopic";
        }

        _mostDerivedType()
        {
            return IceStorm.NoSuchTopic;
        }

        _writeMemberImpl(ostr)
        {
            ostr.writeString(this.name);
        }

        _readMemberImpl(istr)
        {
            this.name = istr.readString();
        }
    };

    const iceC_IceStorm_TopicManager_ids = [
        "::Ice::Object",
        "::IceStorm::TopicManager"
    ];

    /**
     * A topic manager manages topics, and subscribers to topics.
     *
     * @see Topic
     *
     **/
    IceStorm.TopicManager = class extends Ice.Object
    {
    };

    IceStorm.TopicManagerPrx = class extends Ice.ObjectPrx
    {
    };

    Slice.defineOperations(IceStorm.TopicManager, IceStorm.TopicManagerPrx, iceC_IceStorm_TopicManager_ids, 1,
    {
        "create": [, , , , ["IceStorm.TopicPrx"], [[7]], ,
        [
            IceStorm.TopicExists
        ], , ],
        "retrieve": [, 2, 1, , ["IceStorm.TopicPrx"], [[7]], ,
        [
            IceStorm.NoSuchTopic
        ], , ],
        "retrieveAll": [, 2, 1, , ["IceStorm.TopicDictHelper"], , , , , ],
        "getSliceChecksums": [, 2, 1, , ["Ice.SliceChecksumDictHelper"], , , , , ]
    });

    const iceC_IceStorm_Finder_ids = [
        "::Ice::Object",
        "::IceStorm::Finder"
    ];

    /**
     * This inferface is advertised by the IceStorm service through the
     * Ice object with the identity `IceStorm/Finder'. This allows clients
     * to retrieve the topic manager with just the endpoint information of
     * the IceStorm service.
     *
     **/
    IceStorm.Finder = class extends Ice.Object
    {
    };

    IceStorm.FinderPrx = class extends Ice.ObjectPrx
    {
    };

    Slice.defineOperations(IceStorm.Finder, IceStorm.FinderPrx, iceC_IceStorm_Finder_ids, 1,
    {
        "getTopicManager": [, , , , ["IceStorm.TopicManagerPrx"], , , , , ]
    });
/* slice2js browser-bundle-skip */
    exports.IceStorm = IceStorm;
/* slice2js browser-bundle-skip-end */
/* slice2js browser-bundle-skip */
}
(typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? module : undefined,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? require : this.Ice._require,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? exports : this));
/* slice2js browser-bundle-skip-end */
