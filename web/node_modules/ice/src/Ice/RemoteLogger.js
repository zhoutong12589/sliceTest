// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `RemoteLogger.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

/* slice2js browser-bundle-skip */
(function(module, require, exports)
{
/* slice2js browser-bundle-skip-end */
/* slice2js browser-bundle-skip */
    const _ModuleRegistry = require("../Ice/ModuleRegistry").Ice._ModuleRegistry;
    const Ice = _ModuleRegistry.require(module,
    [
        "../Ice/Object",
        "../Ice/Value",
        "../Ice/ObjectPrx",
        "../Ice/Operation",
        "../Ice/Struct",
        "../Ice/Exception",
        "../Ice/EnumBase",
        "../Ice/Long",
        "../Ice/HashMap",
        "../Ice/HashUtil",
        "../Ice/ArrayUtil",
        "../Ice/StreamHelpers",
        "../Ice/BuiltinSequences"
    ]).Ice;

    const Slice = Ice.Slice;
/* slice2js browser-bundle-skip-end */

    /**
     * An enumeration representing the different types of log messages.
     *
     **/
    Ice.LogMessageType = Slice.defineEnum([
        ['PrintMessage', 0], ['TraceMessage', 1], ['WarningMessage', 2], ['ErrorMessage', 3]]);

    Slice.defineSequence(Ice, "LogMessageTypeSeqHelper", "Ice.LogMessageType._helper", false);

    /**
     * A complete log message.
     *
     **/
    Ice.LogMessage = class
    {
        constructor(type = Ice.LogMessageType.PrintMessage, timestamp = new Ice.Long(0, 0), traceCategory = "", message = "")
        {
            this.type = type;
            this.timestamp = timestamp;
            this.traceCategory = traceCategory;
            this.message = message;
        }

        _write(ostr)
        {
            Ice.LogMessageType._write(ostr, this.type);
            ostr.writeLong(this.timestamp);
            ostr.writeString(this.traceCategory);
            ostr.writeString(this.message);
        }

        _read(istr)
        {
            this.type = Ice.LogMessageType._read(istr);
            this.timestamp = istr.readLong();
            this.traceCategory = istr.readString();
            this.message = istr.readString();
        }

        static get minWireSize()
        {
            return  11;
        }
    };

    Slice.defineStruct(Ice.LogMessage, true, true);

    Slice.defineSequence(Ice, "LogMessageSeqHelper", "Ice.LogMessage", false);

    const iceC_Ice_RemoteLogger_ids = [
        "::Ice::Object",
        "::Ice::RemoteLogger"
    ];

    /**
     * The Ice remote logger interface. An application can implement a
     * RemoteLogger to receive the log messages sent to the local {@link Logger}
     * of another Ice application.
     *
     **/
    Ice.RemoteLogger = class extends Ice.Object
    {
    };

    Ice.RemoteLoggerPrx = class extends Ice.ObjectPrx
    {
    };

    Slice.defineOperations(Ice.RemoteLogger, Ice.RemoteLoggerPrx, iceC_Ice_RemoteLogger_ids, 1,
    {
        "init": [, , , , , [[7], ["Ice.LogMessageSeqHelper"]], , , , ],
        "log": [, , , , , [[Ice.LogMessage]], , , , ]
    });

    /**
     * An exception thrown by {@link LoggerAdmin#attachRemoteLogger} to report
     * that the provided {@link RemoteLogger} was previously attached to this
     * {@link LoggerAdmin}.
     *
     **/
    Ice.RemoteLoggerAlreadyAttachedException = class extends Ice.UserException
    {
        constructor(_cause = "")
        {
            super(_cause);
        }

        static get _parent()
        {
            return Ice.UserException;
        }

        static get _id()
        {
            return "::Ice::RemoteLoggerAlreadyAttachedException";
        }

        _mostDerivedType()
        {
            return Ice.RemoteLoggerAlreadyAttachedException;
        }
    };

    const iceC_Ice_LoggerAdmin_ids = [
        "::Ice::LoggerAdmin",
        "::Ice::Object"
    ];

    /**
     * The interface of the admin object that allows an Ice application the attach its
     * {@link RemoteLogger} to the {@link Logger} of this admin object's Ice communicator.
     *
     **/
    Ice.LoggerAdmin = class extends Ice.Object
    {
    };

    Ice.LoggerAdminPrx = class extends Ice.ObjectPrx
    {
    };

    Slice.defineOperations(Ice.LoggerAdmin, Ice.LoggerAdminPrx, iceC_Ice_LoggerAdmin_ids, 0,
    {
        "attachRemoteLogger": [, , , , , [["Ice.RemoteLoggerPrx"], ["Ice.LogMessageTypeSeqHelper"], ["Ice.StringSeqHelper"], [3]], ,
        [
            Ice.RemoteLoggerAlreadyAttachedException
        ], , ],
        "detachRemoteLogger": [, , , , [1], [["Ice.RemoteLoggerPrx"]], , , , ],
        "getLog": [, , , , ["Ice.LogMessageSeqHelper"], [["Ice.LogMessageTypeSeqHelper"], ["Ice.StringSeqHelper"], [3]], [[7]], , , ]
    });
/* slice2js browser-bundle-skip */
    exports.Ice = Ice;
/* slice2js browser-bundle-skip-end */
/* slice2js browser-bundle-skip */
}
(typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? module : undefined,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? require : this.Ice._require,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? exports : this));
/* slice2js browser-bundle-skip-end */
