var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

(function () {
    var root = typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
    root.IceGrid = root.IceGrid || {};
    var Slice = Ice.Slice;

    (function () {
        // **********************************************************************
        //
        // Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
        //
        // This copy of Ice is licensed to you under the terms described in the
        // ICE_LICENSE file included in this distribution.
        //
        // **********************************************************************
        //
        // Ice version 3.7.0
        //
        // <auto-generated>
        //
        // Generated from file `Descriptor.ice'
        //
        // Warning: do not edit this file.
        //
        // </auto-generated>
        //


        Slice.defineDictionary(IceGrid, "StringStringDict", "StringStringDictHelper", "Ice.StringHelper", "Ice.StringHelper", false, undefined, undefined);

        /**
         * Property descriptor.
         *
         **/
        IceGrid.PropertyDescriptor = function () {
            function _class() {
                var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
                var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";

                _classCallCheck(this, _class);

                this.name = name;
                this.value = value;
            }

            _createClass(_class, [{
                key: "_write",
                value: function _write(ostr) {
                    ostr.writeString(this.name);
                    ostr.writeString(this.value);
                }
            }, {
                key: "_read",
                value: function _read(istr) {
                    this.name = istr.readString();
                    this.value = istr.readString();
                }
            }], [{
                key: "minWireSize",
                get: function get() {
                    return 2;
                }
            }]);

            return _class;
        }();

        Slice.defineStruct(IceGrid.PropertyDescriptor, true, true);

        Slice.defineSequence(IceGrid, "PropertyDescriptorSeqHelper", "IceGrid.PropertyDescriptor", false);

        /**
         * A property set descriptor.
         *
         **/
        IceGrid.PropertySetDescriptor = function () {
            function _class2() {
                var references = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
                var properties = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

                _classCallCheck(this, _class2);

                this.references = references;
                this.properties = properties;
            }

            _createClass(_class2, [{
                key: "_write",
                value: function _write(ostr) {
                    Ice.StringSeqHelper.write(ostr, this.references);
                    IceGrid.PropertyDescriptorSeqHelper.write(ostr, this.properties);
                }
            }, {
                key: "_read",
                value: function _read(istr) {
                    this.references = Ice.StringSeqHelper.read(istr);
                    this.properties = IceGrid.PropertyDescriptorSeqHelper.read(istr);
                }
            }], [{
                key: "minWireSize",
                get: function get() {
                    return 2;
                }
            }]);

            return _class2;
        }();

        Slice.defineStruct(IceGrid.PropertySetDescriptor, true, true);

        Slice.defineDictionary(IceGrid, "PropertySetDescriptorDict", "PropertySetDescriptorDictHelper", "Ice.StringHelper", "IceGrid.PropertySetDescriptor", false, undefined, undefined);

        /**
         * An Ice object descriptor.
         *
         **/
        IceGrid.ObjectDescriptor = function () {
            function _class3() {
                var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Ice.Identity();
                var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
                var proxyOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "";

                _classCallCheck(this, _class3);

                this.id = id;
                this.type = type;
                this.proxyOptions = proxyOptions;
            }

            _createClass(_class3, [{
                key: "_write",
                value: function _write(ostr) {
                    Ice.Identity.write(ostr, this.id);
                    ostr.writeString(this.type);
                    ostr.writeString(this.proxyOptions);
                }
            }, {
                key: "_read",
                value: function _read(istr) {
                    this.id = Ice.Identity.read(istr, this.id);
                    this.type = istr.readString();
                    this.proxyOptions = istr.readString();
                }
            }], [{
                key: "minWireSize",
                get: function get() {
                    return 4;
                }
            }]);

            return _class3;
        }();

        Slice.defineStruct(IceGrid.ObjectDescriptor, true, true);

        Slice.defineSequence(IceGrid, "ObjectDescriptorSeqHelper", "IceGrid.ObjectDescriptor", false);

        /**
         * An Ice object adapter descriptor.
         *
         **/
        IceGrid.AdapterDescriptor = function () {
            function _class4() {
                var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
                var description = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
                var id = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "";
                var replicaGroupId = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "";
                var priority = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : "";
                var registerProcess = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;
                var serverLifetime = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;
                var objects = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : null;
                var allocatables = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : null;

                _classCallCheck(this, _class4);

                this.name = name;
                this.description = description;
                this.id = id;
                this.replicaGroupId = replicaGroupId;
                this.priority = priority;
                this.registerProcess = registerProcess;
                this.serverLifetime = serverLifetime;
                this.objects = objects;
                this.allocatables = allocatables;
            }

            _createClass(_class4, [{
                key: "_write",
                value: function _write(ostr) {
                    ostr.writeString(this.name);
                    ostr.writeString(this.description);
                    ostr.writeString(this.id);
                    ostr.writeString(this.replicaGroupId);
                    ostr.writeString(this.priority);
                    ostr.writeBool(this.registerProcess);
                    ostr.writeBool(this.serverLifetime);
                    IceGrid.ObjectDescriptorSeqHelper.write(ostr, this.objects);
                    IceGrid.ObjectDescriptorSeqHelper.write(ostr, this.allocatables);
                }
            }, {
                key: "_read",
                value: function _read(istr) {
                    this.name = istr.readString();
                    this.description = istr.readString();
                    this.id = istr.readString();
                    this.replicaGroupId = istr.readString();
                    this.priority = istr.readString();
                    this.registerProcess = istr.readBool();
                    this.serverLifetime = istr.readBool();
                    this.objects = IceGrid.ObjectDescriptorSeqHelper.read(istr);
                    this.allocatables = IceGrid.ObjectDescriptorSeqHelper.read(istr);
                }
            }], [{
                key: "minWireSize",
                get: function get() {
                    return 9;
                }
            }]);

            return _class4;
        }();

        Slice.defineStruct(IceGrid.AdapterDescriptor, true, true);

        Slice.defineSequence(IceGrid, "AdapterDescriptorSeqHelper", "IceGrid.AdapterDescriptor", false);

        /**
         * A Freeze database environment descriptor.
         *
         **/
        IceGrid.DbEnvDescriptor = function () {
            function _class5() {
                var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
                var description = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
                var dbHome = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "";
                var properties = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

                _classCallCheck(this, _class5);

                this.name = name;
                this.description = description;
                this.dbHome = dbHome;
                this.properties = properties;
            }

            _createClass(_class5, [{
                key: "_write",
                value: function _write(ostr) {
                    ostr.writeString(this.name);
                    ostr.writeString(this.description);
                    ostr.writeString(this.dbHome);
                    IceGrid.PropertyDescriptorSeqHelper.write(ostr, this.properties);
                }
            }, {
                key: "_read",
                value: function _read(istr) {
                    this.name = istr.readString();
                    this.description = istr.readString();
                    this.dbHome = istr.readString();
                    this.properties = IceGrid.PropertyDescriptorSeqHelper.read(istr);
                }
            }], [{
                key: "minWireSize",
                get: function get() {
                    return 4;
                }
            }]);

            return _class5;
        }();

        Slice.defineStruct(IceGrid.DbEnvDescriptor, true, true);

        Slice.defineSequence(IceGrid, "DbEnvDescriptorSeqHelper", "IceGrid.DbEnvDescriptor", false);

        var iceC_IceGrid_CommunicatorDescriptor_ids = ["::Ice::Object", "::IceGrid::CommunicatorDescriptor"];

        /**
         * A communicator descriptor.
         *
         **/
        IceGrid.CommunicatorDescriptor = function (_Ice$Value) {
            _inherits(_class6, _Ice$Value);

            function _class6() {
                var adapters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
                var propertySet = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new IceGrid.PropertySetDescriptor();
                var dbEnvs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
                var logs = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
                var description = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : "";

                _classCallCheck(this, _class6);

                var _this = _possibleConstructorReturn(this, (_class6.__proto__ || Object.getPrototypeOf(_class6)).call(this));

                _this.adapters = adapters;
                _this.propertySet = propertySet;
                _this.dbEnvs = dbEnvs;
                _this.logs = logs;
                _this.description = description;
                return _this;
            }

            _createClass(_class6, [{
                key: "_iceWriteMemberImpl",
                value: function _iceWriteMemberImpl(ostr) {
                    IceGrid.AdapterDescriptorSeqHelper.write(ostr, this.adapters);
                    IceGrid.PropertySetDescriptor.write(ostr, this.propertySet);
                    IceGrid.DbEnvDescriptorSeqHelper.write(ostr, this.dbEnvs);
                    Ice.StringSeqHelper.write(ostr, this.logs);
                    ostr.writeString(this.description);
                }
            }, {
                key: "_iceReadMemberImpl",
                value: function _iceReadMemberImpl(istr) {
                    this.adapters = IceGrid.AdapterDescriptorSeqHelper.read(istr);
                    this.propertySet = IceGrid.PropertySetDescriptor.read(istr, this.propertySet);
                    this.dbEnvs = IceGrid.DbEnvDescriptorSeqHelper.read(istr);
                    this.logs = Ice.StringSeqHelper.read(istr);
                    this.description = istr.readString();
                }
            }]);

            return _class6;
        }(Ice.Value);

        Slice.defineValue(IceGrid.CommunicatorDescriptor, iceC_IceGrid_CommunicatorDescriptor_ids[1], false);

        /**
         * A communicator descriptor.
         *
         **/
        IceGrid.CommunicatorDescriptorDisp = function (_Ice$Object) {
            _inherits(_class7, _Ice$Object);

            function _class7() {
                _classCallCheck(this, _class7);

                return _possibleConstructorReturn(this, (_class7.__proto__ || Object.getPrototypeOf(_class7)).apply(this, arguments));
            }

            return _class7;
        }(Ice.Object);

        Slice.defineOperations(IceGrid.CommunicatorDescriptorDisp, undefined, iceC_IceGrid_CommunicatorDescriptor_ids, 1);

        /**
         * A distribution descriptor defines an IcePatch2 server and the
         * directories to retrieve from the patch server.
         *
         **/
        IceGrid.DistributionDescriptor = function () {
            function _class8() {
                var icepatch = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
                var directories = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

                _classCallCheck(this, _class8);

                this.icepatch = icepatch;
                this.directories = directories;
            }

            _createClass(_class8, [{
                key: "_write",
                value: function _write(ostr) {
                    ostr.writeString(this.icepatch);
                    Ice.StringSeqHelper.write(ostr, this.directories);
                }
            }, {
                key: "_read",
                value: function _read(istr) {
                    this.icepatch = istr.readString();
                    this.directories = Ice.StringSeqHelper.read(istr);
                }
            }], [{
                key: "minWireSize",
                get: function get() {
                    return 2;
                }
            }]);

            return _class8;
        }();

        Slice.defineStruct(IceGrid.DistributionDescriptor, true, true);

        var iceC_IceGrid_ServerDescriptor_ids = ["::Ice::Object", "::IceGrid::CommunicatorDescriptor", "::IceGrid::ServerDescriptor"];

        /**
         * An Ice server descriptor.
         *
         **/
        IceGrid.ServerDescriptor = function (_IceGrid$Communicator) {
            _inherits(_class9, _IceGrid$Communicator);

            function _class9(adapters, propertySet, dbEnvs, logs, description) {
                var id = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : "";
                var exe = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : "";
                var iceVersion = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : "";
                var pwd = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : "";
                var options = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : null;
                var envs = arguments.length > 10 && arguments[10] !== undefined ? arguments[10] : null;
                var activation = arguments.length > 11 && arguments[11] !== undefined ? arguments[11] : "";
                var activationTimeout = arguments.length > 12 && arguments[12] !== undefined ? arguments[12] : "";
                var deactivationTimeout = arguments.length > 13 && arguments[13] !== undefined ? arguments[13] : "";
                var applicationDistrib = arguments.length > 14 && arguments[14] !== undefined ? arguments[14] : false;
                var distrib = arguments.length > 15 && arguments[15] !== undefined ? arguments[15] : new IceGrid.DistributionDescriptor();
                var allocatable = arguments.length > 16 && arguments[16] !== undefined ? arguments[16] : false;
                var user = arguments.length > 17 && arguments[17] !== undefined ? arguments[17] : "";

                _classCallCheck(this, _class9);

                var _this3 = _possibleConstructorReturn(this, (_class9.__proto__ || Object.getPrototypeOf(_class9)).call(this, adapters, propertySet, dbEnvs, logs, description));

                _this3.id = id;
                _this3.exe = exe;
                _this3.iceVersion = iceVersion;
                _this3.pwd = pwd;
                _this3.options = options;
                _this3.envs = envs;
                _this3.activation = activation;
                _this3.activationTimeout = activationTimeout;
                _this3.deactivationTimeout = deactivationTimeout;
                _this3.applicationDistrib = applicationDistrib;
                _this3.distrib = distrib;
                _this3.allocatable = allocatable;
                _this3.user = user;
                return _this3;
            }

            _createClass(_class9, [{
                key: "_iceWriteMemberImpl",
                value: function _iceWriteMemberImpl(ostr) {
                    ostr.writeString(this.id);
                    ostr.writeString(this.exe);
                    ostr.writeString(this.iceVersion);
                    ostr.writeString(this.pwd);
                    Ice.StringSeqHelper.write(ostr, this.options);
                    Ice.StringSeqHelper.write(ostr, this.envs);
                    ostr.writeString(this.activation);
                    ostr.writeString(this.activationTimeout);
                    ostr.writeString(this.deactivationTimeout);
                    ostr.writeBool(this.applicationDistrib);
                    IceGrid.DistributionDescriptor.write(ostr, this.distrib);
                    ostr.writeBool(this.allocatable);
                    ostr.writeString(this.user);
                }
            }, {
                key: "_iceReadMemberImpl",
                value: function _iceReadMemberImpl(istr) {
                    this.id = istr.readString();
                    this.exe = istr.readString();
                    this.iceVersion = istr.readString();
                    this.pwd = istr.readString();
                    this.options = Ice.StringSeqHelper.read(istr);
                    this.envs = Ice.StringSeqHelper.read(istr);
                    this.activation = istr.readString();
                    this.activationTimeout = istr.readString();
                    this.deactivationTimeout = istr.readString();
                    this.applicationDistrib = istr.readBool();
                    this.distrib = IceGrid.DistributionDescriptor.read(istr, this.distrib);
                    this.allocatable = istr.readBool();
                    this.user = istr.readString();
                }
            }]);

            return _class9;
        }(IceGrid.CommunicatorDescriptor);

        Slice.defineValue(IceGrid.ServerDescriptor, iceC_IceGrid_ServerDescriptor_ids[2], false);

        /**
         * An Ice server descriptor.
         *
         **/
        IceGrid.ServerDescriptorDisp = function (_IceGrid$Communicator2) {
            _inherits(_class10, _IceGrid$Communicator2);

            function _class10() {
                _classCallCheck(this, _class10);

                return _possibleConstructorReturn(this, (_class10.__proto__ || Object.getPrototypeOf(_class10)).apply(this, arguments));
            }

            return _class10;
        }(IceGrid.CommunicatorDescriptorDisp);

        Slice.defineOperations(IceGrid.ServerDescriptorDisp, undefined, iceC_IceGrid_ServerDescriptor_ids, 2);

        Slice.defineSequence(IceGrid, "ServerDescriptorSeqHelper", "Ice.ObjectHelper", false, "IceGrid.ServerDescriptor");

        var iceC_IceGrid_ServiceDescriptor_ids = ["::Ice::Object", "::IceGrid::CommunicatorDescriptor", "::IceGrid::ServiceDescriptor"];

        /**
         * An IceBox service descriptor.
         *
         **/
        IceGrid.ServiceDescriptor = function (_IceGrid$Communicator3) {
            _inherits(_class11, _IceGrid$Communicator3);

            function _class11(adapters, propertySet, dbEnvs, logs, description) {
                var name = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : "";
                var entry = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : "";

                _classCallCheck(this, _class11);

                var _this5 = _possibleConstructorReturn(this, (_class11.__proto__ || Object.getPrototypeOf(_class11)).call(this, adapters, propertySet, dbEnvs, logs, description));

                _this5.name = name;
                _this5.entry = entry;
                return _this5;
            }

            _createClass(_class11, [{
                key: "_iceWriteMemberImpl",
                value: function _iceWriteMemberImpl(ostr) {
                    ostr.writeString(this.name);
                    ostr.writeString(this.entry);
                }
            }, {
                key: "_iceReadMemberImpl",
                value: function _iceReadMemberImpl(istr) {
                    this.name = istr.readString();
                    this.entry = istr.readString();
                }
            }]);

            return _class11;
        }(IceGrid.CommunicatorDescriptor);

        Slice.defineValue(IceGrid.ServiceDescriptor, iceC_IceGrid_ServiceDescriptor_ids[2], false);

        /**
         * An IceBox service descriptor.
         *
         **/
        IceGrid.ServiceDescriptorDisp = function (_IceGrid$Communicator4) {
            _inherits(_class12, _IceGrid$Communicator4);

            function _class12() {
                _classCallCheck(this, _class12);

                return _possibleConstructorReturn(this, (_class12.__proto__ || Object.getPrototypeOf(_class12)).apply(this, arguments));
            }

            return _class12;
        }(IceGrid.CommunicatorDescriptorDisp);

        Slice.defineOperations(IceGrid.ServiceDescriptorDisp, undefined, iceC_IceGrid_ServiceDescriptor_ids, 2);

        Slice.defineSequence(IceGrid, "ServiceDescriptorSeqHelper", "Ice.ObjectHelper", false, "IceGrid.ServiceDescriptor");

        /**
         * A server template instance descriptor.
         *
         **/
        IceGrid.ServerInstanceDescriptor = function () {
            function _class13() {
                var template = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
                var parameterValues = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
                var propertySet = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new IceGrid.PropertySetDescriptor();
                var servicePropertySets = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

                _classCallCheck(this, _class13);

                this.template = template;
                this.parameterValues = parameterValues;
                this.propertySet = propertySet;
                this.servicePropertySets = servicePropertySets;
            }

            _createClass(_class13, [{
                key: "_write",
                value: function _write(ostr) {
                    ostr.writeString(this.template);
                    IceGrid.StringStringDictHelper.write(ostr, this.parameterValues);
                    IceGrid.PropertySetDescriptor.write(ostr, this.propertySet);
                    IceGrid.PropertySetDescriptorDictHelper.write(ostr, this.servicePropertySets);
                }
            }, {
                key: "_read",
                value: function _read(istr) {
                    this.template = istr.readString();
                    this.parameterValues = IceGrid.StringStringDictHelper.read(istr);
                    this.propertySet = IceGrid.PropertySetDescriptor.read(istr, this.propertySet);
                    this.servicePropertySets = IceGrid.PropertySetDescriptorDictHelper.read(istr);
                }
            }], [{
                key: "minWireSize",
                get: function get() {
                    return 5;
                }
            }]);

            return _class13;
        }();

        Slice.defineStruct(IceGrid.ServerInstanceDescriptor, false, true);

        Slice.defineSequence(IceGrid, "ServerInstanceDescriptorSeqHelper", "IceGrid.ServerInstanceDescriptor", false);

        /**
         * A template descriptor for server or service templates.
         *
         **/
        IceGrid.TemplateDescriptor = function () {
            function _class14() {
                var descriptor = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
                var parameters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
                var parameterDefaults = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

                _classCallCheck(this, _class14);

                this.descriptor = descriptor;
                this.parameters = parameters;
                this.parameterDefaults = parameterDefaults;
            }

            _createClass(_class14, [{
                key: "_write",
                value: function _write(ostr) {
                    ostr.writeValue(this.descriptor);
                    Ice.StringSeqHelper.write(ostr, this.parameters);
                    IceGrid.StringStringDictHelper.write(ostr, this.parameterDefaults);
                }
            }, {
                key: "_read",
                value: function _read(istr) {
                    var _this7 = this;

                    istr.readValue(function (obj) {
                        return _this7.descriptor = obj;
                    }, IceGrid.CommunicatorDescriptor);
                    this.parameters = Ice.StringSeqHelper.read(istr);
                    this.parameterDefaults = IceGrid.StringStringDictHelper.read(istr);
                }
            }], [{
                key: "minWireSize",
                get: function get() {
                    return 3;
                }
            }]);

            return _class14;
        }();

        Slice.defineStruct(IceGrid.TemplateDescriptor, false, true);

        Slice.defineDictionary(IceGrid, "TemplateDescriptorDict", "TemplateDescriptorDictHelper", "Ice.StringHelper", "IceGrid.TemplateDescriptor", false, undefined, undefined);

        /**
         * A service template instance descriptor.
         *
         **/
        IceGrid.ServiceInstanceDescriptor = function () {
            function _class15() {
                var template = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
                var parameterValues = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
                var descriptor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
                var propertySet = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new IceGrid.PropertySetDescriptor();

                _classCallCheck(this, _class15);

                this.template = template;
                this.parameterValues = parameterValues;
                this.descriptor = descriptor;
                this.propertySet = propertySet;
            }

            _createClass(_class15, [{
                key: "_write",
                value: function _write(ostr) {
                    ostr.writeString(this.template);
                    IceGrid.StringStringDictHelper.write(ostr, this.parameterValues);
                    ostr.writeValue(this.descriptor);
                    IceGrid.PropertySetDescriptor.write(ostr, this.propertySet);
                }
            }, {
                key: "_read",
                value: function _read(istr) {
                    var _this8 = this;

                    this.template = istr.readString();
                    this.parameterValues = IceGrid.StringStringDictHelper.read(istr);
                    istr.readValue(function (obj) {
                        return _this8.descriptor = obj;
                    }, IceGrid.ServiceDescriptor);
                    this.propertySet = IceGrid.PropertySetDescriptor.read(istr, this.propertySet);
                }
            }], [{
                key: "minWireSize",
                get: function get() {
                    return 5;
                }
            }]);

            return _class15;
        }();

        Slice.defineStruct(IceGrid.ServiceInstanceDescriptor, false, true);

        Slice.defineSequence(IceGrid, "ServiceInstanceDescriptorSeqHelper", "IceGrid.ServiceInstanceDescriptor", false);

        var iceC_IceGrid_IceBoxDescriptor_ids = ["::Ice::Object", "::IceGrid::CommunicatorDescriptor", "::IceGrid::IceBoxDescriptor", "::IceGrid::ServerDescriptor"];

        /**
         * An IceBox server descriptor.
         *
         **/
        IceGrid.IceBoxDescriptor = function (_IceGrid$ServerDescri) {
            _inherits(_class16, _IceGrid$ServerDescri);

            function _class16(adapters, propertySet, dbEnvs, logs, description, id, exe, iceVersion, pwd, options, envs, activation, activationTimeout, deactivationTimeout, applicationDistrib, distrib, allocatable, user) {
                var services = arguments.length > 18 && arguments[18] !== undefined ? arguments[18] : null;

                _classCallCheck(this, _class16);

                var _this9 = _possibleConstructorReturn(this, (_class16.__proto__ || Object.getPrototypeOf(_class16)).call(this, adapters, propertySet, dbEnvs, logs, description, id, exe, iceVersion, pwd, options, envs, activation, activationTimeout, deactivationTimeout, applicationDistrib, distrib, allocatable, user));

                _this9.services = services;
                return _this9;
            }

            _createClass(_class16, [{
                key: "_iceWriteMemberImpl",
                value: function _iceWriteMemberImpl(ostr) {
                    IceGrid.ServiceInstanceDescriptorSeqHelper.write(ostr, this.services);
                }
            }, {
                key: "_iceReadMemberImpl",
                value: function _iceReadMemberImpl(istr) {
                    this.services = IceGrid.ServiceInstanceDescriptorSeqHelper.read(istr);
                }
            }]);

            return _class16;
        }(IceGrid.ServerDescriptor);

        Slice.defineValue(IceGrid.IceBoxDescriptor, iceC_IceGrid_IceBoxDescriptor_ids[2], false);

        /**
         * An IceBox server descriptor.
         *
         **/
        IceGrid.IceBoxDescriptorDisp = function (_IceGrid$ServerDescri2) {
            _inherits(_class17, _IceGrid$ServerDescri2);

            function _class17() {
                _classCallCheck(this, _class17);

                return _possibleConstructorReturn(this, (_class17.__proto__ || Object.getPrototypeOf(_class17)).apply(this, arguments));
            }

            return _class17;
        }(IceGrid.ServerDescriptorDisp);

        Slice.defineOperations(IceGrid.IceBoxDescriptorDisp, undefined, iceC_IceGrid_IceBoxDescriptor_ids, 2);

        /**
         * A node descriptor.
         *
         **/
        IceGrid.NodeDescriptor = function () {
            function _class18() {
                var variables = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
                var serverInstances = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
                var servers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
                var loadFactor = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "";
                var description = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : "";
                var propertySets = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;

                _classCallCheck(this, _class18);

                this.variables = variables;
                this.serverInstances = serverInstances;
                this.servers = servers;
                this.loadFactor = loadFactor;
                this.description = description;
                this.propertySets = propertySets;
            }

            _createClass(_class18, [{
                key: "_write",
                value: function _write(ostr) {
                    IceGrid.StringStringDictHelper.write(ostr, this.variables);
                    IceGrid.ServerInstanceDescriptorSeqHelper.write(ostr, this.serverInstances);
                    IceGrid.ServerDescriptorSeqHelper.write(ostr, this.servers);
                    ostr.writeString(this.loadFactor);
                    ostr.writeString(this.description);
                    IceGrid.PropertySetDescriptorDictHelper.write(ostr, this.propertySets);
                }
            }, {
                key: "_read",
                value: function _read(istr) {
                    this.variables = IceGrid.StringStringDictHelper.read(istr);
                    this.serverInstances = IceGrid.ServerInstanceDescriptorSeqHelper.read(istr);
                    this.servers = IceGrid.ServerDescriptorSeqHelper.read(istr);
                    this.loadFactor = istr.readString();
                    this.description = istr.readString();
                    this.propertySets = IceGrid.PropertySetDescriptorDictHelper.read(istr);
                }
            }], [{
                key: "minWireSize",
                get: function get() {
                    return 6;
                }
            }]);

            return _class18;
        }();

        Slice.defineStruct(IceGrid.NodeDescriptor, false, true);

        Slice.defineDictionary(IceGrid, "NodeDescriptorDict", "NodeDescriptorDictHelper", "Ice.StringHelper", "IceGrid.NodeDescriptor", false, undefined, undefined);

        var iceC_IceGrid_LoadBalancingPolicy_ids = ["::Ice::Object", "::IceGrid::LoadBalancingPolicy"];

        /**
         * A base class for load balancing policies.
         *
         **/
        IceGrid.LoadBalancingPolicy = function (_Ice$Value2) {
            _inherits(_class19, _Ice$Value2);

            function _class19() {
                var nReplicas = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";

                _classCallCheck(this, _class19);

                var _this11 = _possibleConstructorReturn(this, (_class19.__proto__ || Object.getPrototypeOf(_class19)).call(this));

                _this11.nReplicas = nReplicas;
                return _this11;
            }

            _createClass(_class19, [{
                key: "_iceWriteMemberImpl",
                value: function _iceWriteMemberImpl(ostr) {
                    ostr.writeString(this.nReplicas);
                }
            }, {
                key: "_iceReadMemberImpl",
                value: function _iceReadMemberImpl(istr) {
                    this.nReplicas = istr.readString();
                }
            }]);

            return _class19;
        }(Ice.Value);

        Slice.defineValue(IceGrid.LoadBalancingPolicy, iceC_IceGrid_LoadBalancingPolicy_ids[1], false);

        /**
         * A base class for load balancing policies.
         *
         **/
        IceGrid.LoadBalancingPolicyDisp = function (_Ice$Object2) {
            _inherits(_class20, _Ice$Object2);

            function _class20() {
                _classCallCheck(this, _class20);

                return _possibleConstructorReturn(this, (_class20.__proto__ || Object.getPrototypeOf(_class20)).apply(this, arguments));
            }

            return _class20;
        }(Ice.Object);

        Slice.defineOperations(IceGrid.LoadBalancingPolicyDisp, undefined, iceC_IceGrid_LoadBalancingPolicy_ids, 1);

        var iceC_IceGrid_RandomLoadBalancingPolicy_ids = ["::Ice::Object", "::IceGrid::LoadBalancingPolicy", "::IceGrid::RandomLoadBalancingPolicy"];

        /**
         * Random load balancing policy.
         *
         **/
        IceGrid.RandomLoadBalancingPolicy = function (_IceGrid$LoadBalancin) {
            _inherits(_class21, _IceGrid$LoadBalancin);

            function _class21(nReplicas) {
                _classCallCheck(this, _class21);

                return _possibleConstructorReturn(this, (_class21.__proto__ || Object.getPrototypeOf(_class21)).call(this, nReplicas));
            }

            return _class21;
        }(IceGrid.LoadBalancingPolicy);

        Slice.defineValue(IceGrid.RandomLoadBalancingPolicy, iceC_IceGrid_RandomLoadBalancingPolicy_ids[2], false);

        /**
         * Random load balancing policy.
         *
         **/
        IceGrid.RandomLoadBalancingPolicyDisp = function (_IceGrid$LoadBalancin2) {
            _inherits(_class22, _IceGrid$LoadBalancin2);

            function _class22() {
                _classCallCheck(this, _class22);

                return _possibleConstructorReturn(this, (_class22.__proto__ || Object.getPrototypeOf(_class22)).apply(this, arguments));
            }

            return _class22;
        }(IceGrid.LoadBalancingPolicyDisp);

        Slice.defineOperations(IceGrid.RandomLoadBalancingPolicyDisp, undefined, iceC_IceGrid_RandomLoadBalancingPolicy_ids, 2);

        var iceC_IceGrid_OrderedLoadBalancingPolicy_ids = ["::Ice::Object", "::IceGrid::LoadBalancingPolicy", "::IceGrid::OrderedLoadBalancingPolicy"];

        /**
         * Ordered load balancing policy.
         *
         **/
        IceGrid.OrderedLoadBalancingPolicy = function (_IceGrid$LoadBalancin3) {
            _inherits(_class23, _IceGrid$LoadBalancin3);

            function _class23(nReplicas) {
                _classCallCheck(this, _class23);

                return _possibleConstructorReturn(this, (_class23.__proto__ || Object.getPrototypeOf(_class23)).call(this, nReplicas));
            }

            return _class23;
        }(IceGrid.LoadBalancingPolicy);

        Slice.defineValue(IceGrid.OrderedLoadBalancingPolicy, iceC_IceGrid_OrderedLoadBalancingPolicy_ids[2], false);

        /**
         * Ordered load balancing policy.
         *
         **/
        IceGrid.OrderedLoadBalancingPolicyDisp = function (_IceGrid$LoadBalancin4) {
            _inherits(_class24, _IceGrid$LoadBalancin4);

            function _class24() {
                _classCallCheck(this, _class24);

                return _possibleConstructorReturn(this, (_class24.__proto__ || Object.getPrototypeOf(_class24)).apply(this, arguments));
            }

            return _class24;
        }(IceGrid.LoadBalancingPolicyDisp);

        Slice.defineOperations(IceGrid.OrderedLoadBalancingPolicyDisp, undefined, iceC_IceGrid_OrderedLoadBalancingPolicy_ids, 2);

        var iceC_IceGrid_RoundRobinLoadBalancingPolicy_ids = ["::Ice::Object", "::IceGrid::LoadBalancingPolicy", "::IceGrid::RoundRobinLoadBalancingPolicy"];

        /**
         * Round robin load balancing policy.
         *
         **/
        IceGrid.RoundRobinLoadBalancingPolicy = function (_IceGrid$LoadBalancin5) {
            _inherits(_class25, _IceGrid$LoadBalancin5);

            function _class25(nReplicas) {
                _classCallCheck(this, _class25);

                return _possibleConstructorReturn(this, (_class25.__proto__ || Object.getPrototypeOf(_class25)).call(this, nReplicas));
            }

            return _class25;
        }(IceGrid.LoadBalancingPolicy);

        Slice.defineValue(IceGrid.RoundRobinLoadBalancingPolicy, iceC_IceGrid_RoundRobinLoadBalancingPolicy_ids[2], false);

        /**
         * Round robin load balancing policy.
         *
         **/
        IceGrid.RoundRobinLoadBalancingPolicyDisp = function (_IceGrid$LoadBalancin6) {
            _inherits(_class26, _IceGrid$LoadBalancin6);

            function _class26() {
                _classCallCheck(this, _class26);

                return _possibleConstructorReturn(this, (_class26.__proto__ || Object.getPrototypeOf(_class26)).apply(this, arguments));
            }

            return _class26;
        }(IceGrid.LoadBalancingPolicyDisp);

        Slice.defineOperations(IceGrid.RoundRobinLoadBalancingPolicyDisp, undefined, iceC_IceGrid_RoundRobinLoadBalancingPolicy_ids, 2);

        var iceC_IceGrid_AdaptiveLoadBalancingPolicy_ids = ["::Ice::Object", "::IceGrid::AdaptiveLoadBalancingPolicy", "::IceGrid::LoadBalancingPolicy"];

        /**
         * Adaptive load balancing policy.
         *
         **/
        IceGrid.AdaptiveLoadBalancingPolicy = function (_IceGrid$LoadBalancin7) {
            _inherits(_class27, _IceGrid$LoadBalancin7);

            function _class27(nReplicas) {
                var loadSample = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";

                _classCallCheck(this, _class27);

                var _this19 = _possibleConstructorReturn(this, (_class27.__proto__ || Object.getPrototypeOf(_class27)).call(this, nReplicas));

                _this19.loadSample = loadSample;
                return _this19;
            }

            _createClass(_class27, [{
                key: "_iceWriteMemberImpl",
                value: function _iceWriteMemberImpl(ostr) {
                    ostr.writeString(this.loadSample);
                }
            }, {
                key: "_iceReadMemberImpl",
                value: function _iceReadMemberImpl(istr) {
                    this.loadSample = istr.readString();
                }
            }]);

            return _class27;
        }(IceGrid.LoadBalancingPolicy);

        Slice.defineValue(IceGrid.AdaptiveLoadBalancingPolicy, iceC_IceGrid_AdaptiveLoadBalancingPolicy_ids[1], false);

        /**
         * Adaptive load balancing policy.
         *
         **/
        IceGrid.AdaptiveLoadBalancingPolicyDisp = function (_IceGrid$LoadBalancin8) {
            _inherits(_class28, _IceGrid$LoadBalancin8);

            function _class28() {
                _classCallCheck(this, _class28);

                return _possibleConstructorReturn(this, (_class28.__proto__ || Object.getPrototypeOf(_class28)).apply(this, arguments));
            }

            return _class28;
        }(IceGrid.LoadBalancingPolicyDisp);

        Slice.defineOperations(IceGrid.AdaptiveLoadBalancingPolicyDisp, undefined, iceC_IceGrid_AdaptiveLoadBalancingPolicy_ids, 1);

        /**
         * A replica group descriptor.
         *
         **/
        IceGrid.ReplicaGroupDescriptor = function () {
            function _class29() {
                var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
                var loadBalancing = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
                var proxyOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "";
                var objects = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
                var description = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : "";
                var filter = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : "";

                _classCallCheck(this, _class29);

                this.id = id;
                this.loadBalancing = loadBalancing;
                this.proxyOptions = proxyOptions;
                this.objects = objects;
                this.description = description;
                this.filter = filter;
            }

            _createClass(_class29, [{
                key: "_write",
                value: function _write(ostr) {
                    ostr.writeString(this.id);
                    ostr.writeValue(this.loadBalancing);
                    ostr.writeString(this.proxyOptions);
                    IceGrid.ObjectDescriptorSeqHelper.write(ostr, this.objects);
                    ostr.writeString(this.description);
                    ostr.writeString(this.filter);
                }
            }, {
                key: "_read",
                value: function _read(istr) {
                    var _this21 = this;

                    this.id = istr.readString();
                    istr.readValue(function (obj) {
                        return _this21.loadBalancing = obj;
                    }, IceGrid.LoadBalancingPolicy);
                    this.proxyOptions = istr.readString();
                    this.objects = IceGrid.ObjectDescriptorSeqHelper.read(istr);
                    this.description = istr.readString();
                    this.filter = istr.readString();
                }
            }], [{
                key: "minWireSize",
                get: function get() {
                    return 6;
                }
            }]);

            return _class29;
        }();

        Slice.defineStruct(IceGrid.ReplicaGroupDescriptor, false, true);

        Slice.defineSequence(IceGrid, "ReplicaGroupDescriptorSeqHelper", "IceGrid.ReplicaGroupDescriptor", false);

        /**
         * An application descriptor.
         *
         **/
        IceGrid.ApplicationDescriptor = function () {
            function _class30() {
                var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
                var variables = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
                var replicaGroups = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
                var serverTemplates = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
                var serviceTemplates = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;
                var nodes = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;
                var distrib = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new IceGrid.DistributionDescriptor();
                var description = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : "";
                var propertySets = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : null;

                _classCallCheck(this, _class30);

                this.name = name;
                this.variables = variables;
                this.replicaGroups = replicaGroups;
                this.serverTemplates = serverTemplates;
                this.serviceTemplates = serviceTemplates;
                this.nodes = nodes;
                this.distrib = distrib;
                this.description = description;
                this.propertySets = propertySets;
            }

            _createClass(_class30, [{
                key: "_write",
                value: function _write(ostr) {
                    ostr.writeString(this.name);
                    IceGrid.StringStringDictHelper.write(ostr, this.variables);
                    IceGrid.ReplicaGroupDescriptorSeqHelper.write(ostr, this.replicaGroups);
                    IceGrid.TemplateDescriptorDictHelper.write(ostr, this.serverTemplates);
                    IceGrid.TemplateDescriptorDictHelper.write(ostr, this.serviceTemplates);
                    IceGrid.NodeDescriptorDictHelper.write(ostr, this.nodes);
                    IceGrid.DistributionDescriptor.write(ostr, this.distrib);
                    ostr.writeString(this.description);
                    IceGrid.PropertySetDescriptorDictHelper.write(ostr, this.propertySets);
                }
            }, {
                key: "_read",
                value: function _read(istr) {
                    this.name = istr.readString();
                    this.variables = IceGrid.StringStringDictHelper.read(istr);
                    this.replicaGroups = IceGrid.ReplicaGroupDescriptorSeqHelper.read(istr);
                    this.serverTemplates = IceGrid.TemplateDescriptorDictHelper.read(istr);
                    this.serviceTemplates = IceGrid.TemplateDescriptorDictHelper.read(istr);
                    this.nodes = IceGrid.NodeDescriptorDictHelper.read(istr);
                    this.distrib = IceGrid.DistributionDescriptor.read(istr, this.distrib);
                    this.description = istr.readString();
                    this.propertySets = IceGrid.PropertySetDescriptorDictHelper.read(istr);
                }
            }], [{
                key: "minWireSize",
                get: function get() {
                    return 10;
                }
            }]);

            return _class30;
        }();

        Slice.defineStruct(IceGrid.ApplicationDescriptor, false, true);

        Slice.defineSequence(IceGrid, "ApplicationDescriptorSeqHelper", "IceGrid.ApplicationDescriptor", false);

        var iceC_IceGrid_BoxedString_ids = ["::Ice::Object", "::IceGrid::BoxedString"];

        /**
         * A "boxed" string.
         *
         **/
        IceGrid.BoxedString = function (_Ice$Value3) {
            _inherits(_class31, _Ice$Value3);

            function _class31() {
                var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";

                _classCallCheck(this, _class31);

                var _this22 = _possibleConstructorReturn(this, (_class31.__proto__ || Object.getPrototypeOf(_class31)).call(this));

                _this22.value = value;
                return _this22;
            }

            _createClass(_class31, [{
                key: "_iceWriteMemberImpl",
                value: function _iceWriteMemberImpl(ostr) {
                    ostr.writeString(this.value);
                }
            }, {
                key: "_iceReadMemberImpl",
                value: function _iceReadMemberImpl(istr) {
                    this.value = istr.readString();
                }
            }]);

            return _class31;
        }(Ice.Value);

        Slice.defineValue(IceGrid.BoxedString, iceC_IceGrid_BoxedString_ids[1], false);

        /**
         * A "boxed" string.
         *
         **/
        IceGrid.BoxedStringDisp = function (_Ice$Object3) {
            _inherits(_class32, _Ice$Object3);

            function _class32() {
                _classCallCheck(this, _class32);

                return _possibleConstructorReturn(this, (_class32.__proto__ || Object.getPrototypeOf(_class32)).apply(this, arguments));
            }

            return _class32;
        }(Ice.Object);

        Slice.defineOperations(IceGrid.BoxedStringDisp, undefined, iceC_IceGrid_BoxedString_ids, 1);

        /**
         * A node update descriptor to describe the updates to apply to a
         * node of a deployed application.
         *
         **/
        IceGrid.NodeUpdateDescriptor = function () {
            function _class33() {
                var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
                var description = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
                var variables = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
                var removeVariables = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
                var propertySets = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;
                var removePropertySets = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;
                var serverInstances = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : null;
                var servers = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : null;
                var removeServers = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : null;
                var loadFactor = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : null;

                _classCallCheck(this, _class33);

                this.name = name;
                this.description = description;
                this.variables = variables;
                this.removeVariables = removeVariables;
                this.propertySets = propertySets;
                this.removePropertySets = removePropertySets;
                this.serverInstances = serverInstances;
                this.servers = servers;
                this.removeServers = removeServers;
                this.loadFactor = loadFactor;
            }

            _createClass(_class33, [{
                key: "_write",
                value: function _write(ostr) {
                    ostr.writeString(this.name);
                    ostr.writeValue(this.description);
                    IceGrid.StringStringDictHelper.write(ostr, this.variables);
                    Ice.StringSeqHelper.write(ostr, this.removeVariables);
                    IceGrid.PropertySetDescriptorDictHelper.write(ostr, this.propertySets);
                    Ice.StringSeqHelper.write(ostr, this.removePropertySets);
                    IceGrid.ServerInstanceDescriptorSeqHelper.write(ostr, this.serverInstances);
                    IceGrid.ServerDescriptorSeqHelper.write(ostr, this.servers);
                    Ice.StringSeqHelper.write(ostr, this.removeServers);
                    ostr.writeValue(this.loadFactor);
                }
            }, {
                key: "_read",
                value: function _read(istr) {
                    var _this24 = this;

                    this.name = istr.readString();
                    istr.readValue(function (obj) {
                        return _this24.description = obj;
                    }, IceGrid.BoxedString);
                    this.variables = IceGrid.StringStringDictHelper.read(istr);
                    this.removeVariables = Ice.StringSeqHelper.read(istr);
                    this.propertySets = IceGrid.PropertySetDescriptorDictHelper.read(istr);
                    this.removePropertySets = Ice.StringSeqHelper.read(istr);
                    this.serverInstances = IceGrid.ServerInstanceDescriptorSeqHelper.read(istr);
                    this.servers = IceGrid.ServerDescriptorSeqHelper.read(istr);
                    this.removeServers = Ice.StringSeqHelper.read(istr);
                    istr.readValue(function (obj) {
                        return _this24.loadFactor = obj;
                    }, IceGrid.BoxedString);
                }
            }], [{
                key: "minWireSize",
                get: function get() {
                    return 10;
                }
            }]);

            return _class33;
        }();

        Slice.defineStruct(IceGrid.NodeUpdateDescriptor, false, true);

        Slice.defineSequence(IceGrid, "NodeUpdateDescriptorSeqHelper", "IceGrid.NodeUpdateDescriptor", false);

        var iceC_IceGrid_BoxedDistributionDescriptor_ids = ["::Ice::Object", "::IceGrid::BoxedDistributionDescriptor"];

        /**
         * A "boxed" distribution descriptor.
         *
         **/
        IceGrid.BoxedDistributionDescriptor = function (_Ice$Value4) {
            _inherits(_class34, _Ice$Value4);

            function _class34() {
                var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new IceGrid.DistributionDescriptor();

                _classCallCheck(this, _class34);

                var _this25 = _possibleConstructorReturn(this, (_class34.__proto__ || Object.getPrototypeOf(_class34)).call(this));

                _this25.value = value;
                return _this25;
            }

            _createClass(_class34, [{
                key: "_iceWriteMemberImpl",
                value: function _iceWriteMemberImpl(ostr) {
                    IceGrid.DistributionDescriptor.write(ostr, this.value);
                }
            }, {
                key: "_iceReadMemberImpl",
                value: function _iceReadMemberImpl(istr) {
                    this.value = IceGrid.DistributionDescriptor.read(istr, this.value);
                }
            }]);

            return _class34;
        }(Ice.Value);

        Slice.defineValue(IceGrid.BoxedDistributionDescriptor, iceC_IceGrid_BoxedDistributionDescriptor_ids[1], false);

        /**
         * A "boxed" distribution descriptor.
         *
         **/
        IceGrid.BoxedDistributionDescriptorDisp = function (_Ice$Object4) {
            _inherits(_class35, _Ice$Object4);

            function _class35() {
                _classCallCheck(this, _class35);

                return _possibleConstructorReturn(this, (_class35.__proto__ || Object.getPrototypeOf(_class35)).apply(this, arguments));
            }

            return _class35;
        }(Ice.Object);

        Slice.defineOperations(IceGrid.BoxedDistributionDescriptorDisp, undefined, iceC_IceGrid_BoxedDistributionDescriptor_ids, 1);

        /**
         * An application update descriptor to describe the updates to apply
         * to a deployed application.
         *
         **/
        IceGrid.ApplicationUpdateDescriptor = function () {
            function _class36() {
                var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
                var description = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
                var distrib = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
                var variables = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
                var removeVariables = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;
                var propertySets = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;
                var removePropertySets = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : null;
                var replicaGroups = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : null;
                var removeReplicaGroups = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : null;
                var serverTemplates = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : null;
                var removeServerTemplates = arguments.length > 10 && arguments[10] !== undefined ? arguments[10] : null;
                var serviceTemplates = arguments.length > 11 && arguments[11] !== undefined ? arguments[11] : null;
                var removeServiceTemplates = arguments.length > 12 && arguments[12] !== undefined ? arguments[12] : null;
                var nodes = arguments.length > 13 && arguments[13] !== undefined ? arguments[13] : null;
                var removeNodes = arguments.length > 14 && arguments[14] !== undefined ? arguments[14] : null;

                _classCallCheck(this, _class36);

                this.name = name;
                this.description = description;
                this.distrib = distrib;
                this.variables = variables;
                this.removeVariables = removeVariables;
                this.propertySets = propertySets;
                this.removePropertySets = removePropertySets;
                this.replicaGroups = replicaGroups;
                this.removeReplicaGroups = removeReplicaGroups;
                this.serverTemplates = serverTemplates;
                this.removeServerTemplates = removeServerTemplates;
                this.serviceTemplates = serviceTemplates;
                this.removeServiceTemplates = removeServiceTemplates;
                this.nodes = nodes;
                this.removeNodes = removeNodes;
            }

            _createClass(_class36, [{
                key: "_write",
                value: function _write(ostr) {
                    ostr.writeString(this.name);
                    ostr.writeValue(this.description);
                    ostr.writeValue(this.distrib);
                    IceGrid.StringStringDictHelper.write(ostr, this.variables);
                    Ice.StringSeqHelper.write(ostr, this.removeVariables);
                    IceGrid.PropertySetDescriptorDictHelper.write(ostr, this.propertySets);
                    Ice.StringSeqHelper.write(ostr, this.removePropertySets);
                    IceGrid.ReplicaGroupDescriptorSeqHelper.write(ostr, this.replicaGroups);
                    Ice.StringSeqHelper.write(ostr, this.removeReplicaGroups);
                    IceGrid.TemplateDescriptorDictHelper.write(ostr, this.serverTemplates);
                    Ice.StringSeqHelper.write(ostr, this.removeServerTemplates);
                    IceGrid.TemplateDescriptorDictHelper.write(ostr, this.serviceTemplates);
                    Ice.StringSeqHelper.write(ostr, this.removeServiceTemplates);
                    IceGrid.NodeUpdateDescriptorSeqHelper.write(ostr, this.nodes);
                    Ice.StringSeqHelper.write(ostr, this.removeNodes);
                }
            }, {
                key: "_read",
                value: function _read(istr) {
                    var _this27 = this;

                    this.name = istr.readString();
                    istr.readValue(function (obj) {
                        return _this27.description = obj;
                    }, IceGrid.BoxedString);
                    istr.readValue(function (obj) {
                        return _this27.distrib = obj;
                    }, IceGrid.BoxedDistributionDescriptor);
                    this.variables = IceGrid.StringStringDictHelper.read(istr);
                    this.removeVariables = Ice.StringSeqHelper.read(istr);
                    this.propertySets = IceGrid.PropertySetDescriptorDictHelper.read(istr);
                    this.removePropertySets = Ice.StringSeqHelper.read(istr);
                    this.replicaGroups = IceGrid.ReplicaGroupDescriptorSeqHelper.read(istr);
                    this.removeReplicaGroups = Ice.StringSeqHelper.read(istr);
                    this.serverTemplates = IceGrid.TemplateDescriptorDictHelper.read(istr);
                    this.removeServerTemplates = Ice.StringSeqHelper.read(istr);
                    this.serviceTemplates = IceGrid.TemplateDescriptorDictHelper.read(istr);
                    this.removeServiceTemplates = Ice.StringSeqHelper.read(istr);
                    this.nodes = IceGrid.NodeUpdateDescriptorSeqHelper.read(istr);
                    this.removeNodes = Ice.StringSeqHelper.read(istr);
                }
            }], [{
                key: "minWireSize",
                get: function get() {
                    return 15;
                }
            }]);

            return _class36;
        }();

        Slice.defineStruct(IceGrid.ApplicationUpdateDescriptor, false, true);
    })();

    (function () {
        // **********************************************************************
        //
        // Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
        //
        // This copy of Ice is licensed to you under the terms described in the
        // ICE_LICENSE file included in this distribution.
        //
        // **********************************************************************
        //
        // Ice version 3.7.0
        //
        // <auto-generated>
        //
        // Generated from file `Exception.ice'
        //
        // Warning: do not edit this file.
        //
        // </auto-generated>
        //


        /**
         * This exception is raised if an application does not exist.
         *
         **/
        IceGrid.ApplicationNotExistException = function (_Ice$UserException) {
            _inherits(_class37, _Ice$UserException);

            function _class37() {
                var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";

                var _cause = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";

                _classCallCheck(this, _class37);

                var _this28 = _possibleConstructorReturn(this, (_class37.__proto__ || Object.getPrototypeOf(_class37)).call(this, _cause));

                _this28.name = name;
                return _this28;
            }

            _createClass(_class37, [{
                key: "_mostDerivedType",
                value: function _mostDerivedType() {
                    return IceGrid.ApplicationNotExistException;
                }
            }, {
                key: "_writeMemberImpl",
                value: function _writeMemberImpl(ostr) {
                    ostr.writeString(this.name);
                }
            }, {
                key: "_readMemberImpl",
                value: function _readMemberImpl(istr) {
                    this.name = istr.readString();
                }
            }], [{
                key: "_parent",
                get: function get() {
                    return Ice.UserException;
                }
            }, {
                key: "_id",
                get: function get() {
                    return "::IceGrid::ApplicationNotExistException";
                }
            }]);

            return _class37;
        }(Ice.UserException);

        /**
         * This exception is raised if a server does not exist.
         *
         **/
        IceGrid.ServerNotExistException = function (_Ice$UserException2) {
            _inherits(_class38, _Ice$UserException2);

            function _class38() {
                var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";

                var _cause = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";

                _classCallCheck(this, _class38);

                var _this29 = _possibleConstructorReturn(this, (_class38.__proto__ || Object.getPrototypeOf(_class38)).call(this, _cause));

                _this29.id = id;
                return _this29;
            }

            _createClass(_class38, [{
                key: "_mostDerivedType",
                value: function _mostDerivedType() {
                    return IceGrid.ServerNotExistException;
                }
            }, {
                key: "_writeMemberImpl",
                value: function _writeMemberImpl(ostr) {
                    ostr.writeString(this.id);
                }
            }, {
                key: "_readMemberImpl",
                value: function _readMemberImpl(istr) {
                    this.id = istr.readString();
                }
            }], [{
                key: "_parent",
                get: function get() {
                    return Ice.UserException;
                }
            }, {
                key: "_id",
                get: function get() {
                    return "::IceGrid::ServerNotExistException";
                }
            }]);

            return _class38;
        }(Ice.UserException);

        /**
         * This exception is raised if a server failed to start.
         *
         **/
        IceGrid.ServerStartException = function (_Ice$UserException3) {
            _inherits(_class39, _Ice$UserException3);

            function _class39() {
                var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
                var reason = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";

                var _cause = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "";

                _classCallCheck(this, _class39);

                var _this30 = _possibleConstructorReturn(this, (_class39.__proto__ || Object.getPrototypeOf(_class39)).call(this, _cause));

                _this30.id = id;
                _this30.reason = reason;
                return _this30;
            }

            _createClass(_class39, [{
                key: "_mostDerivedType",
                value: function _mostDerivedType() {
                    return IceGrid.ServerStartException;
                }
            }, {
                key: "_writeMemberImpl",
                value: function _writeMemberImpl(ostr) {
                    ostr.writeString(this.id);
                    ostr.writeString(this.reason);
                }
            }, {
                key: "_readMemberImpl",
                value: function _readMemberImpl(istr) {
                    this.id = istr.readString();
                    this.reason = istr.readString();
                }
            }], [{
                key: "_parent",
                get: function get() {
                    return Ice.UserException;
                }
            }, {
                key: "_id",
                get: function get() {
                    return "::IceGrid::ServerStartException";
                }
            }]);

            return _class39;
        }(Ice.UserException);

        /**
         * This exception is raised if a server failed to stop.
         *
         **/
        IceGrid.ServerStopException = function (_Ice$UserException4) {
            _inherits(_class40, _Ice$UserException4);

            function _class40() {
                var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
                var reason = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";

                var _cause = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "";

                _classCallCheck(this, _class40);

                var _this31 = _possibleConstructorReturn(this, (_class40.__proto__ || Object.getPrototypeOf(_class40)).call(this, _cause));

                _this31.id = id;
                _this31.reason = reason;
                return _this31;
            }

            _createClass(_class40, [{
                key: "_mostDerivedType",
                value: function _mostDerivedType() {
                    return IceGrid.ServerStopException;
                }
            }, {
                key: "_writeMemberImpl",
                value: function _writeMemberImpl(ostr) {
                    ostr.writeString(this.id);
                    ostr.writeString(this.reason);
                }
            }, {
                key: "_readMemberImpl",
                value: function _readMemberImpl(istr) {
                    this.id = istr.readString();
                    this.reason = istr.readString();
                }
            }], [{
                key: "_parent",
                get: function get() {
                    return Ice.UserException;
                }
            }, {
                key: "_id",
                get: function get() {
                    return "::IceGrid::ServerStopException";
                }
            }]);

            return _class40;
        }(Ice.UserException);

        /**
         * This exception is raised if an adapter does not exist.
         *
         **/
        IceGrid.AdapterNotExistException = function (_Ice$UserException5) {
            _inherits(_class41, _Ice$UserException5);

            function _class41() {
                var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";

                var _cause = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";

                _classCallCheck(this, _class41);

                var _this32 = _possibleConstructorReturn(this, (_class41.__proto__ || Object.getPrototypeOf(_class41)).call(this, _cause));

                _this32.id = id;
                return _this32;
            }

            _createClass(_class41, [{
                key: "_mostDerivedType",
                value: function _mostDerivedType() {
                    return IceGrid.AdapterNotExistException;
                }
            }, {
                key: "_writeMemberImpl",
                value: function _writeMemberImpl(ostr) {
                    ostr.writeString(this.id);
                }
            }, {
                key: "_readMemberImpl",
                value: function _readMemberImpl(istr) {
                    this.id = istr.readString();
                }
            }], [{
                key: "_parent",
                get: function get() {
                    return Ice.UserException;
                }
            }, {
                key: "_id",
                get: function get() {
                    return "::IceGrid::AdapterNotExistException";
                }
            }]);

            return _class41;
        }(Ice.UserException);

        /**
         * This exception is raised if an object already exists.
         *
         **/
        IceGrid.ObjectExistsException = function (_Ice$UserException6) {
            _inherits(_class42, _Ice$UserException6);

            function _class42() {
                var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Ice.Identity();

                var _cause = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";

                _classCallCheck(this, _class42);

                var _this33 = _possibleConstructorReturn(this, (_class42.__proto__ || Object.getPrototypeOf(_class42)).call(this, _cause));

                _this33.id = id;
                return _this33;
            }

            _createClass(_class42, [{
                key: "_mostDerivedType",
                value: function _mostDerivedType() {
                    return IceGrid.ObjectExistsException;
                }
            }, {
                key: "_writeMemberImpl",
                value: function _writeMemberImpl(ostr) {
                    Ice.Identity.write(ostr, this.id);
                }
            }, {
                key: "_readMemberImpl",
                value: function _readMemberImpl(istr) {
                    this.id = Ice.Identity.read(istr, this.id);
                }
            }], [{
                key: "_parent",
                get: function get() {
                    return Ice.UserException;
                }
            }, {
                key: "_id",
                get: function get() {
                    return "::IceGrid::ObjectExistsException";
                }
            }]);

            return _class42;
        }(Ice.UserException);

        /**
         * This exception is raised if an object is not registered.
         *
         **/
        IceGrid.ObjectNotRegisteredException = function (_Ice$UserException7) {
            _inherits(_class43, _Ice$UserException7);

            function _class43() {
                var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Ice.Identity();

                var _cause = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";

                _classCallCheck(this, _class43);

                var _this34 = _possibleConstructorReturn(this, (_class43.__proto__ || Object.getPrototypeOf(_class43)).call(this, _cause));

                _this34.id = id;
                return _this34;
            }

            _createClass(_class43, [{
                key: "_mostDerivedType",
                value: function _mostDerivedType() {
                    return IceGrid.ObjectNotRegisteredException;
                }
            }, {
                key: "_writeMemberImpl",
                value: function _writeMemberImpl(ostr) {
                    Ice.Identity.write(ostr, this.id);
                }
            }, {
                key: "_readMemberImpl",
                value: function _readMemberImpl(istr) {
                    this.id = Ice.Identity.read(istr, this.id);
                }
            }], [{
                key: "_parent",
                get: function get() {
                    return Ice.UserException;
                }
            }, {
                key: "_id",
                get: function get() {
                    return "::IceGrid::ObjectNotRegisteredException";
                }
            }]);

            return _class43;
        }(Ice.UserException);

        /**
         * This exception is raised if a node does not exist.
         *
         **/
        IceGrid.NodeNotExistException = function (_Ice$UserException8) {
            _inherits(_class44, _Ice$UserException8);

            function _class44() {
                var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";

                var _cause = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";

                _classCallCheck(this, _class44);

                var _this35 = _possibleConstructorReturn(this, (_class44.__proto__ || Object.getPrototypeOf(_class44)).call(this, _cause));

                _this35.name = name;
                return _this35;
            }

            _createClass(_class44, [{
                key: "_mostDerivedType",
                value: function _mostDerivedType() {
                    return IceGrid.NodeNotExistException;
                }
            }, {
                key: "_writeMemberImpl",
                value: function _writeMemberImpl(ostr) {
                    ostr.writeString(this.name);
                }
            }, {
                key: "_readMemberImpl",
                value: function _readMemberImpl(istr) {
                    this.name = istr.readString();
                }
            }], [{
                key: "_parent",
                get: function get() {
                    return Ice.UserException;
                }
            }, {
                key: "_id",
                get: function get() {
                    return "::IceGrid::NodeNotExistException";
                }
            }]);

            return _class44;
        }(Ice.UserException);

        /**
         * This exception is raised if a registry does not exist.
         *
         **/
        IceGrid.RegistryNotExistException = function (_Ice$UserException9) {
            _inherits(_class45, _Ice$UserException9);

            function _class45() {
                var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";

                var _cause = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";

                _classCallCheck(this, _class45);

                var _this36 = _possibleConstructorReturn(this, (_class45.__proto__ || Object.getPrototypeOf(_class45)).call(this, _cause));

                _this36.name = name;
                return _this36;
            }

            _createClass(_class45, [{
                key: "_mostDerivedType",
                value: function _mostDerivedType() {
                    return IceGrid.RegistryNotExistException;
                }
            }, {
                key: "_writeMemberImpl",
                value: function _writeMemberImpl(ostr) {
                    ostr.writeString(this.name);
                }
            }, {
                key: "_readMemberImpl",
                value: function _readMemberImpl(istr) {
                    this.name = istr.readString();
                }
            }], [{
                key: "_parent",
                get: function get() {
                    return Ice.UserException;
                }
            }, {
                key: "_id",
                get: function get() {
                    return "::IceGrid::RegistryNotExistException";
                }
            }]);

            return _class45;
        }(Ice.UserException);

        /**
         * An exception for deployment errors.
         *
         **/
        IceGrid.DeploymentException = function (_Ice$UserException10) {
            _inherits(_class46, _Ice$UserException10);

            function _class46() {
                var reason = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";

                var _cause = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";

                _classCallCheck(this, _class46);

                var _this37 = _possibleConstructorReturn(this, (_class46.__proto__ || Object.getPrototypeOf(_class46)).call(this, _cause));

                _this37.reason = reason;
                return _this37;
            }

            _createClass(_class46, [{
                key: "_mostDerivedType",
                value: function _mostDerivedType() {
                    return IceGrid.DeploymentException;
                }
            }, {
                key: "_writeMemberImpl",
                value: function _writeMemberImpl(ostr) {
                    ostr.writeString(this.reason);
                }
            }, {
                key: "_readMemberImpl",
                value: function _readMemberImpl(istr) {
                    this.reason = istr.readString();
                }
            }], [{
                key: "_parent",
                get: function get() {
                    return Ice.UserException;
                }
            }, {
                key: "_id",
                get: function get() {
                    return "::IceGrid::DeploymentException";
                }
            }]);

            return _class46;
        }(Ice.UserException);

        /**
         * This exception is raised if a node could not be reached.
         *
         **/
        IceGrid.NodeUnreachableException = function (_Ice$UserException11) {
            _inherits(_class47, _Ice$UserException11);

            function _class47() {
                var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
                var reason = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";

                var _cause = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "";

                _classCallCheck(this, _class47);

                var _this38 = _possibleConstructorReturn(this, (_class47.__proto__ || Object.getPrototypeOf(_class47)).call(this, _cause));

                _this38.name = name;
                _this38.reason = reason;
                return _this38;
            }

            _createClass(_class47, [{
                key: "_mostDerivedType",
                value: function _mostDerivedType() {
                    return IceGrid.NodeUnreachableException;
                }
            }, {
                key: "_writeMemberImpl",
                value: function _writeMemberImpl(ostr) {
                    ostr.writeString(this.name);
                    ostr.writeString(this.reason);
                }
            }, {
                key: "_readMemberImpl",
                value: function _readMemberImpl(istr) {
                    this.name = istr.readString();
                    this.reason = istr.readString();
                }
            }], [{
                key: "_parent",
                get: function get() {
                    return Ice.UserException;
                }
            }, {
                key: "_id",
                get: function get() {
                    return "::IceGrid::NodeUnreachableException";
                }
            }]);

            return _class47;
        }(Ice.UserException);

        /**
         * This exception is raised if a server could not be reached.
         *
         **/
        IceGrid.ServerUnreachableException = function (_Ice$UserException12) {
            _inherits(_class48, _Ice$UserException12);

            function _class48() {
                var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
                var reason = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";

                var _cause = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "";

                _classCallCheck(this, _class48);

                var _this39 = _possibleConstructorReturn(this, (_class48.__proto__ || Object.getPrototypeOf(_class48)).call(this, _cause));

                _this39.name = name;
                _this39.reason = reason;
                return _this39;
            }

            _createClass(_class48, [{
                key: "_mostDerivedType",
                value: function _mostDerivedType() {
                    return IceGrid.ServerUnreachableException;
                }
            }, {
                key: "_writeMemberImpl",
                value: function _writeMemberImpl(ostr) {
                    ostr.writeString(this.name);
                    ostr.writeString(this.reason);
                }
            }, {
                key: "_readMemberImpl",
                value: function _readMemberImpl(istr) {
                    this.name = istr.readString();
                    this.reason = istr.readString();
                }
            }], [{
                key: "_parent",
                get: function get() {
                    return Ice.UserException;
                }
            }, {
                key: "_id",
                get: function get() {
                    return "::IceGrid::ServerUnreachableException";
                }
            }]);

            return _class48;
        }(Ice.UserException);

        /**
         * This exception is raised if a registry could not be reached.
         *
         **/
        IceGrid.RegistryUnreachableException = function (_Ice$UserException13) {
            _inherits(_class49, _Ice$UserException13);

            function _class49() {
                var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
                var reason = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";

                var _cause = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "";

                _classCallCheck(this, _class49);

                var _this40 = _possibleConstructorReturn(this, (_class49.__proto__ || Object.getPrototypeOf(_class49)).call(this, _cause));

                _this40.name = name;
                _this40.reason = reason;
                return _this40;
            }

            _createClass(_class49, [{
                key: "_mostDerivedType",
                value: function _mostDerivedType() {
                    return IceGrid.RegistryUnreachableException;
                }
            }, {
                key: "_writeMemberImpl",
                value: function _writeMemberImpl(ostr) {
                    ostr.writeString(this.name);
                    ostr.writeString(this.reason);
                }
            }, {
                key: "_readMemberImpl",
                value: function _readMemberImpl(istr) {
                    this.name = istr.readString();
                    this.reason = istr.readString();
                }
            }], [{
                key: "_parent",
                get: function get() {
                    return Ice.UserException;
                }
            }, {
                key: "_id",
                get: function get() {
                    return "::IceGrid::RegistryUnreachableException";
                }
            }]);

            return _class49;
        }(Ice.UserException);

        /**
         * This exception is raised if an unknown signal was sent to
         * to a server.
         *
         **/
        IceGrid.BadSignalException = function (_Ice$UserException14) {
            _inherits(_class50, _Ice$UserException14);

            function _class50() {
                var reason = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";

                var _cause = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";

                _classCallCheck(this, _class50);

                var _this41 = _possibleConstructorReturn(this, (_class50.__proto__ || Object.getPrototypeOf(_class50)).call(this, _cause));

                _this41.reason = reason;
                return _this41;
            }

            _createClass(_class50, [{
                key: "_mostDerivedType",
                value: function _mostDerivedType() {
                    return IceGrid.BadSignalException;
                }
            }, {
                key: "_writeMemberImpl",
                value: function _writeMemberImpl(ostr) {
                    ostr.writeString(this.reason);
                }
            }, {
                key: "_readMemberImpl",
                value: function _readMemberImpl(istr) {
                    this.reason = istr.readString();
                }
            }], [{
                key: "_parent",
                get: function get() {
                    return Ice.UserException;
                }
            }, {
                key: "_id",
                get: function get() {
                    return "::IceGrid::BadSignalException";
                }
            }]);

            return _class50;
        }(Ice.UserException);

        /**
         * This exception is raised if a patch failed.
         *
         **/
        IceGrid.PatchException = function (_Ice$UserException15) {
            _inherits(_class51, _Ice$UserException15);

            function _class51() {
                var reasons = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

                var _cause = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";

                _classCallCheck(this, _class51);

                var _this42 = _possibleConstructorReturn(this, (_class51.__proto__ || Object.getPrototypeOf(_class51)).call(this, _cause));

                _this42.reasons = reasons;
                return _this42;
            }

            _createClass(_class51, [{
                key: "_mostDerivedType",
                value: function _mostDerivedType() {
                    return IceGrid.PatchException;
                }
            }, {
                key: "_writeMemberImpl",
                value: function _writeMemberImpl(ostr) {
                    Ice.StringSeqHelper.write(ostr, this.reasons);
                }
            }, {
                key: "_readMemberImpl",
                value: function _readMemberImpl(istr) {
                    this.reasons = Ice.StringSeqHelper.read(istr);
                }
            }], [{
                key: "_parent",
                get: function get() {
                    return Ice.UserException;
                }
            }, {
                key: "_id",
                get: function get() {
                    return "::IceGrid::PatchException";
                }
            }]);

            return _class51;
        }(Ice.UserException);

        /**
         * This exception is raised if a registry lock wasn't
         * acquired or is already held by a session.
         *
         **/
        IceGrid.AccessDeniedException = function (_Ice$UserException16) {
            _inherits(_class52, _Ice$UserException16);

            function _class52() {
                var lockUserId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";

                var _cause = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";

                _classCallCheck(this, _class52);

                var _this43 = _possibleConstructorReturn(this, (_class52.__proto__ || Object.getPrototypeOf(_class52)).call(this, _cause));

                _this43.lockUserId = lockUserId;
                return _this43;
            }

            _createClass(_class52, [{
                key: "_mostDerivedType",
                value: function _mostDerivedType() {
                    return IceGrid.AccessDeniedException;
                }
            }, {
                key: "_writeMemberImpl",
                value: function _writeMemberImpl(ostr) {
                    ostr.writeString(this.lockUserId);
                }
            }, {
                key: "_readMemberImpl",
                value: function _readMemberImpl(istr) {
                    this.lockUserId = istr.readString();
                }
            }], [{
                key: "_parent",
                get: function get() {
                    return Ice.UserException;
                }
            }, {
                key: "_id",
                get: function get() {
                    return "::IceGrid::AccessDeniedException";
                }
            }]);

            return _class52;
        }(Ice.UserException);

        /**
         * This exception is raised if the allocation of an object failed.
         *
         **/
        IceGrid.AllocationException = function (_Ice$UserException17) {
            _inherits(_class53, _Ice$UserException17);

            function _class53() {
                var reason = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";

                var _cause = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";

                _classCallCheck(this, _class53);

                var _this44 = _possibleConstructorReturn(this, (_class53.__proto__ || Object.getPrototypeOf(_class53)).call(this, _cause));

                _this44.reason = reason;
                return _this44;
            }

            _createClass(_class53, [{
                key: "_mostDerivedType",
                value: function _mostDerivedType() {
                    return IceGrid.AllocationException;
                }
            }, {
                key: "_writeMemberImpl",
                value: function _writeMemberImpl(ostr) {
                    ostr.writeString(this.reason);
                }
            }, {
                key: "_readMemberImpl",
                value: function _readMemberImpl(istr) {
                    this.reason = istr.readString();
                }
            }], [{
                key: "_parent",
                get: function get() {
                    return Ice.UserException;
                }
            }, {
                key: "_id",
                get: function get() {
                    return "::IceGrid::AllocationException";
                }
            }]);

            return _class53;
        }(Ice.UserException);

        /**
         * This exception is raised if the request to allocate an object times
         * out.
         *
         **/
        IceGrid.AllocationTimeoutException = function (_IceGrid$AllocationEx) {
            _inherits(_class54, _IceGrid$AllocationEx);

            function _class54(reason) {
                var _cause = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";

                _classCallCheck(this, _class54);

                return _possibleConstructorReturn(this, (_class54.__proto__ || Object.getPrototypeOf(_class54)).call(this, reason, _cause));
            }

            _createClass(_class54, [{
                key: "_mostDerivedType",
                value: function _mostDerivedType() {
                    return IceGrid.AllocationTimeoutException;
                }
            }], [{
                key: "_parent",
                get: function get() {
                    return IceGrid.AllocationException;
                }
            }, {
                key: "_id",
                get: function get() {
                    return "::IceGrid::AllocationTimeoutException";
                }
            }]);

            return _class54;
        }(IceGrid.AllocationException);

        /**
         * This exception is raised if a client is denied the ability to create
         * a session with IceGrid.
         *
         **/
        IceGrid.PermissionDeniedException = function (_Ice$UserException18) {
            _inherits(_class55, _Ice$UserException18);

            function _class55() {
                var reason = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";

                var _cause = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";

                _classCallCheck(this, _class55);

                var _this46 = _possibleConstructorReturn(this, (_class55.__proto__ || Object.getPrototypeOf(_class55)).call(this, _cause));

                _this46.reason = reason;
                return _this46;
            }

            _createClass(_class55, [{
                key: "_mostDerivedType",
                value: function _mostDerivedType() {
                    return IceGrid.PermissionDeniedException;
                }
            }, {
                key: "_writeMemberImpl",
                value: function _writeMemberImpl(ostr) {
                    ostr.writeString(this.reason);
                }
            }, {
                key: "_readMemberImpl",
                value: function _readMemberImpl(istr) {
                    this.reason = istr.readString();
                }
            }], [{
                key: "_parent",
                get: function get() {
                    return Ice.UserException;
                }
            }, {
                key: "_id",
                get: function get() {
                    return "::IceGrid::PermissionDeniedException";
                }
            }]);

            return _class55;
        }(Ice.UserException);

        /**
         * This exception is raised if an observer is already registered with
         * the registry.
         *
         * @see AdminSession#setObservers
         * @see AdminSession#setObserversByIdentity
         *
         **/
        IceGrid.ObserverAlreadyRegisteredException = function (_Ice$UserException19) {
            _inherits(_class56, _Ice$UserException19);

            function _class56() {
                var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Ice.Identity();

                var _cause = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";

                _classCallCheck(this, _class56);

                var _this47 = _possibleConstructorReturn(this, (_class56.__proto__ || Object.getPrototypeOf(_class56)).call(this, _cause));

                _this47.id = id;
                return _this47;
            }

            _createClass(_class56, [{
                key: "_mostDerivedType",
                value: function _mostDerivedType() {
                    return IceGrid.ObserverAlreadyRegisteredException;
                }
            }, {
                key: "_writeMemberImpl",
                value: function _writeMemberImpl(ostr) {
                    Ice.Identity.write(ostr, this.id);
                }
            }, {
                key: "_readMemberImpl",
                value: function _readMemberImpl(istr) {
                    this.id = Ice.Identity.read(istr, this.id);
                }
            }], [{
                key: "_parent",
                get: function get() {
                    return Ice.UserException;
                }
            }, {
                key: "_id",
                get: function get() {
                    return "::IceGrid::ObserverAlreadyRegisteredException";
                }
            }]);

            return _class56;
        }(Ice.UserException);

        /**
         * This exception is raised if a file is not available.
         *
         * @see AdminSession#openServerStdOut
         * @see AdminSession#openServerStdErr
         * @see AdminSession#openNodeStdOut
         * @see AdminSession#openNodeStdErr
         * @see AdminSession#openRegistryStdOut
         * @see AdminSession#openRegistryStdErr
         *
         **/
        IceGrid.FileNotAvailableException = function (_Ice$UserException20) {
            _inherits(_class57, _Ice$UserException20);

            function _class57() {
                var reason = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";

                var _cause = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";

                _classCallCheck(this, _class57);

                var _this48 = _possibleConstructorReturn(this, (_class57.__proto__ || Object.getPrototypeOf(_class57)).call(this, _cause));

                _this48.reason = reason;
                return _this48;
            }

            _createClass(_class57, [{
                key: "_mostDerivedType",
                value: function _mostDerivedType() {
                    return IceGrid.FileNotAvailableException;
                }
            }, {
                key: "_writeMemberImpl",
                value: function _writeMemberImpl(ostr) {
                    ostr.writeString(this.reason);
                }
            }, {
                key: "_readMemberImpl",
                value: function _readMemberImpl(istr) {
                    this.reason = istr.readString();
                }
            }], [{
                key: "_parent",
                get: function get() {
                    return Ice.UserException;
                }
            }, {
                key: "_id",
                get: function get() {
                    return "::IceGrid::FileNotAvailableException";
                }
            }]);

            return _class57;
        }(Ice.UserException);
    })();

    (function () {
        // **********************************************************************
        //
        // Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
        //
        // This copy of Ice is licensed to you under the terms described in the
        // ICE_LICENSE file included in this distribution.
        //
        // **********************************************************************
        //
        // Ice version 3.7.0
        //
        // <auto-generated>
        //
        // Generated from file `Admin.ice'
        //
        // Warning: do not edit this file.
        //
        // </auto-generated>
        //


        /**
         * An enumeration representing the state of the server.
         *
         **/
        IceGrid.ServerState = Slice.defineEnum([['Inactive', 0], ['Activating', 1], ['ActivationTimedOut', 2], ['Active', 3], ['Deactivating', 4], ['Destroying', 5], ['Destroyed', 6]]);

        Slice.defineDictionary(IceGrid, "StringObjectProxyDict", "StringObjectProxyDictHelper", "Ice.StringHelper", "Ice.ObjectPrx", false, undefined, undefined);

        /**
         * Information about an Ice object.
         *
         **/
        IceGrid.ObjectInfo = function () {
            function _class58() {
                var proxy = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
                var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";

                _classCallCheck(this, _class58);

                this.proxy = proxy;
                this.type = type;
            }

            _createClass(_class58, [{
                key: "_write",
                value: function _write(ostr) {
                    ostr.writeProxy(this.proxy);
                    ostr.writeString(this.type);
                }
            }, {
                key: "_read",
                value: function _read(istr) {
                    this.proxy = istr.readProxy();
                    this.type = istr.readString();
                }
            }], [{
                key: "minWireSize",
                get: function get() {
                    return 3;
                }
            }]);

            return _class58;
        }();

        Slice.defineStruct(IceGrid.ObjectInfo, false, true);

        Slice.defineSequence(IceGrid, "ObjectInfoSeqHelper", "IceGrid.ObjectInfo", false);

        /**
         * Information about an adapter registered with the IceGrid registry.
         *
         **/
        IceGrid.AdapterInfo = function () {
            function _class59() {
                var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
                var proxy = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
                var replicaGroupId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "";

                _classCallCheck(this, _class59);

                this.id = id;
                this.proxy = proxy;
                this.replicaGroupId = replicaGroupId;
            }

            _createClass(_class59, [{
                key: "_write",
                value: function _write(ostr) {
                    ostr.writeString(this.id);
                    ostr.writeProxy(this.proxy);
                    ostr.writeString(this.replicaGroupId);
                }
            }, {
                key: "_read",
                value: function _read(istr) {
                    this.id = istr.readString();
                    this.proxy = istr.readProxy();
                    this.replicaGroupId = istr.readString();
                }
            }], [{
                key: "minWireSize",
                get: function get() {
                    return 4;
                }
            }]);

            return _class59;
        }();

        Slice.defineStruct(IceGrid.AdapterInfo, false, true);

        Slice.defineSequence(IceGrid, "AdapterInfoSeqHelper", "IceGrid.AdapterInfo", false);

        /**
         * Information about a server managed by an IceGrid node.
         *
         **/
        IceGrid.ServerInfo = function () {
            function _class60() {
                var application = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
                var uuid = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
                var revision = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
                var node = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "";
                var descriptor = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;
                var sessionId = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : "";

                _classCallCheck(this, _class60);

                this.application = application;
                this.uuid = uuid;
                this.revision = revision;
                this.node = node;
                this.descriptor = descriptor;
                this.sessionId = sessionId;
            }

            _createClass(_class60, [{
                key: "_write",
                value: function _write(ostr) {
                    ostr.writeString(this.application);
                    ostr.writeString(this.uuid);
                    ostr.writeInt(this.revision);
                    ostr.writeString(this.node);
                    ostr.writeValue(this.descriptor);
                    ostr.writeString(this.sessionId);
                }
            }, {
                key: "_read",
                value: function _read(istr) {
                    var _this49 = this;

                    this.application = istr.readString();
                    this.uuid = istr.readString();
                    this.revision = istr.readInt();
                    this.node = istr.readString();
                    istr.readValue(function (obj) {
                        return _this49.descriptor = obj;
                    }, IceGrid.ServerDescriptor);
                    this.sessionId = istr.readString();
                }
            }], [{
                key: "minWireSize",
                get: function get() {
                    return 9;
                }
            }]);

            return _class60;
        }();

        Slice.defineStruct(IceGrid.ServerInfo, false, true);

        /**
         * Information about an IceGrid node.
         *
         **/
        IceGrid.NodeInfo = function () {
            function _class61() {
                var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
                var os = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
                var hostname = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "";
                var release = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "";
                var version = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : "";
                var machine = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : "";
                var nProcessors = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;
                var dataDir = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : "";

                _classCallCheck(this, _class61);

                this.name = name;
                this.os = os;
                this.hostname = hostname;
                this.release = release;
                this.version = version;
                this.machine = machine;
                this.nProcessors = nProcessors;
                this.dataDir = dataDir;
            }

            _createClass(_class61, [{
                key: "_write",
                value: function _write(ostr) {
                    ostr.writeString(this.name);
                    ostr.writeString(this.os);
                    ostr.writeString(this.hostname);
                    ostr.writeString(this.release);
                    ostr.writeString(this.version);
                    ostr.writeString(this.machine);
                    ostr.writeInt(this.nProcessors);
                    ostr.writeString(this.dataDir);
                }
            }, {
                key: "_read",
                value: function _read(istr) {
                    this.name = istr.readString();
                    this.os = istr.readString();
                    this.hostname = istr.readString();
                    this.release = istr.readString();
                    this.version = istr.readString();
                    this.machine = istr.readString();
                    this.nProcessors = istr.readInt();
                    this.dataDir = istr.readString();
                }
            }], [{
                key: "minWireSize",
                get: function get() {
                    return 11;
                }
            }]);

            return _class61;
        }();

        Slice.defineStruct(IceGrid.NodeInfo, true, true);

        /**
         * Information about an IceGrid registry replica.
         *
         **/
        IceGrid.RegistryInfo = function () {
            function _class62() {
                var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
                var hostname = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";

                _classCallCheck(this, _class62);

                this.name = name;
                this.hostname = hostname;
            }

            _createClass(_class62, [{
                key: "_write",
                value: function _write(ostr) {
                    ostr.writeString(this.name);
                    ostr.writeString(this.hostname);
                }
            }, {
                key: "_read",
                value: function _read(istr) {
                    this.name = istr.readString();
                    this.hostname = istr.readString();
                }
            }], [{
                key: "minWireSize",
                get: function get() {
                    return 2;
                }
            }]);

            return _class62;
        }();

        Slice.defineStruct(IceGrid.RegistryInfo, true, true);

        Slice.defineSequence(IceGrid, "RegistryInfoSeqHelper", "IceGrid.RegistryInfo", false);

        /**
         * Information about the load of a node.
         *
         **/
        IceGrid.LoadInfo = function () {
            function _class63() {
                var avg1 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0.0;
                var avg5 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.0;
                var avg15 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0.0;

                _classCallCheck(this, _class63);

                this.avg1 = avg1;
                this.avg5 = avg5;
                this.avg15 = avg15;
            }

            _createClass(_class63, [{
                key: "_write",
                value: function _write(ostr) {
                    ostr.writeFloat(this.avg1);
                    ostr.writeFloat(this.avg5);
                    ostr.writeFloat(this.avg15);
                }
            }, {
                key: "_read",
                value: function _read(istr) {
                    this.avg1 = istr.readFloat();
                    this.avg5 = istr.readFloat();
                    this.avg15 = istr.readFloat();
                }
            }], [{
                key: "minWireSize",
                get: function get() {
                    return 12;
                }
            }]);

            return _class63;
        }();

        Slice.defineStruct(IceGrid.LoadInfo, false, false);

        /**
         * Information about an IceGrid application.
         *
         **/
        IceGrid.ApplicationInfo = function () {
            function _class64() {
                var uuid = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
                var createTime = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Ice.Long(0, 0);
                var createUser = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "";
                var updateTime = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new Ice.Long(0, 0);
                var updateUser = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : "";
                var revision = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;
                var descriptor = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new IceGrid.ApplicationDescriptor();

                _classCallCheck(this, _class64);

                this.uuid = uuid;
                this.createTime = createTime;
                this.createUser = createUser;
                this.updateTime = updateTime;
                this.updateUser = updateUser;
                this.revision = revision;
                this.descriptor = descriptor;
            }

            _createClass(_class64, [{
                key: "_write",
                value: function _write(ostr) {
                    ostr.writeString(this.uuid);
                    ostr.writeLong(this.createTime);
                    ostr.writeString(this.createUser);
                    ostr.writeLong(this.updateTime);
                    ostr.writeString(this.updateUser);
                    ostr.writeInt(this.revision);
                    IceGrid.ApplicationDescriptor.write(ostr, this.descriptor);
                }
            }, {
                key: "_read",
                value: function _read(istr) {
                    this.uuid = istr.readString();
                    this.createTime = istr.readLong();
                    this.createUser = istr.readString();
                    this.updateTime = istr.readLong();
                    this.updateUser = istr.readString();
                    this.revision = istr.readInt();
                    this.descriptor = IceGrid.ApplicationDescriptor.read(istr, this.descriptor);
                }
            }], [{
                key: "minWireSize",
                get: function get() {
                    return 33;
                }
            }]);

            return _class64;
        }();

        Slice.defineStruct(IceGrid.ApplicationInfo, false, true);

        Slice.defineSequence(IceGrid, "ApplicationInfoSeqHelper", "IceGrid.ApplicationInfo", false);

        /**
         * Information about updates to an IceGrid application.
         *
         **/
        IceGrid.ApplicationUpdateInfo = function () {
            function _class65() {
                var updateTime = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Ice.Long(0, 0);
                var updateUser = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
                var revision = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
                var descriptor = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new IceGrid.ApplicationUpdateDescriptor();

                _classCallCheck(this, _class65);

                this.updateTime = updateTime;
                this.updateUser = updateUser;
                this.revision = revision;
                this.descriptor = descriptor;
            }

            _createClass(_class65, [{
                key: "_write",
                value: function _write(ostr) {
                    ostr.writeLong(this.updateTime);
                    ostr.writeString(this.updateUser);
                    ostr.writeInt(this.revision);
                    IceGrid.ApplicationUpdateDescriptor.write(ostr, this.descriptor);
                }
            }, {
                key: "_read",
                value: function _read(istr) {
                    this.updateTime = istr.readLong();
                    this.updateUser = istr.readString();
                    this.revision = istr.readInt();
                    this.descriptor = IceGrid.ApplicationUpdateDescriptor.read(istr, this.descriptor);
                }
            }], [{
                key: "minWireSize",
                get: function get() {
                    return 28;
                }
            }]);

            return _class65;
        }();

        Slice.defineStruct(IceGrid.ApplicationUpdateInfo, false, true);

        var iceC_IceGrid_Admin_ids = ["::Ice::Object", "::IceGrid::Admin"];

        /**
         * The IceGrid administrative interface.
         * <p class="Warning">Allowing access to this interface
         * is a security risk! Please see the IceGrid documentation
         * for further information.
         *
         **/
        IceGrid.Admin = function (_Ice$Object5) {
            _inherits(_class66, _Ice$Object5);

            function _class66() {
                _classCallCheck(this, _class66);

                return _possibleConstructorReturn(this, (_class66.__proto__ || Object.getPrototypeOf(_class66)).apply(this, arguments));
            }

            return _class66;
        }(Ice.Object);

        IceGrid.AdminPrx = function (_Ice$ObjectPrx) {
            _inherits(_class67, _Ice$ObjectPrx);

            function _class67() {
                _classCallCheck(this, _class67);

                return _possibleConstructorReturn(this, (_class67.__proto__ || Object.getPrototypeOf(_class67)).apply(this, arguments));
            }

            return _class67;
        }(Ice.ObjectPrx);

        Slice.defineOperations(IceGrid.Admin, IceGrid.AdminPrx, iceC_IceGrid_Admin_ids, 1, {
            "addApplication": [,,,,, [[IceGrid.ApplicationDescriptor]],, [IceGrid.AccessDeniedException, IceGrid.DeploymentException], true],
            "syncApplication": [,,,,, [[IceGrid.ApplicationDescriptor]],, [IceGrid.AccessDeniedException, IceGrid.ApplicationNotExistException, IceGrid.DeploymentException], true],
            "updateApplication": [,,,,, [[IceGrid.ApplicationUpdateDescriptor]],, [IceGrid.AccessDeniedException, IceGrid.ApplicationNotExistException, IceGrid.DeploymentException], true],
            "syncApplicationWithoutRestart": [,,,,, [[IceGrid.ApplicationDescriptor]],, [IceGrid.AccessDeniedException, IceGrid.ApplicationNotExistException, IceGrid.DeploymentException], true],
            "updateApplicationWithoutRestart": [,,,,, [[IceGrid.ApplicationUpdateDescriptor]],, [IceGrid.AccessDeniedException, IceGrid.ApplicationNotExistException, IceGrid.DeploymentException], true],
            "removeApplication": [,,,,, [[7]],, [IceGrid.AccessDeniedException, IceGrid.ApplicationNotExistException, IceGrid.DeploymentException],,],
            "instantiateServer": [,,,,, [[7], [7], [IceGrid.ServerInstanceDescriptor]],, [IceGrid.AccessDeniedException, IceGrid.ApplicationNotExistException, IceGrid.DeploymentException],,],
            "patchApplication": [,,,,, [[7], [1]],, [IceGrid.ApplicationNotExistException, IceGrid.PatchException],,],
            "getApplicationInfo": [, 2, 1,, [IceGrid.ApplicationInfo], [[7]],, [IceGrid.ApplicationNotExistException],, true],
            "getDefaultApplicationDescriptor": [, 2, 1,, [IceGrid.ApplicationDescriptor],,, [IceGrid.DeploymentException],, true],
            "getAllApplicationNames": [, 2, 1,, ["Ice.StringSeqHelper"],,,,,],
            "getServerInfo": [, 2, 1,, [IceGrid.ServerInfo], [[7]],, [IceGrid.ServerNotExistException],, true],
            "getServerState": [, 2, 1,, [IceGrid.ServerState._helper], [[7]],, [IceGrid.DeploymentException, IceGrid.NodeUnreachableException, IceGrid.ServerNotExistException],,],
            "getServerPid": [, 2, 1,, [3], [[7]],, [IceGrid.DeploymentException, IceGrid.NodeUnreachableException, IceGrid.ServerNotExistException],,],
            "getServerAdminCategory": [, 2, 2,, [7],,,,,],
            "getServerAdmin": [, 2, 2,, [9], [[7]],, [IceGrid.DeploymentException, IceGrid.NodeUnreachableException, IceGrid.ServerNotExistException],,],
            "enableServer": [, 2, 2,,, [[7], [1]],, [IceGrid.DeploymentException, IceGrid.NodeUnreachableException, IceGrid.ServerNotExistException],,],
            "isServerEnabled": [, 2, 1,, [1], [[7]],, [IceGrid.DeploymentException, IceGrid.NodeUnreachableException, IceGrid.ServerNotExistException],,],
            "startServer": [,,,,, [[7]],, [IceGrid.DeploymentException, IceGrid.NodeUnreachableException, IceGrid.ServerNotExistException, IceGrid.ServerStartException],,],
            "stopServer": [,,,,, [[7]],, [IceGrid.DeploymentException, IceGrid.NodeUnreachableException, IceGrid.ServerNotExistException, IceGrid.ServerStopException],,],
            "patchServer": [,,,,, [[7], [1]],, [IceGrid.DeploymentException, IceGrid.NodeUnreachableException, IceGrid.PatchException, IceGrid.ServerNotExistException],,],
            "sendSignal": [,,,,, [[7], [7]],, [IceGrid.BadSignalException, IceGrid.DeploymentException, IceGrid.NodeUnreachableException, IceGrid.ServerNotExistException],,],
            "getAllServerIds": [, 2, 1,, ["Ice.StringSeqHelper"],,,,,],
            "getAdapterInfo": [, 2, 1,, ["IceGrid.AdapterInfoSeqHelper"], [[7]],, [IceGrid.AdapterNotExistException],,],
            "removeAdapter": [,,,,, [[7]],, [IceGrid.AdapterNotExistException, IceGrid.DeploymentException],,],
            "getAllAdapterIds": [, 2, 1,, ["Ice.StringSeqHelper"],,,,,],
            "addObject": [,,,,, [[9]],, [IceGrid.DeploymentException, IceGrid.ObjectExistsException],,],
            "updateObject": [,,,,, [[9]],, [IceGrid.DeploymentException, IceGrid.ObjectNotRegisteredException],,],
            "addObjectWithType": [,,,,, [[9], [7]],, [IceGrid.DeploymentException, IceGrid.ObjectExistsException],,],
            "removeObject": [,,,,, [[Ice.Identity]],, [IceGrid.DeploymentException, IceGrid.ObjectNotRegisteredException],,],
            "getObjectInfo": [, 2, 1,, [IceGrid.ObjectInfo], [[Ice.Identity]],, [IceGrid.ObjectNotRegisteredException],,],
            "getObjectInfosByType": [, 2, 1,, ["IceGrid.ObjectInfoSeqHelper"], [[7]],,,,],
            "getAllObjectInfos": [, 2, 1,, ["IceGrid.ObjectInfoSeqHelper"], [[7]],,,,],
            "pingNode": [, 2, 1,, [1], [[7]],, [IceGrid.NodeNotExistException],,],
            "getNodeLoad": [, 2, 1,, [IceGrid.LoadInfo], [[7]],, [IceGrid.NodeNotExistException, IceGrid.NodeUnreachableException],,],
            "getNodeInfo": [, 2, 1,, [IceGrid.NodeInfo], [[7]],, [IceGrid.NodeNotExistException, IceGrid.NodeUnreachableException],,],
            "getNodeAdmin": [, 2, 2,, [9], [[7]],, [IceGrid.NodeNotExistException, IceGrid.NodeUnreachableException],,],
            "getNodeProcessorSocketCount": [, 2, 1,, [3], [[7]],, [IceGrid.NodeNotExistException, IceGrid.NodeUnreachableException],,],
            "shutdownNode": [,,,,, [[7]],, [IceGrid.NodeNotExistException, IceGrid.NodeUnreachableException],,],
            "getNodeHostname": [, 2, 1,, [7], [[7]],, [IceGrid.NodeNotExistException, IceGrid.NodeUnreachableException],,],
            "getAllNodeNames": [, 2, 1,, ["Ice.StringSeqHelper"],,,,,],
            "pingRegistry": [, 2, 2,, [1], [[7]],, [IceGrid.RegistryNotExistException],,],
            "getRegistryInfo": [, 2, 2,, [IceGrid.RegistryInfo], [[7]],, [IceGrid.RegistryNotExistException, IceGrid.RegistryUnreachableException],,],
            "getRegistryAdmin": [, 2, 2,, [9], [[7]],, [IceGrid.RegistryNotExistException],,],
            "shutdownRegistry": [, 2, 2,,, [[7]],, [IceGrid.RegistryNotExistException, IceGrid.RegistryUnreachableException],,],
            "getAllRegistryNames": [, 2, 2,, ["Ice.StringSeqHelper"],,,,,],
            "shutdown": [,,,,,,,,,],
            "getSliceChecksums": [, 2, 1,, ["Ice.SliceChecksumDictHelper"],,,,,]
        });

        var iceC_IceGrid_FileIterator_ids = ["::Ice::Object", "::IceGrid::FileIterator"];

        /**
         * This interface provides access to IceGrid log file contents.
         *
         **/
        IceGrid.FileIterator = function (_Ice$Object6) {
            _inherits(_class68, _Ice$Object6);

            function _class68() {
                _classCallCheck(this, _class68);

                return _possibleConstructorReturn(this, (_class68.__proto__ || Object.getPrototypeOf(_class68)).apply(this, arguments));
            }

            return _class68;
        }(Ice.Object);

        IceGrid.FileIteratorPrx = function (_Ice$ObjectPrx2) {
            _inherits(_class69, _Ice$ObjectPrx2);

            function _class69() {
                _classCallCheck(this, _class69);

                return _possibleConstructorReturn(this, (_class69.__proto__ || Object.getPrototypeOf(_class69)).apply(this, arguments));
            }

            return _class69;
        }(Ice.ObjectPrx);

        Slice.defineOperations(IceGrid.FileIterator, IceGrid.FileIteratorPrx, iceC_IceGrid_FileIterator_ids, 1, {
            "read": [,,,, [1], [[3]], [["Ice.StringSeqHelper"]], [IceGrid.FileNotAvailableException],,],
            "destroy": [,,,,,,,,,]
        });

        /**
         * Dynamic information about the state of a server.
         *
         **/
        IceGrid.ServerDynamicInfo = function () {
            function _class70() {
                var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
                var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : IceGrid.ServerState.Inactive;
                var pid = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
                var enabled = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

                _classCallCheck(this, _class70);

                this.id = id;
                this.state = state;
                this.pid = pid;
                this.enabled = enabled;
            }

            _createClass(_class70, [{
                key: "_write",
                value: function _write(ostr) {
                    ostr.writeString(this.id);
                    IceGrid.ServerState._write(ostr, this.state);
                    ostr.writeInt(this.pid);
                    ostr.writeBool(this.enabled);
                }
            }, {
                key: "_read",
                value: function _read(istr) {
                    this.id = istr.readString();
                    this.state = IceGrid.ServerState._read(istr);
                    this.pid = istr.readInt();
                    this.enabled = istr.readBool();
                }
            }], [{
                key: "minWireSize",
                get: function get() {
                    return 7;
                }
            }]);

            return _class70;
        }();

        Slice.defineStruct(IceGrid.ServerDynamicInfo, true, true);

        Slice.defineSequence(IceGrid, "ServerDynamicInfoSeqHelper", "IceGrid.ServerDynamicInfo", false);

        /**
         * Dynamic information about the state of an adapter.
         *
         **/
        IceGrid.AdapterDynamicInfo = function () {
            function _class71() {
                var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
                var proxy = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

                _classCallCheck(this, _class71);

                this.id = id;
                this.proxy = proxy;
            }

            _createClass(_class71, [{
                key: "_write",
                value: function _write(ostr) {
                    ostr.writeString(this.id);
                    ostr.writeProxy(this.proxy);
                }
            }, {
                key: "_read",
                value: function _read(istr) {
                    this.id = istr.readString();
                    this.proxy = istr.readProxy();
                }
            }], [{
                key: "minWireSize",
                get: function get() {
                    return 3;
                }
            }]);

            return _class71;
        }();

        Slice.defineStruct(IceGrid.AdapterDynamicInfo, false, true);

        Slice.defineSequence(IceGrid, "AdapterDynamicInfoSeqHelper", "IceGrid.AdapterDynamicInfo", false);

        /**
         * Dynamic information about the state of a node.
         *
         **/
        IceGrid.NodeDynamicInfo = function () {
            function _class72() {
                var info = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new IceGrid.NodeInfo();
                var servers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
                var adapters = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

                _classCallCheck(this, _class72);

                this.info = info;
                this.servers = servers;
                this.adapters = adapters;
            }

            _createClass(_class72, [{
                key: "_write",
                value: function _write(ostr) {
                    IceGrid.NodeInfo.write(ostr, this.info);
                    IceGrid.ServerDynamicInfoSeqHelper.write(ostr, this.servers);
                    IceGrid.AdapterDynamicInfoSeqHelper.write(ostr, this.adapters);
                }
            }, {
                key: "_read",
                value: function _read(istr) {
                    this.info = IceGrid.NodeInfo.read(istr, this.info);
                    this.servers = IceGrid.ServerDynamicInfoSeqHelper.read(istr);
                    this.adapters = IceGrid.AdapterDynamicInfoSeqHelper.read(istr);
                }
            }], [{
                key: "minWireSize",
                get: function get() {
                    return 13;
                }
            }]);

            return _class72;
        }();

        Slice.defineStruct(IceGrid.NodeDynamicInfo, false, true);

        var iceC_IceGrid_RegistryObserver_ids = ["::Ice::Object", "::IceGrid::RegistryObserver"];

        /**
         * This interface allows applications to monitor changes the state
         * of the registry.
         *
         **/
        IceGrid.RegistryObserver = function (_Ice$Object7) {
            _inherits(_class73, _Ice$Object7);

            function _class73() {
                _classCallCheck(this, _class73);

                return _possibleConstructorReturn(this, (_class73.__proto__ || Object.getPrototypeOf(_class73)).apply(this, arguments));
            }

            return _class73;
        }(Ice.Object);

        IceGrid.RegistryObserverPrx = function (_Ice$ObjectPrx3) {
            _inherits(_class74, _Ice$ObjectPrx3);

            function _class74() {
                _classCallCheck(this, _class74);

                return _possibleConstructorReturn(this, (_class74.__proto__ || Object.getPrototypeOf(_class74)).apply(this, arguments));
            }

            return _class74;
        }(Ice.ObjectPrx);

        Slice.defineOperations(IceGrid.RegistryObserver, IceGrid.RegistryObserverPrx, iceC_IceGrid_RegistryObserver_ids, 1, {
            "registryInit": [,,,,, [["IceGrid.RegistryInfoSeqHelper"]],,,,],
            "registryUp": [,,,,, [[IceGrid.RegistryInfo]],,,,],
            "registryDown": [,,,,, [[7]],,,,]
        });

        Slice.defineSequence(IceGrid, "NodeDynamicInfoSeqHelper", "IceGrid.NodeDynamicInfo", false);

        var iceC_IceGrid_NodeObserver_ids = ["::Ice::Object", "::IceGrid::NodeObserver"];

        /**
         * The node observer interface. Observers should implement this
         * interface to receive information about the state of the IceGrid
         * nodes.
         *
         **/
        IceGrid.NodeObserver = function (_Ice$Object8) {
            _inherits(_class75, _Ice$Object8);

            function _class75() {
                _classCallCheck(this, _class75);

                return _possibleConstructorReturn(this, (_class75.__proto__ || Object.getPrototypeOf(_class75)).apply(this, arguments));
            }

            return _class75;
        }(Ice.Object);

        IceGrid.NodeObserverPrx = function (_Ice$ObjectPrx4) {
            _inherits(_class76, _Ice$ObjectPrx4);

            function _class76() {
                _classCallCheck(this, _class76);

                return _possibleConstructorReturn(this, (_class76.__proto__ || Object.getPrototypeOf(_class76)).apply(this, arguments));
            }

            return _class76;
        }(Ice.ObjectPrx);

        Slice.defineOperations(IceGrid.NodeObserver, IceGrid.NodeObserverPrx, iceC_IceGrid_NodeObserver_ids, 1, {
            "nodeInit": [,,,,, [["IceGrid.NodeDynamicInfoSeqHelper"]],,,,],
            "nodeUp": [,,,,, [[IceGrid.NodeDynamicInfo]],,,,],
            "nodeDown": [,,,,, [[7]],,,,],
            "updateServer": [,,,,, [[7], [IceGrid.ServerDynamicInfo]],,,,],
            "updateAdapter": [,,,,, [[7], [IceGrid.AdapterDynamicInfo]],,,,]
        });

        var iceC_IceGrid_ApplicationObserver_ids = ["::Ice::Object", "::IceGrid::ApplicationObserver"];

        /**
         * The database observer interface. Observers should implement this
         * interface to receive information about the state of the IceGrid
         * registry database.
         *
         **/
        IceGrid.ApplicationObserver = function (_Ice$Object9) {
            _inherits(_class77, _Ice$Object9);

            function _class77() {
                _classCallCheck(this, _class77);

                return _possibleConstructorReturn(this, (_class77.__proto__ || Object.getPrototypeOf(_class77)).apply(this, arguments));
            }

            return _class77;
        }(Ice.Object);

        IceGrid.ApplicationObserverPrx = function (_Ice$ObjectPrx5) {
            _inherits(_class78, _Ice$ObjectPrx5);

            function _class78() {
                _classCallCheck(this, _class78);

                return _possibleConstructorReturn(this, (_class78.__proto__ || Object.getPrototypeOf(_class78)).apply(this, arguments));
            }

            return _class78;
        }(Ice.ObjectPrx);

        Slice.defineOperations(IceGrid.ApplicationObserver, IceGrid.ApplicationObserverPrx, iceC_IceGrid_ApplicationObserver_ids, 1, {
            "applicationInit": [,,,,, [[3], ["IceGrid.ApplicationInfoSeqHelper"]],,, true],
            "applicationAdded": [,,,,, [[3], [IceGrid.ApplicationInfo]],,, true],
            "applicationRemoved": [,,,,, [[3], [7]],,,,],
            "applicationUpdated": [,,,,, [[3], [IceGrid.ApplicationUpdateInfo]],,, true]
        });

        var iceC_IceGrid_AdapterObserver_ids = ["::Ice::Object", "::IceGrid::AdapterObserver"];

        /**
         * This interface allows applications to monitor the state of object
         * adapters that are registered with IceGrid.
         *
         **/
        IceGrid.AdapterObserver = function (_Ice$Object10) {
            _inherits(_class79, _Ice$Object10);

            function _class79() {
                _classCallCheck(this, _class79);

                return _possibleConstructorReturn(this, (_class79.__proto__ || Object.getPrototypeOf(_class79)).apply(this, arguments));
            }

            return _class79;
        }(Ice.Object);

        IceGrid.AdapterObserverPrx = function (_Ice$ObjectPrx6) {
            _inherits(_class80, _Ice$ObjectPrx6);

            function _class80() {
                _classCallCheck(this, _class80);

                return _possibleConstructorReturn(this, (_class80.__proto__ || Object.getPrototypeOf(_class80)).apply(this, arguments));
            }

            return _class80;
        }(Ice.ObjectPrx);

        Slice.defineOperations(IceGrid.AdapterObserver, IceGrid.AdapterObserverPrx, iceC_IceGrid_AdapterObserver_ids, 1, {
            "adapterInit": [,,,,, [["IceGrid.AdapterInfoSeqHelper"]],,,,],
            "adapterAdded": [,,,,, [[IceGrid.AdapterInfo]],,,,],
            "adapterUpdated": [,,,,, [[IceGrid.AdapterInfo]],,,,],
            "adapterRemoved": [,,,,, [[7]],,,,]
        });

        var iceC_IceGrid_ObjectObserver_ids = ["::Ice::Object", "::IceGrid::ObjectObserver"];

        /**
         * This interface allows applications to monitor IceGrid well-known objects.
         *
         **/
        IceGrid.ObjectObserver = function (_Ice$Object11) {
            _inherits(_class81, _Ice$Object11);

            function _class81() {
                _classCallCheck(this, _class81);

                return _possibleConstructorReturn(this, (_class81.__proto__ || Object.getPrototypeOf(_class81)).apply(this, arguments));
            }

            return _class81;
        }(Ice.Object);

        IceGrid.ObjectObserverPrx = function (_Ice$ObjectPrx7) {
            _inherits(_class82, _Ice$ObjectPrx7);

            function _class82() {
                _classCallCheck(this, _class82);

                return _possibleConstructorReturn(this, (_class82.__proto__ || Object.getPrototypeOf(_class82)).apply(this, arguments));
            }

            return _class82;
        }(Ice.ObjectPrx);

        Slice.defineOperations(IceGrid.ObjectObserver, IceGrid.ObjectObserverPrx, iceC_IceGrid_ObjectObserver_ids, 1, {
            "objectInit": [,,,,, [["IceGrid.ObjectInfoSeqHelper"]],,,,],
            "objectAdded": [,,,,, [[IceGrid.ObjectInfo]],,,,],
            "objectUpdated": [,,,,, [[IceGrid.ObjectInfo]],,,,],
            "objectRemoved": [,,,,, [[Ice.Identity]],,,,]
        });

        var iceC_IceGrid_AdminSession_ids = ["::Glacier2::Session", "::Ice::Object", "::IceGrid::AdminSession"];

        /**
         * Used by administrative clients to view,
         * update, and receive observer updates from the IceGrid
         * registry. Admin sessions are created either via the {@link Registry}
         * object or via the registry admin <tt>SessionManager</tt> object.
         *
         * @see Registry
         *
         **/
        IceGrid.AdminSession = function (_Ice$Object12) {
            _inherits(_class83, _Ice$Object12);

            function _class83() {
                _classCallCheck(this, _class83);

                return _possibleConstructorReturn(this, (_class83.__proto__ || Object.getPrototypeOf(_class83)).apply(this, arguments));
            }

            _createClass(_class83, null, [{
                key: "_iceImplements",
                get: function get() {
                    return [Glacier2.Session];
                }
            }]);

            return _class83;
        }(Ice.Object);

        IceGrid.AdminSessionPrx = function (_Ice$ObjectPrx8) {
            _inherits(_class84, _Ice$ObjectPrx8);

            function _class84() {
                _classCallCheck(this, _class84);

                return _possibleConstructorReturn(this, (_class84.__proto__ || Object.getPrototypeOf(_class84)).apply(this, arguments));
            }

            _createClass(_class84, null, [{
                key: "_implements",
                get: function get() {
                    return [Glacier2.SessionPrx];
                }
            }]);

            return _class84;
        }(Ice.ObjectPrx);

        Slice.defineOperations(IceGrid.AdminSession, IceGrid.AdminSessionPrx, iceC_IceGrid_AdminSession_ids, 2, {
            "keepAlive": [, 2, 2,,,,,,,],
            "getAdmin": [, 2, 1,, ["IceGrid.AdminPrx"],,,,,],
            "getAdminCallbackTemplate": [, 2, 2,, [9],,,,,],
            "setObservers": [, 2, 2,,, [["IceGrid.RegistryObserverPrx"], ["IceGrid.NodeObserverPrx"], ["IceGrid.ApplicationObserverPrx"], ["IceGrid.AdapterObserverPrx"], ["IceGrid.ObjectObserverPrx"]],, [IceGrid.ObserverAlreadyRegisteredException],,],
            "setObserversByIdentity": [, 2, 2,,, [[Ice.Identity], [Ice.Identity], [Ice.Identity], [Ice.Identity], [Ice.Identity]],, [IceGrid.ObserverAlreadyRegisteredException],,],
            "startUpdate": [,,,, [3],,, [IceGrid.AccessDeniedException],,],
            "finishUpdate": [,,,,,,, [IceGrid.AccessDeniedException],,],
            "getReplicaName": [, 2, 2,, [7],,,,,],
            "openServerLog": [,,,, ["IceGrid.FileIteratorPrx"], [[7], [7], [3]],, [IceGrid.DeploymentException, IceGrid.FileNotAvailableException, IceGrid.NodeUnreachableException, IceGrid.ServerNotExistException],,],
            "openServerStdErr": [,,,, ["IceGrid.FileIteratorPrx"], [[7], [3]],, [IceGrid.DeploymentException, IceGrid.FileNotAvailableException, IceGrid.NodeUnreachableException, IceGrid.ServerNotExistException],,],
            "openServerStdOut": [,,,, ["IceGrid.FileIteratorPrx"], [[7], [3]],, [IceGrid.DeploymentException, IceGrid.FileNotAvailableException, IceGrid.NodeUnreachableException, IceGrid.ServerNotExistException],,],
            "openNodeStdErr": [,,,, ["IceGrid.FileIteratorPrx"], [[7], [3]],, [IceGrid.FileNotAvailableException, IceGrid.NodeNotExistException, IceGrid.NodeUnreachableException],,],
            "openNodeStdOut": [,,,, ["IceGrid.FileIteratorPrx"], [[7], [3]],, [IceGrid.FileNotAvailableException, IceGrid.NodeNotExistException, IceGrid.NodeUnreachableException],,],
            "openRegistryStdErr": [,,,, ["IceGrid.FileIteratorPrx"], [[7], [3]],, [IceGrid.FileNotAvailableException, IceGrid.RegistryNotExistException, IceGrid.RegistryUnreachableException],,],
            "openRegistryStdOut": [,,,, ["IceGrid.FileIteratorPrx"], [[7], [3]],, [IceGrid.FileNotAvailableException, IceGrid.RegistryNotExistException, IceGrid.RegistryUnreachableException],,]
        });
    })();

    (function () {
        // **********************************************************************
        //
        // Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
        //
        // This copy of Ice is licensed to you under the terms described in the
        // ICE_LICENSE file included in this distribution.
        //
        // **********************************************************************
        //
        // Ice version 3.7.0
        //
        // <auto-generated>
        //
        // Generated from file `FileParser.ice'
        //
        // Warning: do not edit this file.
        //
        // </auto-generated>
        //


        /**
         * This exception is raised if an error occurs during parsing.
         *
         **/
        IceGrid.ParseException = function (_Ice$UserException21) {
            _inherits(_class85, _Ice$UserException21);

            function _class85() {
                var reason = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";

                var _cause = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";

                _classCallCheck(this, _class85);

                var _this66 = _possibleConstructorReturn(this, (_class85.__proto__ || Object.getPrototypeOf(_class85)).call(this, _cause));

                _this66.reason = reason;
                return _this66;
            }

            _createClass(_class85, [{
                key: "_mostDerivedType",
                value: function _mostDerivedType() {
                    return IceGrid.ParseException;
                }
            }, {
                key: "_writeMemberImpl",
                value: function _writeMemberImpl(ostr) {
                    ostr.writeString(this.reason);
                }
            }, {
                key: "_readMemberImpl",
                value: function _readMemberImpl(istr) {
                    this.reason = istr.readString();
                }
            }], [{
                key: "_parent",
                get: function get() {
                    return Ice.UserException;
                }
            }, {
                key: "_id",
                get: function get() {
                    return "::IceGrid::ParseException";
                }
            }]);

            return _class85;
        }(Ice.UserException);

        var iceC_IceGrid_FileParser_ids = ["::Ice::Object", "::IceGrid::FileParser"];

        /**
         * <tt>icegridadmin</tt> provides a {@link FileParser}
         * object to transform XML files into {@link ApplicationDescriptor}
         * objects.
         *
         **/
        IceGrid.FileParser = function (_Ice$Object13) {
            _inherits(_class86, _Ice$Object13);

            function _class86() {
                _classCallCheck(this, _class86);

                return _possibleConstructorReturn(this, (_class86.__proto__ || Object.getPrototypeOf(_class86)).apply(this, arguments));
            }

            return _class86;
        }(Ice.Object);

        IceGrid.FileParserPrx = function (_Ice$ObjectPrx9) {
            _inherits(_class87, _Ice$ObjectPrx9);

            function _class87() {
                _classCallCheck(this, _class87);

                return _possibleConstructorReturn(this, (_class87.__proto__ || Object.getPrototypeOf(_class87)).apply(this, arguments));
            }

            return _class87;
        }(Ice.ObjectPrx);

        Slice.defineOperations(IceGrid.FileParser, IceGrid.FileParserPrx, iceC_IceGrid_FileParser_ids, 1, {
            "parse": [, 2, 2,, [IceGrid.ApplicationDescriptor], [[7], ["IceGrid.AdminPrx"]],, [IceGrid.ParseException],, true]
        });
    })();

    (function () {
        // **********************************************************************
        //
        // Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
        //
        // This copy of Ice is licensed to you under the terms described in the
        // ICE_LICENSE file included in this distribution.
        //
        // **********************************************************************
        //
        // Ice version 3.7.0
        //
        // <auto-generated>
        //
        // Generated from file `Session.ice'
        //
        // Warning: do not edit this file.
        //
        // </auto-generated>
        //


        var iceC_IceGrid_Session_ids = ["::Glacier2::Session", "::Ice::Object", "::IceGrid::Session"];

        /**
         * A session object is used by IceGrid clients to allocate and
         * release objects. Client sessions are created either via the
         * {@link Registry} object or via the registry client <tt>SessionManager</tt>
         * object.
         *
         * @see Registry
         *
         **/
        IceGrid.Session = function (_Ice$Object14) {
            _inherits(_class88, _Ice$Object14);

            function _class88() {
                _classCallCheck(this, _class88);

                return _possibleConstructorReturn(this, (_class88.__proto__ || Object.getPrototypeOf(_class88)).apply(this, arguments));
            }

            _createClass(_class88, null, [{
                key: "_iceImplements",
                get: function get() {
                    return [Glacier2.Session];
                }
            }]);

            return _class88;
        }(Ice.Object);

        IceGrid.SessionPrx = function (_Ice$ObjectPrx10) {
            _inherits(_class89, _Ice$ObjectPrx10);

            function _class89() {
                _classCallCheck(this, _class89);

                return _possibleConstructorReturn(this, (_class89.__proto__ || Object.getPrototypeOf(_class89)).apply(this, arguments));
            }

            _createClass(_class89, null, [{
                key: "_implements",
                get: function get() {
                    return [Glacier2.SessionPrx];
                }
            }]);

            return _class89;
        }(Ice.ObjectPrx);

        Slice.defineOperations(IceGrid.Session, IceGrid.SessionPrx, iceC_IceGrid_Session_ids, 2, {
            "keepAlive": [, 2, 2,,,,,,,],
            "allocateObjectById": [,,,, [9], [[Ice.Identity]],, [IceGrid.AllocationException, IceGrid.ObjectNotRegisteredException],,],
            "allocateObjectByType": [,,,, [9], [[7]],, [IceGrid.AllocationException],,],
            "releaseObject": [,,,,, [[Ice.Identity]],, [IceGrid.AllocationException, IceGrid.ObjectNotRegisteredException],,],
            "setAllocationTimeout": [, 2, 2,,, [[3]],,,,]
        });
    })();

    (function () {
        // **********************************************************************
        //
        // Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
        //
        // This copy of Ice is licensed to you under the terms described in the
        // ICE_LICENSE file included in this distribution.
        //
        // **********************************************************************
        //
        // Ice version 3.7.0
        //
        // <auto-generated>
        //
        // Generated from file `Registry.ice'
        //
        // Warning: do not edit this file.
        //
        // </auto-generated>
        //


        /**
         * Determines which load sampling interval to use.
         *
         **/
        IceGrid.LoadSample = Slice.defineEnum([['LoadSample1', 0], ['LoadSample5', 1], ['LoadSample15', 2]]);

        var iceC_IceGrid_Query_ids = ["::Ice::Object", "::IceGrid::Query"];

        /**
         * The IceGrid query interface. This interface is accessible to
         * Ice clients who wish to look up well-known objects.
         *
         **/
        IceGrid.Query = function (_Ice$Object15) {
            _inherits(_class90, _Ice$Object15);

            function _class90() {
                _classCallCheck(this, _class90);

                return _possibleConstructorReturn(this, (_class90.__proto__ || Object.getPrototypeOf(_class90)).apply(this, arguments));
            }

            return _class90;
        }(Ice.Object);

        IceGrid.QueryPrx = function (_Ice$ObjectPrx11) {
            _inherits(_class91, _Ice$ObjectPrx11);

            function _class91() {
                _classCallCheck(this, _class91);

                return _possibleConstructorReturn(this, (_class91.__proto__ || Object.getPrototypeOf(_class91)).apply(this, arguments));
            }

            return _class91;
        }(Ice.ObjectPrx);

        Slice.defineOperations(IceGrid.Query, IceGrid.QueryPrx, iceC_IceGrid_Query_ids, 1, {
            "findObjectById": [, 2, 1,, [9], [[Ice.Identity]],,,,],
            "findObjectByType": [, 2, 1,, [9], [[7]],,,,],
            "findObjectByTypeOnLeastLoadedNode": [, 2, 1,, [9], [[7], [IceGrid.LoadSample._helper]],,,,],
            "findAllObjectsByType": [, 2, 1,, ["Ice.ObjectProxySeqHelper"], [[7]],,,,],
            "findAllReplicas": [, 2, 2,, ["Ice.ObjectProxySeqHelper"], [[9]],,,,]
        });

        var iceC_IceGrid_Registry_ids = ["::Ice::Object", "::IceGrid::Registry"];

        /**
         * The IceGrid registry allows clients create sessions
         * directly with the registry.
         *
         * @see Session
         * @see AdminSession
         *
         **/
        IceGrid.Registry = function (_Ice$Object16) {
            _inherits(_class92, _Ice$Object16);

            function _class92() {
                _classCallCheck(this, _class92);

                return _possibleConstructorReturn(this, (_class92.__proto__ || Object.getPrototypeOf(_class92)).apply(this, arguments));
            }

            return _class92;
        }(Ice.Object);

        IceGrid.RegistryPrx = function (_Ice$ObjectPrx12) {
            _inherits(_class93, _Ice$ObjectPrx12);

            function _class93() {
                _classCallCheck(this, _class93);

                return _possibleConstructorReturn(this, (_class93.__proto__ || Object.getPrototypeOf(_class93)).apply(this, arguments));
            }

            return _class93;
        }(Ice.ObjectPrx);

        Slice.defineOperations(IceGrid.Registry, IceGrid.RegistryPrx, iceC_IceGrid_Registry_ids, 1, {
            "createSession": [,,,, ["IceGrid.SessionPrx"], [[7], [7]],, [IceGrid.PermissionDeniedException],,],
            "createAdminSession": [,,,, ["IceGrid.AdminSessionPrx"], [[7], [7]],, [IceGrid.PermissionDeniedException],,],
            "createSessionFromSecureConnection": [,,,, ["IceGrid.SessionPrx"],,, [IceGrid.PermissionDeniedException],,],
            "createAdminSessionFromSecureConnection": [,,,, ["IceGrid.AdminSessionPrx"],,, [IceGrid.PermissionDeniedException],,],
            "getSessionTimeout": [, 2, 1,, [3],,,,,],
            "getACMTimeout": [, 2, 1,, [3],,,,,]
        });

        var iceC_IceGrid_Locator_ids = ["::Ice::Locator", "::Ice::Object", "::IceGrid::Locator"];

        /**
         * The IceGrid locator interface provides access to the {@link Query}
         * and {@link Registry} object of the IceGrid registry.
         *
         * @see Query
         * @see Registry
         *
         **/
        IceGrid.Locator = function (_Ice$Object17) {
            _inherits(_class94, _Ice$Object17);

            function _class94() {
                _classCallCheck(this, _class94);

                return _possibleConstructorReturn(this, (_class94.__proto__ || Object.getPrototypeOf(_class94)).apply(this, arguments));
            }

            _createClass(_class94, null, [{
                key: "_iceImplements",
                get: function get() {
                    return [Ice.Locator];
                }
            }]);

            return _class94;
        }(Ice.Object);

        IceGrid.LocatorPrx = function (_Ice$ObjectPrx13) {
            _inherits(_class95, _Ice$ObjectPrx13);

            function _class95() {
                _classCallCheck(this, _class95);

                return _possibleConstructorReturn(this, (_class95.__proto__ || Object.getPrototypeOf(_class95)).apply(this, arguments));
            }

            _createClass(_class95, null, [{
                key: "_implements",
                get: function get() {
                    return [Ice.LocatorPrx];
                }
            }]);

            return _class95;
        }(Ice.ObjectPrx);

        Slice.defineOperations(IceGrid.Locator, IceGrid.LocatorPrx, iceC_IceGrid_Locator_ids, 2, {
            "getLocalRegistry": [, 2, 2,, ["IceGrid.RegistryPrx"],,,,,],
            "getLocalQuery": [, 2, 2,, ["IceGrid.QueryPrx"],,,,,]
        });
    })();

    (function () {
        // **********************************************************************
        //
        // Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
        //
        // This copy of Ice is licensed to you under the terms described in the
        // ICE_LICENSE file included in this distribution.
        //
        // **********************************************************************
        //
        // Ice version 3.7.0
        //
        // <auto-generated>
        //
        // Generated from file `UserAccountMapper.ice'
        //
        // Warning: do not edit this file.
        //
        // </auto-generated>
        //


        /**
         * This exception is raised if a user account for a given session
         * identifier can't be found.
         *
         **/
        IceGrid.UserAccountNotFoundException = function (_Ice$UserException22) {
            _inherits(_class96, _Ice$UserException22);

            function _class96() {
                var _cause = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";

                _classCallCheck(this, _class96);

                return _possibleConstructorReturn(this, (_class96.__proto__ || Object.getPrototypeOf(_class96)).call(this, _cause));
            }

            _createClass(_class96, [{
                key: "_mostDerivedType",
                value: function _mostDerivedType() {
                    return IceGrid.UserAccountNotFoundException;
                }
            }], [{
                key: "_parent",
                get: function get() {
                    return Ice.UserException;
                }
            }, {
                key: "_id",
                get: function get() {
                    return "::IceGrid::UserAccountNotFoundException";
                }
            }]);

            return _class96;
        }(Ice.UserException);

        var iceC_IceGrid_UserAccountMapper_ids = ["::Ice::Object", "::IceGrid::UserAccountMapper"];

        /**
         * A user account mapper object is used by IceGrid nodes to map
         * session identifiers to user accounts.
         *
         **/
        IceGrid.UserAccountMapper = function (_Ice$Object18) {
            _inherits(_class97, _Ice$Object18);

            function _class97() {
                _classCallCheck(this, _class97);

                return _possibleConstructorReturn(this, (_class97.__proto__ || Object.getPrototypeOf(_class97)).apply(this, arguments));
            }

            return _class97;
        }(Ice.Object);

        IceGrid.UserAccountMapperPrx = function (_Ice$ObjectPrx14) {
            _inherits(_class98, _Ice$ObjectPrx14);

            function _class98() {
                _classCallCheck(this, _class98);

                return _possibleConstructorReturn(this, (_class98.__proto__ || Object.getPrototypeOf(_class98)).apply(this, arguments));
            }

            return _class98;
        }(Ice.ObjectPrx);

        Slice.defineOperations(IceGrid.UserAccountMapper, IceGrid.UserAccountMapperPrx, iceC_IceGrid_UserAccountMapper_ids, 1, {
            "getUserAccount": [,,,, [7], [[7]],, [IceGrid.UserAccountNotFoundException],,]
        });
    })();

    root.IceGrid = IceGrid;
})();
//# sourceMappingURL=IceGrid.js.map
