{"version":3,"sources":["Glacier2.js"],"names":["root","window","global","self","Glacier2","Slice","Ice","iceC_IceMX_SessionMetrics_ids","IceMX","SessionMetrics","id","total","current","totalLifetime","failures","forwardedClient","forwardedServer","routingTableSize","queuedClient","queuedServer","overriddenClient","overriddenServer","ostr","writeInt","istr","readInt","Metrics","defineValue","SessionMetricsDisp","MetricsDisp","defineOperations","undefined","SSLInfo","remoteHost","remotePort","localHost","localPort","cipher","certs","writeString","StringSeqHelper","write","readString","read","defineStruct","CannotCreateSessionException","reason","_cause","UserException","PreservedUserException","iceC_Glacier2_Session_ids","Session","Object","SessionPrx","ObjectPrx","iceC_Glacier2_StringSet_ids","StringSet","StringSetPrx","iceC_Glacier2_IdentitySet_ids","IdentitySet","IdentitySetPrx","iceC_Glacier2_SessionControl_ids","SessionControl","SessionControlPrx","iceC_Glacier2_SessionManager_ids","SessionManager","SessionManagerPrx","iceC_Glacier2_SSLSessionManager_ids","SSLSessionManager","SSLSessionManagerPrx","PermissionDeniedException","iceC_Glacier2_PermissionsVerifier_ids","PermissionsVerifier","PermissionsVerifierPrx","iceC_Glacier2_SSLPermissionsVerifier_ids","SSLPermissionsVerifier","SSLPermissionsVerifierPrx","SessionNotExistException","iceC_Glacier2_Router_ids","Router","RouterPrx"],"mappings":"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","file":"Glacier2.js","sourcesContent":["(function()\n{\n    var root = typeof(window) !== \"undefined\" ? window : typeof(global) !== \"undefined\" ? global : typeof(self) !== \"undefined\" ? self : {};\n    root.Glacier2 = root.Glacier2 || {};\n    var Slice = Ice.Slice;\n\n    (function()\n    {\n        // **********************************************************************\n        //\n        // Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.\n        //\n        // This copy of Ice is licensed to you under the terms described in the\n        // ICE_LICENSE file included in this distribution.\n        //\n        // **********************************************************************\n        //\n        // Ice version 3.7.0\n        //\n        // <auto-generated>\n        //\n        // Generated from file `Metrics.ice'\n        //\n        // Warning: do not edit this file.\n        //\n        // </auto-generated>\n        //\n        \n        \n            const iceC_IceMX_SessionMetrics_ids = [\n                \"::Ice::Object\",\n                \"::IceMX::Metrics\",\n                \"::IceMX::SessionMetrics\"\n            ];\n        \n            /**\n             * Provides information on Glacier2 sessions.\n             *\n             **/\n            IceMX.SessionMetrics = class extends IceMX.Metrics\n            {\n                constructor(id, total, current, totalLifetime, failures, forwardedClient = 0, forwardedServer = 0, routingTableSize = 0, queuedClient = 0, queuedServer = 0, overriddenClient = 0, overriddenServer = 0)\n                {\n                    super(id, total, current, totalLifetime, failures);\n                    this.forwardedClient = forwardedClient;\n                    this.forwardedServer = forwardedServer;\n                    this.routingTableSize = routingTableSize;\n                    this.queuedClient = queuedClient;\n                    this.queuedServer = queuedServer;\n                    this.overriddenClient = overriddenClient;\n                    this.overriddenServer = overriddenServer;\n                }\n        \n                _iceWriteMemberImpl(ostr)\n                {\n                    ostr.writeInt(this.forwardedClient);\n                    ostr.writeInt(this.forwardedServer);\n                    ostr.writeInt(this.routingTableSize);\n                    ostr.writeInt(this.queuedClient);\n                    ostr.writeInt(this.queuedServer);\n                    ostr.writeInt(this.overriddenClient);\n                    ostr.writeInt(this.overriddenServer);\n                }\n        \n                _iceReadMemberImpl(istr)\n                {\n                    this.forwardedClient = istr.readInt();\n                    this.forwardedServer = istr.readInt();\n                    this.routingTableSize = istr.readInt();\n                    this.queuedClient = istr.readInt();\n                    this.queuedServer = istr.readInt();\n                    this.overriddenClient = istr.readInt();\n                    this.overriddenServer = istr.readInt();\n                }\n            };\n        \n            Slice.defineValue(IceMX.SessionMetrics, iceC_IceMX_SessionMetrics_ids[2], false);\n        \n            /**\n             * Provides information on Glacier2 sessions.\n             *\n             **/\n            IceMX.SessionMetricsDisp = class extends IceMX.MetricsDisp\n            {\n            };\n        \n            Slice.defineOperations(IceMX.SessionMetricsDisp, undefined, iceC_IceMX_SessionMetrics_ids, 2);\n        \n    }());\n\n    (function()\n    {\n        // **********************************************************************\n        //\n        // Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.\n        //\n        // This copy of Ice is licensed to you under the terms described in the\n        // ICE_LICENSE file included in this distribution.\n        //\n        // **********************************************************************\n        //\n        // Ice version 3.7.0\n        //\n        // <auto-generated>\n        //\n        // Generated from file `SSLInfo.ice'\n        //\n        // Warning: do not edit this file.\n        //\n        // </auto-generated>\n        //\n        \n        \n            /**\n             * Information taken from an SSL connection used for permissions\n             * verification.\n             *\n             * @see PermissionsVerifier\n             *\n             **/\n            Glacier2.SSLInfo = class\n            {\n                constructor(remoteHost = \"\", remotePort = 0, localHost = \"\", localPort = 0, cipher = \"\", certs = null)\n                {\n                    this.remoteHost = remoteHost;\n                    this.remotePort = remotePort;\n                    this.localHost = localHost;\n                    this.localPort = localPort;\n                    this.cipher = cipher;\n                    this.certs = certs;\n                }\n        \n                _write(ostr)\n                {\n                    ostr.writeString(this.remoteHost);\n                    ostr.writeInt(this.remotePort);\n                    ostr.writeString(this.localHost);\n                    ostr.writeInt(this.localPort);\n                    ostr.writeString(this.cipher);\n                    Ice.StringSeqHelper.write(ostr, this.certs);\n                }\n        \n                _read(istr)\n                {\n                    this.remoteHost = istr.readString();\n                    this.remotePort = istr.readInt();\n                    this.localHost = istr.readString();\n                    this.localPort = istr.readInt();\n                    this.cipher = istr.readString();\n                    this.certs = Ice.StringSeqHelper.read(istr);\n                }\n        \n                static get minWireSize()\n                {\n                    return  12;\n                }\n            };\n        \n            Slice.defineStruct(Glacier2.SSLInfo, true, true);\n        \n    }());\n\n    (function()\n    {\n        // **********************************************************************\n        //\n        // Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.\n        //\n        // This copy of Ice is licensed to you under the terms described in the\n        // ICE_LICENSE file included in this distribution.\n        //\n        // **********************************************************************\n        //\n        // Ice version 3.7.0\n        //\n        // <auto-generated>\n        //\n        // Generated from file `PermissionsVerifierF.ice'\n        //\n        // Warning: do not edit this file.\n        //\n        // </auto-generated>\n        //\n        \n        \n    }());\n\n    (function()\n    {\n        // **********************************************************************\n        //\n        // Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.\n        //\n        // This copy of Ice is licensed to you under the terms described in the\n        // ICE_LICENSE file included in this distribution.\n        //\n        // **********************************************************************\n        //\n        // Ice version 3.7.0\n        //\n        // <auto-generated>\n        //\n        // Generated from file `Session.ice'\n        //\n        // Warning: do not edit this file.\n        //\n        // </auto-generated>\n        //\n        \n        \n            /**\n             * This exception is raised if an attempt to create a new session failed.\n             *\n             **/\n            Glacier2.CannotCreateSessionException = class extends Ice.UserException\n            {\n                constructor(reason = \"\", _cause = \"\")\n                {\n                    super(_cause);\n                    this.reason = reason;\n                }\n        \n                static get _parent()\n                {\n                    return Ice.UserException;\n                }\n        \n                static get _id()\n                {\n                    return \"::Glacier2::CannotCreateSessionException\";\n                }\n        \n                _mostDerivedType()\n                {\n                    return Glacier2.CannotCreateSessionException;\n                }\n        \n                _writeMemberImpl(ostr)\n                {\n                    ostr.writeString(this.reason);\n                }\n        \n                _readMemberImpl(istr)\n                {\n                    this.reason = istr.readString();\n                }\n            };\n        \n            Slice.PreservedUserException(Glacier2.CannotCreateSessionException);\n        \n            const iceC_Glacier2_Session_ids = [\n                \"::Glacier2::Session\",\n                \"::Ice::Object\"\n            ];\n        \n            /**\n             * A client-visible session object, which is tied to the lifecycle of a {@link Router}.\n             *\n             * @see Router\n             * @see SessionManager\n             *\n             **/\n            Glacier2.Session = class extends Ice.Object\n            {\n            };\n        \n            Glacier2.SessionPrx = class extends Ice.ObjectPrx\n            {\n            };\n        \n            Slice.defineOperations(Glacier2.Session, Glacier2.SessionPrx, iceC_Glacier2_Session_ids, 0,\n            {\n                \"destroy\": [, , , , , , , , , ]\n            });\n        \n            const iceC_Glacier2_StringSet_ids = [\n                \"::Glacier2::StringSet\",\n                \"::Ice::Object\"\n            ];\n        \n            /**\n             * An object for managing the set of identity constraints for specific\n             * parts of object identity on a\n             * {@link Session}.\n             *\n             * @see Session\n             * @see SessionControl\n             *\n             **/\n            Glacier2.StringSet = class extends Ice.Object\n            {\n            };\n        \n            Glacier2.StringSetPrx = class extends Ice.ObjectPrx\n            {\n            };\n        \n            Slice.defineOperations(Glacier2.StringSet, Glacier2.StringSetPrx, iceC_Glacier2_StringSet_ids, 0,\n            {\n                \"add\": [, 2, 2, , , [[\"Ice.StringSeqHelper\"]], , , , ],\n                \"remove\": [, 2, 2, , , [[\"Ice.StringSeqHelper\"]], , , , ],\n                \"get\": [, 2, 2, , [\"Ice.StringSeqHelper\"], , , , , ]\n            });\n        \n            const iceC_Glacier2_IdentitySet_ids = [\n                \"::Glacier2::IdentitySet\",\n                \"::Ice::Object\"\n            ];\n        \n            /**\n             * An object for managing the set of object identity constraints on a\n             * {@link Session}.\n             *\n             * @see Session\n             * @see SessionControl\n             *\n             **/\n            Glacier2.IdentitySet = class extends Ice.Object\n            {\n            };\n        \n            Glacier2.IdentitySetPrx = class extends Ice.ObjectPrx\n            {\n            };\n        \n            Slice.defineOperations(Glacier2.IdentitySet, Glacier2.IdentitySetPrx, iceC_Glacier2_IdentitySet_ids, 0,\n            {\n                \"add\": [, 2, 2, , , [[\"Ice.IdentitySeqHelper\"]], , , , ],\n                \"remove\": [, 2, 2, , , [[\"Ice.IdentitySeqHelper\"]], , , , ],\n                \"get\": [, 2, 2, , [\"Ice.IdentitySeqHelper\"], , , , , ]\n            });\n        \n            const iceC_Glacier2_SessionControl_ids = [\n                \"::Glacier2::SessionControl\",\n                \"::Ice::Object\"\n            ];\n        \n            /**\n             * An administrative session control object, which is tied to the\n             * lifecycle of a {@link Session}.\n             *\n             * @see Session\n             *\n             **/\n            Glacier2.SessionControl = class extends Ice.Object\n            {\n            };\n        \n            Glacier2.SessionControlPrx = class extends Ice.ObjectPrx\n            {\n            };\n        \n            Slice.defineOperations(Glacier2.SessionControl, Glacier2.SessionControlPrx, iceC_Glacier2_SessionControl_ids, 0,\n            {\n                \"categories\": [, , , , [\"Glacier2.StringSetPrx\"], , , , , ],\n                \"adapterIds\": [, , , , [\"Glacier2.StringSetPrx\"], , , , , ],\n                \"identities\": [, , , , [\"Glacier2.IdentitySetPrx\"], , , , , ],\n                \"getSessionTimeout\": [, 2, 2, , [3], , , , , ],\n                \"destroy\": [, , , , , , , , , ]\n            });\n        \n            const iceC_Glacier2_SessionManager_ids = [\n                \"::Glacier2::SessionManager\",\n                \"::Ice::Object\"\n            ];\n        \n            /**\n             * The session manager for username/password authenticated users that\n             * is responsible for managing {@link Session} objects. New session objects\n             * are created by the {@link Router} object calling on an application-provided\n             * session manager. If no session manager is provided by the application,\n             * no client-visible sessions are passed to the client.\n             *\n             * @see Router\n             * @see Session\n             *\n             **/\n            Glacier2.SessionManager = class extends Ice.Object\n            {\n            };\n        \n            Glacier2.SessionManagerPrx = class extends Ice.ObjectPrx\n            {\n            };\n        \n            Slice.defineOperations(Glacier2.SessionManager, Glacier2.SessionManagerPrx, iceC_Glacier2_SessionManager_ids, 0,\n            {\n                \"create\": [, , , 2, [\"Glacier2.SessionPrx\"], [[7], [\"Glacier2.SessionControlPrx\"]], ,\n                [\n                    Glacier2.CannotCreateSessionException\n                ], , ]\n            });\n        \n            const iceC_Glacier2_SSLSessionManager_ids = [\n                \"::Glacier2::SSLSessionManager\",\n                \"::Ice::Object\"\n            ];\n        \n            /**\n             * The session manager for SSL authenticated users that is\n             * responsible for managing {@link Session} objects. New session objects are\n             * created by the {@link Router} object calling on an application-provided\n             * session manager. If no session manager is provided by the\n             * application, no client-visible sessions are passed to the client.\n             *\n             * @see Router\n             * @see Session\n             *\n             **/\n            Glacier2.SSLSessionManager = class extends Ice.Object\n            {\n            };\n        \n            Glacier2.SSLSessionManagerPrx = class extends Ice.ObjectPrx\n            {\n            };\n        \n            Slice.defineOperations(Glacier2.SSLSessionManager, Glacier2.SSLSessionManagerPrx, iceC_Glacier2_SSLSessionManager_ids, 0,\n            {\n                \"create\": [, , , 2, [\"Glacier2.SessionPrx\"], [[Glacier2.SSLInfo], [\"Glacier2.SessionControlPrx\"]], ,\n                [\n                    Glacier2.CannotCreateSessionException\n                ], , ]\n            });\n        \n    }());\n\n    (function()\n    {\n        // **********************************************************************\n        //\n        // Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.\n        //\n        // This copy of Ice is licensed to you under the terms described in the\n        // ICE_LICENSE file included in this distribution.\n        //\n        // **********************************************************************\n        //\n        // Ice version 3.7.0\n        //\n        // <auto-generated>\n        //\n        // Generated from file `RouterF.ice'\n        //\n        // Warning: do not edit this file.\n        //\n        // </auto-generated>\n        //\n        \n        \n    }());\n\n    (function()\n    {\n        // **********************************************************************\n        //\n        // Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.\n        //\n        // This copy of Ice is licensed to you under the terms described in the\n        // ICE_LICENSE file included in this distribution.\n        //\n        // **********************************************************************\n        //\n        // Ice version 3.7.0\n        //\n        // <auto-generated>\n        //\n        // Generated from file `PermissionsVerifier.ice'\n        //\n        // Warning: do not edit this file.\n        //\n        // </auto-generated>\n        //\n        \n        \n            /**\n             * This exception is raised if a client is denied the ability to create\n             * a session with the router.\n             *\n             **/\n            Glacier2.PermissionDeniedException = class extends Ice.UserException\n            {\n                constructor(reason = \"\", _cause = \"\")\n                {\n                    super(_cause);\n                    this.reason = reason;\n                }\n        \n                static get _parent()\n                {\n                    return Ice.UserException;\n                }\n        \n                static get _id()\n                {\n                    return \"::Glacier2::PermissionDeniedException\";\n                }\n        \n                _mostDerivedType()\n                {\n                    return Glacier2.PermissionDeniedException;\n                }\n        \n                _writeMemberImpl(ostr)\n                {\n                    ostr.writeString(this.reason);\n                }\n        \n                _readMemberImpl(istr)\n                {\n                    this.reason = istr.readString();\n                }\n            };\n        \n            Slice.PreservedUserException(Glacier2.PermissionDeniedException);\n        \n            const iceC_Glacier2_PermissionsVerifier_ids = [\n                \"::Glacier2::PermissionsVerifier\",\n                \"::Ice::Object\"\n            ];\n        \n            /**\n             * The Glacier2 permissions verifier. This is called through the\n             * process of establishing a session.\n             *\n             * @see Router\n             *\n             **/\n            Glacier2.PermissionsVerifier = class extends Ice.Object\n            {\n            };\n        \n            Glacier2.PermissionsVerifierPrx = class extends Ice.ObjectPrx\n            {\n            };\n        \n            Slice.defineOperations(Glacier2.PermissionsVerifier, Glacier2.PermissionsVerifierPrx, iceC_Glacier2_PermissionsVerifier_ids, 0,\n            {\n                \"checkPermissions\": [, 2, 1, 2, [1], [[7], [7]], [[7]],\n                [\n                    Glacier2.PermissionDeniedException\n                ], , ]\n            });\n        \n            const iceC_Glacier2_SSLPermissionsVerifier_ids = [\n                \"::Glacier2::SSLPermissionsVerifier\",\n                \"::Ice::Object\"\n            ];\n        \n            /**\n             * The SSL Glacier2 permissions verifier. This is called through the\n             * process of establishing a session.\n             *\n             * @see Router\n             *\n             **/\n            Glacier2.SSLPermissionsVerifier = class extends Ice.Object\n            {\n            };\n        \n            Glacier2.SSLPermissionsVerifierPrx = class extends Ice.ObjectPrx\n            {\n            };\n        \n            Slice.defineOperations(Glacier2.SSLPermissionsVerifier, Glacier2.SSLPermissionsVerifierPrx, iceC_Glacier2_SSLPermissionsVerifier_ids, 0,\n            {\n                \"authorize\": [, 2, 1, 2, [1], [[Glacier2.SSLInfo]], [[7]],\n                [\n                    Glacier2.PermissionDeniedException\n                ], , ]\n            });\n        \n    }());\n\n    (function()\n    {\n        // **********************************************************************\n        //\n        // Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.\n        //\n        // This copy of Ice is licensed to you under the terms described in the\n        // ICE_LICENSE file included in this distribution.\n        //\n        // **********************************************************************\n        //\n        // Ice version 3.7.0\n        //\n        // <auto-generated>\n        //\n        // Generated from file `Router.ice'\n        //\n        // Warning: do not edit this file.\n        //\n        // </auto-generated>\n        //\n        \n        \n            /**\n             * This exception is raised if a client tries to destroy a session\n             * with a router, but no session exists for the client.\n             *\n             * @see Router#destroySession\n             *\n             **/\n            Glacier2.SessionNotExistException = class extends Ice.UserException\n            {\n                constructor(_cause = \"\")\n                {\n                    super(_cause);\n                }\n        \n                static get _parent()\n                {\n                    return Ice.UserException;\n                }\n        \n                static get _id()\n                {\n                    return \"::Glacier2::SessionNotExistException\";\n                }\n        \n                _mostDerivedType()\n                {\n                    return Glacier2.SessionNotExistException;\n                }\n            };\n        \n            const iceC_Glacier2_Router_ids = [\n                \"::Glacier2::Router\",\n                \"::Ice::Object\",\n                \"::Ice::Router\"\n            ];\n        \n            /**\n             * The Glacier2 specialization of the <tt>Ice::Router</tt> interface.\n             *\n             **/\n            Glacier2.Router = class extends Ice.Object\n            {\n                static get _iceImplements()\n                {\n                    return [\n                        Ice.Router\n                    ];\n                }\n            };\n        \n            Glacier2.RouterPrx = class extends Ice.ObjectPrx\n            {\n                static get _implements()\n                {\n                    return [\n                        Ice.RouterPrx];\n                }\n            };\n        \n            Slice.defineOperations(Glacier2.Router, Glacier2.RouterPrx, iceC_Glacier2_Router_ids, 0,\n            {\n                \"getCategoryForClient\": [, 2, 1, , [7], , , , , ],\n                \"createSession\": [, , , 2, [\"Glacier2.SessionPrx\"], [[7], [7]], ,\n                [\n                    Glacier2.CannotCreateSessionException,\n                    Glacier2.PermissionDeniedException\n                ], , ],\n                \"createSessionFromSecureConnection\": [, , , 2, [\"Glacier2.SessionPrx\"], , ,\n                [\n                    Glacier2.CannotCreateSessionException,\n                    Glacier2.PermissionDeniedException\n                ], , ],\n                \"refreshSession\": [, , , , , , ,\n                [\n                    Glacier2.SessionNotExistException\n                ], , ],\n                \"destroySession\": [, , , , , , ,\n                [\n                    Glacier2.SessionNotExistException\n                ], , ],\n                \"getSessionTimeout\": [, 2, 1, , [4], , , , , ],\n                \"getACMTimeout\": [, 2, 1, , [3], , , , , ]\n            });\n        \n    }());\n\n    root.Glacier2 = Glacier2;\n}());\n\n"]}